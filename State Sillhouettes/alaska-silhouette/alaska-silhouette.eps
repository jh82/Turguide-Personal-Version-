%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: alaska-silhouette.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: M
%%CreationDate: 9/24/2015
%%BoundingBox: 0 0 723 450
%%HiResBoundingBox: 0 0 722.9996 449.0411
%%CropBox: 0 0 722.9996 449.0411
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 80 8%%BeginData: 4903 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD43FF5227A8FD79FFA87DFF7DF8F827FD77FFA8FFF8272727F8F8
%272727FD72FF7D7D52FD08F827F8F852277DFD6EFF5227FD0FF827FD6DFF
%52FD12F82752A8FD69FFA827FD17F8527DFD60FFA8FD04FF27FD1AF85252
%52A8FFFF2752FD57FF27F8F8272727FD1FF87D27F8F82752FD53FF7DFD2D
%F87DFD51FF52FD2EF87DFD51FFFD2EF827FD52FFFD2DF852FD52FFA8FD2C
%F827FD53FF52FD2BF827FD53FFA8FD2BF827FD54FFFD2BF827FD54FF27FD
%2BF8FD55FF7D2727FD27F827FD4DFFA8522727F8277DA8F87D52FD28F8FD
%4BFF5227FD06F827A827277DFD27F827FD49FF7DFD09F852FF27F8275252
%27FD25F8FD4AFF27FD08F8277DFF27F8F827FD26F87DFD4AFF7DFD0AF827
%FD29F8A8FD4AFF27FD34F87DFD4AFF27FD34F87DFD3EFF7D7DFD0AFF7DFD
%34F852FD3DFFA8F827FD0AFFA8FD34F852FD3DFF52F8F827F8FD09FF52FD
%33F827FD3EFF2727F8F852FD09FF7D27F827F8F8F8272727FD29F827FD40
%FF27F8F87DFD0CFFA82727A87DFD2AF827FD40FF52F8F8F8FD0DFFA8A8FF
%FD2BF827FD40FFA827527DFD10FF52FD2BF8FD54FF52FD2AF827FD4DFF52
%A8FFFF27A8FF27FD2AF827FD4BFFA8F8F8F8A8F8F8F827FD2CF8FD4BFFFD
%35F8FD49FFA8FD36F87DFD47FF7DFD37F8A8FD45FFA827FD38F852FD45FF
%52FD39F87DFD45FFFD3AF827FD45FF27FD39F852FD45FF52FD39F827FD46
%FF52FD38F827FD40FF7D52FD04FFA8FD38F827FD40FFF8F8F8277DA8FD39
%F827FD40FF27F8F8F827A8FD3AF8FD40FFA827F8F827FF7D27FD05F827FD
%1BF852F827FD13F827FD41FFA8F827A8FFFFFD05F827FD1BF852522727FD
%14F8FD47FF27F8F8F827FD1BF827A8FF27FD15F8FD47FF7D27F8F85227FD
%19F8277D5227FD04F827FD11F8A8FD48FFA8A8FFFD19F8277DFD07F85227
%27FD0FF8A8FD4BFF27FD17F827A827FD08F8A8FF7D7DFD0DF87DFD4AFF7D
%FD17F87DFFA8FD09F8272727F827FD0CF8527DF82727FD46FF52FD17F87D
%FFFD0DF87DA8FF7D27FD0DF827A8FD07FFA8FD3CFF7D27FD15F852A8FF27
%F8F827F8F8277D272727F8F827FD05FFA8F8F8F8522727FD04F82752F827
%7DFD05FF27F827FD3AFFA8FD04F827FD11F87DFFFFFF27F827F8F8F852FD
%04FF27277DFD05FFA8527DFD05FF7DFD0427F8F8F852FFFFFFFD04F852FD
%3AFF7D5252FFFFFF5227F8F82727FD09F827A8FFFFFF5227F8F827A8FD17
%FF27FD06F827FF52FD05F852FD40FF52F82752F827275227FD07F8A8FFFF
%52F82727FD1AFF52FD0EF852FD40FF7DFFFFFF7D272727FD07F87DFD22FF
%A827FD0CF827FD42FFA8FD0AF827FD26FF27F8F8F85227F827FD04F827FD
%41FF52FD09F8A8FFFF7D7DFD24FF27F8F852A827F8275227F827A8FD40FF
%FD09F87DFFFF27F8F827FD24FF525252F852F8F8277DF8F827A8FD3EFFA8
%27FD06F827A8A8A82727F8F852FD25FF5227F8277DF8F85227F8F852FD3C
%FFA8FD07F8277DFFA827FD05F8FD26FF52F8F8F82727F8277DF8F8F87DFD
%3AFF7DFD07F852FFA8F827FD05F827FD27FF27F8F8F87DF827FF27F8F8F8
%A8FD37FF5227FD07F87DFFFF7DFD08F8FD27FFA827F8F82727F85227FD04
%F8FD35FF7DFD07F82727A8FD04FFFD06F827FD29FF52F8F82727F8F82752
%27F8F852FD2FFF7D7DFFA827FD07F852FD07FFA8FD04F852FD2BFFF8F8F8
%52F8F8F827FF52F8F827527DFD2AFFA827F8F8F852FD06F852FD08FFA827
%27F8A8FD2DFF7DF8F82727F8277D7DFD07F827A8FD26FF52FD0CF852FD08
%FFF8F8F827FD30FFF82727F8275227FD08F827FD21FF5252A8A827FD06F8
%272752F82752FD0AFF7D7D7DFD31FFA82727F8A8F82752A8FD06F827A8FF
%A852F8FD1AFFA8F8F8F827FD05F8FF52522752FF7DFD42FF272752F8F8F8
%7DF827A8F8F8F8A827FD04F852FD14FFA8FFFF7DA8FD05F87D527D27FFFF
%A8F8F827FD44FF7D5227F8F8F87D7D272752F8F8FFA827F8F8F827FD10FF
%52A8FF27F82752F8F82727A827277DFD05FFA82752FD47FF52FD04F87DF8
%2752F8F8FFFFFFA8F8F8F852FF2727FFA87DA8FFFFA8FFFFFFA8F8F852FF
%27F8F87D277DFD55FFA8FD04F8272727F8F827FD05FF52F8F8522727FF27
%F827F852F8527DF8F8F82727FD04F87DFD59FFFD04F8A8A852527DFD07FF
%527DFD04FFA87D7DA852A827F8277DFF27522752A8FD5BFFF827A8FD7EFF
%7DFD06FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-09-24T07:35:52-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-09-24T07:35:52-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-09-24T07:35:52-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FUFqet6NpQtzqd9b2Iu5ltrU3EqRerNJskcfMjk7dlG+KvMvzB/5yN8k+XbTz&#xA;Da6RdQ6t5j0KBJDYhiIWd544GQTD4XaIyhpEQ1AB8G4qvFfzC/5y9vtf8gxaPoVlNpOv30fpa1fA&#xA;qI40IpItmQzP+8/mahQdKmjBVDfkr/zkDcfl95Hit9bk/Tdnd6kLfTdOSdRcWNvGoa7mfkGPBzMn&#xA;ooaBmEm4xV9aaX508oatqMumaXrdhfahCvOW0trmKWVV8SiMTTfFU5xV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRmvbOGVYZp445nVnSN3VWKoKuwBNSF7ntiqE&#xA;8w+YNL8v6Fe65qcyw6fYQvcTyEgVVBXiterN0Udztir87vzS/NLzH+YvmN9X1d/Tto+SabpqMTDb&#xA;Qk/ZXpydqAu9KsfAAAKsNxV2KuxVPPJPnHWfJvmiw8y6MYxqGnuzRLMpeJ1dGjdHUFSVZHINCD4E&#xA;HfFX0Fpv/OcOsJFGupeVbeeX4PVltrp4VNPt8UeOYivb4tvfFXtPkj/nIv8AKzzbBfSxamNG+oFf&#xA;WXWGhs6o54rIjmRoypbb7VR3G4xVn2j6/oWt2ZvdG1G11OzDFDc2c0dxEGXcrzjZlqK9K4qhvLXn&#xA;Dyx5ntZbry/qUGpW8Ez28ssDcgJYqc1+jmpr0IIIxVOMVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdiqA8wyavFoGpS6LGkusJaztpsUv8AdvciNjCr7r8JkoDuMVfnD+YvnTzZ5u80&#xA;T6n5pJXV4USzlgKGH0vqw4MnpH+7PMMzr/MTsOmKpRqXmHX9UtrS21LUrq+trCMQ2UNxNJKkMaig&#xA;SJXJCKAKUXFUvxV2KuxV2KuxV2KuxVNtF82eZ9Dt7y20bVbrTrfUEEd9FbTPEsyAEAOEIrsxH0nF&#xA;UNpGs6ro2ow6lpN3LY39u3KG5gdo5FPsykfTir7J/wCcbf8AnIHzD+YGp3PlnzDawtqFjYm8TVIK&#xA;x+skckULCWLdeZMwaqUH+Tir37FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+&#xA;Yv8AnL/8pLCTSW/MXS0EN9bPFDriAUE0UjLDFP8A66OVQ+II/l3VfJGKuxV2KuxV2KuxV2KuxV2K&#xA;uxV7t/zhrdCH82p4uXE3OlXMVP5gJYZOP/JOv0Yq+3sVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVYt5k/NP8ufLUjw635isLO5jNJLVpledT7wx8pB/wOKsd1fzT+WH5seSfMHl3S/M&#xA;VtOk9nIZ2HISwBKOlwYJBHIyRyKrGnyqK4q+Ltb/ACp1Gw8kjztYavp2seXDdCyM9q80cyTH9h4b&#xA;mKBuXcha7GvTfFWD4q7FXYq7FXYq7FXYq7FXYq9e/wCcUrkw/nfosYNBcQ3sZHjS0kk/40xV97Yq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXyl/zlBpH572t7f6rBq11c+Qn+zBpzmAW8&#xA;bAAx3cUXF5F5V+Nua+PGvHFXyyST1xV6h/zjz+YPlHyN54k1TzNbTS2l1avZJcRBZFg9Zl5vJCRy&#xA;dSq0PE7Cvwt2VX+f7nRvLjXeh6BqFj5l/LrWLxdZ0yySZ1ntZSrRbqrJNFKkZaP94rBlCsy1pRVg&#xA;XmObytNdQyeXLa8s7Zoh9Ztr6aO5ZZqmvpyxxwckK0+0gNcVSjFXYq7FXYq7FXYq7FXYq9M/5xtu&#xA;ha/nb5XkLceU00QPX++tpY6fTzpir9CMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYZ58/Nny&#xA;h5I1PQ9N1qZxd67crb26RBT6SFghuJizLxiVmAJ6+ANDirMgynoQfl74q3irwv8A5zDsNQk/K621&#xA;GxaVH0zUonuJImZQsE8Mtu5ahGzNKqfTTucVfD+KuxV2KuxV2KuxV2KuxV2KuxV2KuxVmX5NXBt/&#xA;zZ8nyA0LaxZR+O0s6xn/AIlir9IsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeUfnX/zj7o/5&#xA;nXNlqL6nLpOrWMRt1uFjE8Twli6q8RaPdXYkFWHXeu1FXzh+R35jP+T/AOZWr6B5mr+jJ5zpurSR&#xA;HksFxaysiXAFKui/EDTfiaitKFV9yqysoZSGVhVWG4IPcYqoajp1jqVhcaffwJc2V3G0NzbyCqPG&#xA;44srDwIOKvnbW/8AnCbylc3NzLpHmC80+KRi1vbyxJcrED+xy5RMyg9KmtOpPXFXmZ/5xE8/J50h&#xA;0SSdDofoR3N55iRCYYwQfUjjiLc5JFZSFXauxPEHFXk3nO38lW2r+j5Qu7690xIwJLnUIo4XaUEh&#xA;jGsZb92diOVDiqQ4q7FXYq7FXYq7FXYq7FXYqn3kG8Fl568uXhPEW2p2cxYdRwuEao+VMVfptirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVYz/yrP8AL467da8/l6wl1e9ZZLi8lgSVy67h15hg&#xA;jV3JUAk7nFWTYqpXd3a2drNd3cyW9rbo0s88rBI0jQcmd2agCgCpJxV5z5R/5yH/ACx81+Z7ny/p&#xA;N9IJbeGS4W9uUW3tpkioXETSMrkqpLfEg+EE9sVSxP8AnKr8nf8AEV5o0uozQx2hZRqzQl7KZkFW&#xA;ELxGSRulATGA37JNRVV8VfmHrWk655513WNIg+raZf3s09pCQFIjdyQSo2Ut9ojtWmKsexV2KuxV&#xA;2KuxV2KuxV2KuxVVtp2guYp1ryidXFNjVTXFX6n4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqgtZ1vSNE02bU9XvIrDT7ccprmdwiKO257noB1J6Yq+Nvz+/5yXbztZXPlTy1bmDy08i/WL6&#xA;YMs936TBl4pt6cXNQ1G+I0FeO64q8BxV2KuxV2KuxV2KuxV2KuxV2KuxV2KtgkEEdRir9QfLV4L3&#xA;y5pV4vS5s7eYb12kiVuv04qmWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV86/85r2euS+R&#xA;tFubeYfoW31AjULYLVjNJEwt5S3ZUAkWniw9sVfGuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV+&#xA;lf5VTif8sPKMtQS2jafyp2YWsYYfQdsVZTirsVdirsVdirsVdirsVdirsVdirsVdirsVdir57/Nr&#xA;/nJzW/y+/M248vvoEV/otvaROpaV4J5ZZlD+okvGRBGteHH0zuCeXbFVW+/5yM07zB+SWrebYfLn&#xA;1i5sbmOw1HSZ5VeKB5qGG59TgC0YZl4/CG5+FOWKviskEkgUHYYq1irsVdirsVdirsVdiqslndSW&#xA;0t0kTtbQMiTTAEojSV4KzdAW4NT5Yqo4q7FXYq7FXYq/RT/nH++N7+TXlSYmpWyENf8AjA7Q/wDG&#xA;mKvQMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVef/AJxfk3oP5maElnduLHVrVuWn6skYkeOv&#xA;2o2FVLxv3XkN6HFVb8uvya8meRPL1/oWnxyX9pqr89ROoenMZhwEfpsoRE9Olfh49zir4J/MDyfq&#xA;HlbzjqeiT2VxapDcyrYrcIytJb+oywyKSBzVlGzLscVd5z0ebQJbDQLqz+qalbWsNzqYcUlae9QX&#xA;KK/Icl9O3kiTgfssG7k4qxvFXYq7FXYq7FVeysb2/u4bKxt5Lq8uGEcFtCjSSO56KiKCzE+AxV7y&#xA;fy//AC88qfk9eWPnjXY4/NT38OqXPl/S7qB76kMTwW9nIreoI3X6zI7OVPEE7Gm6rw65C6prHp6T&#xA;p5hF1IsVjp0BknclqIiAnk8kjnrQbsdgBQYqgcVaxV2KuxV9+/8AOLU4l/I7y6tatCbyNj/0ezMK&#xA;f7Fhir1fFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVG4sbK5khkuLeOaS3b1Ld5EVmjf&#xA;+ZCQeJ9xir4A/wCclNai1f8AObzBNFDHELaSOzLxSLL6ht4lj9RmUsvI0px/ZpxPxA4q8wxV2Kux&#xA;V2Kro0LyKiqWLEAKu5NewxV9LXP5feWfyZ/LG483yalNJ5916wW30GC6iW0ubJrxVE5jhV5njmhi&#xA;dg0nP4T8OxbdV81KsssoVQ0ksjUVRVmZmPQdyScVReiaxf6JrFnq1g4jvbGZJ4GYBhzQ1FVOxB7j&#xA;FXtuneYfye896baaZZflxcr5ysbG4e3s9JkYW1xLCDIquFkWZ0dmZmr+8VRxV22xVhWuf849/m7o&#xA;ulLql75flNp9XN1MYXjleFFNCsqIxZWoQ1KHb5NRV55JFJE3CRGRx1VgQfuOKrMVfSP5Kf8AOSPl&#xA;T8v/AMrG0XULa7v9at7m4ks7OIBYmSXi68pmP7scy1aK3jQ4q90/I3877T80bDU3/R36Kv8AS5I1&#xA;ltvW9dWimBMcitwjPVGUinYGu9Aq9PxVY80MbRpJIqNK3GJWIBZqFqKD1NATiq/FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYqxz8wdE80a15UvdO8r6z+gtZmA+r6hwDgAH4kJoWTkNua/EvUYq+aNE/&#xA;5wm8zT3xk8x+ZLSG3LcpDZJLcSvU1beYQBSfH4vlirCvzs/5xw1j8urOXXrW/i1Dy290ltbV5i8j&#xA;EqsymdQgioCnHkrbmnwitAqwLWvJ7aToGjy3EF9+m9ZiW/hhMHG2FjIWWIq5q0sknEP8I4hSNy1Q&#xA;qqCv/JPm/TtGXW9Q0a8stJeRIY725gkhjeSRWZVRnC8qhD9nFUkxV9jf84neV/ynfRZb3T3h1rzj&#xA;aGGbUrq4gYG0Mqkxpaeso4haMrSLuWB348cVYB/zlhpGk235p/XHg1HUNS1O0tmtrRhxs+UZ9LjG&#xA;6kyurBPijjCUZq8t6Yqq/kZ/zi/rOuy2XmvzVLLo2lrILiy0+INFeymNqozFh+5jJFQd2YdOOzYq&#xA;+lZfyY/KmXVn1abyrpst7IJBI0kCvGxlbm7NC1Yi/LoxWo7HFWM/lV/zjh5R/LrzDc69ZXt1qN68&#xA;bwWhuvTAhikILfYVeTkLTlttXbFXrOKvLdZ/5xv/AC21vz1c+cNZS81G7umWSXT7i4L2nNQADxp6&#xA;vEcRRPU4Dpx47Yqnmo/kj+UWoQvDP5R0tEdeJ+r2yWzAH+VoBGyn3Brirw38yv8AnGeDybFB5n/L&#xA;7SbnzFeW1yJW0m8kW5jgRQWV0tkjSS5AcAcC5/ylcE0VfPtz55806d51fzJp0aeWdeiYCWLT4jaR&#xA;rIgCyBrdiyj1CtZEpxJr8PbFX1R5G/5y48p3XkS61TzbSz8w6aVifTrYFmvWdSUkt0b7IPEh+TUT&#xA;ap+IDFXyj5p/MLzd5n80t5l1PUJn1NJfWtHV2UWwVuSJAAf3ap2p8+uKvtf8i/z60f8AMXSha37Q&#xA;6f5rtqLc6eHoJ1AH7+3DblSa1SpK99iCVXrOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqN7Y&#xA;2V/aS2d9bxXdpMOM1vOiyRuvgyMCpHzxV41/zlL+Yt75J/L6203Q5TZanrkhtLeaH4GhtYUBmaIj&#xA;7LfEiCnQMSKEDFXxPqPmLX9Tt4bbUtTur23tyWghuJ5JUQt9oorsQpNN6Yq7y95f1jzFrVpoujWr&#xA;3mp3ziO2t4+rGlSSTQKqqCzMdgBU7Yq+xvJvknyN/wA46+VbnzR5n1GS81q/VbSZ7dWKuxrKLa1h&#xA;JUNulfUkI6fsbjFXqX5dfmN5W/MTQRrugmQwwzNBLDcoqTwTBQSrAF13RxurEUPXrirK8VdirsVd&#xA;irsVdirsVYz5z/LXyN5ztzD5k0e3vn48Y7orwuUHWiTpxlUV7BqeOKvj/wDOD/nGLzX5T1iOXyta&#xA;3WveX72RY7Zok9W5gkc0WKdYxuPCQKF7Gh6qpT+YvkfQdC1K0uPKTW+pX+hWcH+NtHt2luILW8QK&#xA;twwaQlpLZ2bhJwZhG3wsV5KMVY3P5LaPy7ced/LWsQzWGn3EHqWSyOmqWLSt+7eZAiLxSQKomjaj&#xA;ErSh5Kqr7U/IH82IfzE8kxT3Lj/EOmBLbWYtgWenwXAAp8MwUnoKMGHbFXpmKuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KrZJI4o2kkYJGgLO7EBVUCpJJ6AYq8m/Mr/nJX8uvKWlTNpuo2/mDW2BW1sLGV&#xA;Zo+f8000fJEVe4ry7AdaKvjP8wvzS86/mBfQ3Xma9FwtqZTZW0caRQwLMQWWNVFafAoqxLbCpOKs&#xA;2/JL/nHHX/zDC6xqEjaT5VVyv1zjWe5KmjrbK21BTiZG+EHoGIICrLvMn5m+S/ym1fzF5H8m+VW0&#xA;6/hgexPmxpxJqHrvEp9YCRG+DlQ8FdR+0AOmKvCPM/nTzX5pukuvMOq3OpzRqqRm4kLKoVQnwr9l&#xA;SQo5ECrHc1O+KvuX/nGHStMsPyZ0SWxtZbZ7/wBW6vGnADyzmQxmTb9grGoj/wAgDFXquKuxV2Ku&#xA;xV2KuxV2KuxVL/MWlTavoGpaXDdy2E19bTW8V9ASJYWlQosiEEHkhNRvir88NQ0rzh+U3n4W2qWy&#xA;Jf2lfVgf95a3tlODHItdvUgnjLI3fqNmGyrLPIel+VLD84X0D60U8s+a9PktNPuZwG9NNYsxLaJK&#xA;pPF3hmkSM/8AFi12psqxjyF5w82flP5+i1CS0mtbm2b0NV0q4VoWmt2I9SJgwqDtyRqbMAd8VfoP&#xA;5a8x6R5l0Gx13R5xcabqEQmt5R1odirDsyMCrDsQRiqZ4q7FXYq7FXYq7FXYq7FXYq7FUh87+ePL&#xA;nkny9Pr3mC5+r2UPwoi0aWaU14xQpUc3anT6TQAnFXzKf+c3NdbzCjDy7ax+XfVUSQl5HvfSrRmE&#xA;vJIuXcD06dq98Vedfnj+e3mH8wNcu7O0u5Lbyhbysmn6fGWRZ0RvhnuBsXd+IYK2ydBvUlV595U0&#xA;RNd8yabo7yywJqFxHbGaCE3MiGRuIYQhoy9Cdxy6Yq+1/wAu/wDnFX8uPK0Zl1iFfM+pepzjub2P&#xA;jCiUoEFrzeJvEl+X0Yq9jiitrS2SKFEgtoECpGgCIiKKAACgUAYq+F/+ch/N/wCWnnnzgbvyhaX0&#xA;+vyyR2lxfjitrdhB6aNHCQ0zP9lFPw7Dpir2j8vf+cO/KehajFqXmi+PmGSNI2TTfS9G0WYAF+fx&#xA;M06hvsghRT7SnFX0FFFHFGkUSCOKMBURQAqqBQAAdAMVXYq7FXYq7FXYq7FXYq7FXYq8R/5yS/Iv&#xA;XPzIGkah5fmtIdT0tJ4p47pmj9eJ+Lxqjqj/ABK6tQNQfF1GKvkvzBpuoN5F0y5u7dobzy9qF3oN&#xA;8rDi8YY/W7eNwd+fqvdD2CgYq9HbTbXRvySuLnz7G/mnUJJ4F0TTYrjnNoQkiJBu7hS72y3CsrC2&#xA;YUJVdg1eKrEfyw/5yA8+/lzp8+maR9VvNMnk9YWd/G8iRyEAM0RjkideQAqKkd6Vrir3j8vv+czN&#xA;D1S9t9O836WdIknZYxqdq/q2odjSssb0kiT3Bf3oN8VQXnr/AJyq/MXypcXuj6t5GXSNWJcWFxcz&#xA;vJDwBIDqFRUnA2+JJAK/dir03/nHX8y9Z/MDyCdS1xrdtWs7p7OdreimRURGSWSIbRs/I7DY0qKd&#xA;MVeo4q7FXYqg7zWdIsrm2tLy+t7a6vG9OzgmlSOSZ/5Y1YgufZcVYp5u/On8tvKHmCDQPMOriy1G&#xA;eNZgpilkREduKeo8asE5UPXtuaDFWN+cP+ckfJek/pzT9EEuta5pOn/Xoo4Y2NrJyKAATD7Sokol&#xA;ZlHHhWjV2xV872fnT/nJTR7/AE3z/rLa5LoM15E8tvIZFtZoyykx/VBRY0lU8Ub0wDX4TXFWX+cf&#xA;+cZvzt856lPq2p+a7HVIZZGm05Lua9j4RzNy4rbtC62w4kfu1Jp0xVFfmp/zjx5N8oflhpV2lhqe&#xA;s6zpxEF1+i+Ef1ma5POSe4Yw3DpFHw4pQdKL1bliqb/kl+SuneY/y61S185+UYNDiv7pDpzLFJFq&#xA;ghiKuXae5Msqo7AAD4ajltQjFXu/lTyP5S8pWC2PlzSrfTYAArmFB6klOhllNZJD7uxOKp5iriAR&#xA;Q7g9RiqT2Hkzyfp88dxYaFp9nPExeKWC1gidGYEFlZEBBINKjFU4xV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KvEfzw/ICbzl9TPlcWumPd6j9d8xO5kT1yYxGs4VeSl0XltQci1etcVfLn5jeb/MFh+b3mfU&#xA;Io7SwvFvZ7K8s7WNJLKaOF/SZJoZPUjmWT0g0iutC25APRVnfmu6/L3T/PelecvMMFt5h0nzfpkA&#xA;t9D0oelDp8TQpZTsKA1e24SJDGqg8xyJjZRVVjf5b+QLbT/+ci7Hyfq6LfQabqc0bhh8EwtVeSJm&#xA;Xf4W4KxU/I4q+5fMvlXy75n0qTStf0+HUbCXrDMtaGlOSMKMjCuzKQR44q8R0L/nG7zT5F/Mey17&#xA;8v8AzCsHl2Wdf0vpl80gkNqGBeEGNXSeo5cC4UqabnrirOvJn5O3Xk/RPNdhpHma9a68xSSzWd5c&#xA;gzGxkkVwsiqz/vJayVdywL8R4Yqknlv8u/z50eeFZfPdvf21to9xawm7imnd9QldnillEhPP0iwA&#xA;lZieKheG5xVDanYf85L6B+VsdhY3lp5h86SXzCTUITEWgsWUFeP1tbdJH9QEEshoG6bcgqw/R/8A&#xA;nHn81rtLnz15j1a1vfzJHpvottft69taujAiSRkDxmSMVMSKrRq1CeVdlUl1v/nGz89vP2vwap54&#xA;1vTFlRFt5LxQplWBHYgLFbQQxufiJHJh88VfTXl/yP5X0J4bix062TU4rSGxk1RYIY7mSG3jSJFd&#xA;40TbjEvwqAuw22GKp7irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirwL8/f+&#xA;cadN812135k8pW6Wnmzk091bA8Yr8ndgQTxSY9Q2wY/a68gqln5J/wDOODN5TtL3z405vGikk0PT&#xA;/jgudJNwHDuGJ2lNUlRWX91IK05FsVZx+Xn/ADjR+XnkTzLF5j0yfUbzUrdZFtWvponSIyoY3ZVh&#xA;ihqSjsvxV64q/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.1.0.843</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">pattern</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>792.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:521CCD52B062E511A649AF0B1DF92ACD</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:521CCD52B062E511A649AF0B1DF92ACD</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:39ccf912-d23b-44bd-81fe-f72aa686cbff</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:a452723d-85dd-436f-9e29-f5a4a9ff5ee6</stRef:instanceID>
            <stRef:documentID>uuid:39ccf912-d23b-44bd-81fe-f72aa686cbff</stRef:documentID>
            <stRef:originalDocumentID>uuid:39ccf912-d23b-44bd-81fe-f72aa686cbff</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:521CCD52B062E511A649AF0B1DF92ACD</stEvt:instanceID>
                  <stEvt:when>2015-09-24T07:35:52-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -449.041 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 449.041 li
723 449.041 li
723 0 li
cp
clp
[1 0 0 1 0 0 ]ct
661.869 404.951 mo
660.678 404.951 659.62 405.922 660.083 407.201 cv
660.545 408.48 662.531 410.068 663.39 411.413 cv
664.25 412.759 663.986 413.861 662.773 414.678 cv
661.56 415.493 659.399 416.022 658.428 417.147 cv
657.458 418.272 657.678 419.992 658.626 421.095 cv
659.576 422.197 661.251 422.683 661.362 423.587 cv
661.472 424.491 660.016 425.814 659.553 427.336 cv
659.09 428.858 659.62 430.578 660.833 431.482 cv
662.045 432.387 663.942 432.475 666.676 434.592 cv
669.412 436.709 672.984 440.855 675.322 443.634 cv
677.66 446.413 678.762 447.824 679.644 447.493 cv
680.527 447.163 681.188 445.09 681.519 443.502 cv
681.85 441.914 681.85 440.812 682.886 440.503 cv
683.923 440.194 685.996 440.679 687.121 439.907 cv
688.246 439.135 688.422 437.106 687.363 435.783 cv
686.305 434.46 684.011 433.842 683.217 432.695 cv
682.423 431.549 683.129 429.872 682.534 428.615 cv
681.938 427.358 680.042 426.521 678.806 425.616 cv
677.572 424.712 676.999 423.742 677.285 422.837 cv
677.572 421.933 678.718 421.095 678.806 419.661 cv
678.894 418.228 677.924 416.199 676.513 414.832 cv
675.101 413.465 673.25 412.759 671.375 411.545 cv
669.5 410.333 667.603 408.612 665.993 407.267 cv
664.383 405.922 663.06 404.951 661.869 404.951 cv
cp
695.81 419.088 mo
693.714 418.581 691.157 420.742 689.745 422.859 cv
688.333 424.977 688.069 427.05 688.665 429.432 cv
689.26 431.813 690.715 434.504 691.664 434.967 cv
692.612 435.431 693.053 433.666 694.552 431.791 cv
696.052 429.917 698.611 427.932 699.074 425.352 cv
699.537 422.771 697.905 419.596 695.81 419.088 cv
695.81 419.088 li
cp
638.756 409.054 mo
637.698 407.466 636.287 404.202 635.051 401.732 cv
633.816 399.262 632.757 397.586 631.038 397.101 cv
629.317 396.616 626.935 397.321 625.392 396.571 cv
623.848 395.822 623.142 393.616 622.437 390.617 cv
621.731 387.618 621.025 383.824 618.908 380.78 cv
616.791 377.737 613.261 375.443 610.924 372.974 cv
608.586 370.504 607.44 367.857 607.705 366.401 cv
607.969 364.946 609.645 364.682 611.41 363.446 cv
613.173 362.211 615.026 360.006 616.217 358.462 cv
617.408 356.918 617.937 356.036 619.349 357.183 cv
620.76 358.33 623.054 361.506 625.568 365.079 cv
628.083 368.651 630.817 372.621 632.801 376.723 cv
634.787 380.825 636.022 385.06 637.301 389.161 cv
638.58 393.264 639.903 397.233 640.565 400.762 cv
641.226 404.29 641.226 407.378 641.226 410.466 cv
640.521 410.554 639.815 410.642 638.756 409.054 cv
638.756 409.054 li
cp
168.989 162.823 mo
168.35 161.146 168.394 159.338 169.474 156.957 cv
170.555 154.575 172.672 151.62 174.149 150.605 cv
175.627 149.591 176.465 150.517 176.752 152.083 cv
177.039 153.648 176.774 155.854 177.833 157.552 cv
178.891 159.25 181.273 160.441 183.633 160.353 cv
185.992 160.265 188.331 158.897 189.698 159.14 cv
191.065 159.383 191.462 161.235 191.616 162.978 cv
191.771 164.72 191.683 166.352 192.829 168.204 cv
193.976 170.057 196.358 172.13 198.299 173.916 cv
200.24 175.703 201.739 177.202 202.291 178.481 cv
202.842 179.76 202.445 180.819 200.923 181.105 cv
199.401 181.392 196.755 180.907 194.704 181.437 cv
192.653 181.966 191.197 183.509 189.742 184.017 cv
188.286 184.524 186.831 183.995 186.213 182.362 cv
185.596 180.73 185.816 177.996 185.243 175.416 cv
184.669 172.835 183.302 170.409 181.913 169.02 cv
180.523 167.631 179.112 167.278 177.502 167.211 cv
175.892 167.146 174.083 167.366 172.518 166.704 cv
170.952 166.042 169.628 164.499 168.989 162.823 cv
168.989 162.823 li
cp
198.454 278.849 mo
197.417 277.105 196.226 274.944 194.44 273.4 cv
192.653 271.857 190.271 270.931 189.147 268.77 cv
188.021 266.608 188.154 263.212 188.794 260.962 cv
189.434 258.713 190.58 257.61 191.926 257.809 cv
193.271 258.008 194.814 259.507 195.961 260.609 cv
197.108 261.713 197.858 262.418 199.292 262.241 cv
200.725 262.065 202.842 261.007 204.65 260.809 cv
206.459 260.609 207.958 261.271 209.282 263.256 cv
210.605 265.241 211.751 268.55 212.061 271.416 cv
212.37 274.283 211.84 276.709 210.274 277.415 cv
208.708 278.12 206.106 277.106 204.43 277.79 cv
202.754 278.474 202.004 280.855 201.188 281.385 cv
200.372 281.914 199.49 280.591 198.454 278.849 cv
198.454 278.849 li
cp
349.656 406.627 mo
352.413 406.473 353.912 407.311 355.434 407.067 cv
356.956 406.825 358.499 405.502 359.139 403.672 cv
359.778 401.841 359.514 399.504 360.462 397.254 cv
361.411 395.004 363.572 392.843 365.116 392.578 cv
366.659 392.313 367.585 393.945 369.173 393.857 cv
370.761 393.77 373.01 391.961 376.385 389.646 cv
379.759 387.33 384.258 384.507 386.663 382.257 cv
389.066 380.008 389.375 378.332 388.537 377.074 cv
387.699 375.817 385.714 374.979 385.604 373.26 cv
385.494 371.539 387.257 368.937 388.889 366.621 cv
390.522 364.306 392.021 362.276 392.11 360.445 cv
392.198 358.615 390.875 356.983 389.088 355.858 cv
387.301 354.734 385.052 354.116 382.869 354.58 cv
380.685 355.043 378.568 356.587 377.465 358.571 cv
376.363 360.557 376.275 362.982 374.775 363.952 cv
373.276 364.923 370.365 364.438 369.085 365.364 cv
367.806 366.29 368.159 368.628 367.696 369.224 cv
367.232 369.818 365.954 368.672 364.674 367.79 cv
363.395 366.908 362.116 366.29 360.925 366.621 cv
359.734 366.952 358.632 368.231 358.984 369.863 cv
359.337 371.495 361.146 373.48 361.763 375.398 cv
362.38 377.317 361.807 379.17 360.749 378.883 cv
359.69 378.597 358.146 376.171 356.007 374.803 cv
353.868 373.436 351.133 373.127 348.95 373.392 cv
346.767 373.656 345.134 374.494 344.561 376.171 cv
343.988 377.847 344.473 380.36 345.113 382.566 cv
345.752 384.771 346.546 386.668 347.516 388.322 cv
348.486 389.977 349.633 391.388 351.552 391.851 cv
353.471 392.313 356.162 391.829 356.757 392.909 cv
357.352 393.99 355.853 396.637 353.604 397.783 cv
351.354 398.931 348.354 398.577 345.862 399.394 cv
343.37 400.209 341.385 402.194 340.305 404.003 cv
339.224 405.812 339.048 407.442 340.966 407.686 cv
342.885 407.928 346.899 406.781 349.656 406.627 cv
349.656 406.627 li
cp
255.22 422.771 mo
252.992 424.821 249.022 426.276 246.2 426.32 cv
243.376 426.365 241.701 424.998 241.634 423.344 cv
241.568 421.689 243.112 419.749 244.92 418.889 cv
246.729 418.028 248.802 418.249 250.412 417.697 cv
252.022 417.146 253.168 415.823 254.426 415.316 cv
255.683 414.809 257.05 415.117 257.491 416.595 cv
257.932 418.072 257.447 420.719 255.22 422.771 cv
255.22 422.771 li
cp
203.391 426.094 mo
203.906 425.146 202.734 424.123 201.789 422.465 cv
200.843 420.808 200.122 418.514 199.762 416.573 cv
199.402 414.632 199.402 413.045 197.726 412.096 cv
196.05 411.147 192.697 410.84 189.918 411.104 cv
187.14 411.369 184.935 412.206 183.479 413.574 cv
182.023 414.941 181.317 416.838 180.259 418.051 cv
179.2 419.264 177.789 419.793 177.171 421.183 cv
176.554 422.572 176.73 424.821 177.259 426.167 cv
177.789 427.512 178.671 427.953 180.104 427.468 cv
181.538 426.982 183.522 425.571 185.706 424.226 cv
187.89 422.881 190.271 421.602 192.433 422.373 cv
194.594 423.146 196.535 425.969 198.605 426.942 cv
200.676 427.917 202.876 427.042 203.391 426.094 cv
203.391 426.094 li
cp
163.763 425.703 mo
162.88 427.688 164.071 430.291 165.835 431.173 cv
167.6 432.055 169.938 431.217 171.239 430.048 cv
172.54 428.88 172.805 427.38 172.518 425.813 cv
172.231 424.248 171.393 422.616 169.497 422.484 cv
167.6 422.352 164.645 423.719 163.763 425.703 cv
163.763 425.703 li
cp
144.509 426.807 mo
145.061 425.571 146.031 424.336 147.421 424.027 cv
148.81 423.719 150.618 424.336 152.713 425.02 cv
154.809 425.704 157.19 426.453 158.425 427.534 cv
159.66 428.614 159.749 430.026 159.594 430.798 cv
159.44 431.57 159.043 431.702 158.293 431.944 cv
157.543 432.188 156.441 432.54 156.75 433.29 cv
157.058 434.04 158.778 435.187 158.933 436.312 cv
159.087 437.437 157.676 438.539 155.625 439.686 cv
153.573 440.833 150.883 442.023 146.604 442.663 cv
142.326 443.303 136.46 443.391 133.262 442.751 cv
130.064 442.111 129.535 440.744 130.329 439.354 cv
131.123 437.966 133.24 436.555 135.688 436.201 cv
138.136 435.849 140.915 436.554 143.297 436.068 cv
145.678 435.583 147.663 433.907 147.663 432.783 cv
147.663 431.658 145.678 431.085 144.752 430.181 cv
143.826 429.276 143.958 428.041 144.509 426.807 cv
144.509 426.807 li
cp
105.496 444.427 mo
104.305 443.435 104.481 441.803 105.43 440.304 cv
106.378 438.804 108.098 437.437 110.062 436.62 cv
112.024 435.805 114.229 435.54 115.795 435.363 cv
117.361 435.187 118.287 435.099 119.478 433.996 cv
120.669 432.893 122.125 430.776 124 429.629 cv
125.874 428.482 128.167 428.306 129.777 428.438 cv
131.387 428.57 132.313 429.012 132.137 429.894 cv
131.961 430.776 130.682 432.099 128.564 434.018 cv
126.447 435.937 123.492 438.45 120.559 440.568 cv
117.626 442.686 114.714 444.405 111.98 445.089 cv
109.245 445.772 106.687 445.42 105.496 444.427 cv
105.496 444.427 li
cp
96.5864 441.428 mo
95.4395 442.42 92.8369 442.156 90.8301 441.736 cv
88.8232 441.318 87.4121 440.744 87.8086 439.311 cv
88.2056 437.877 90.4111 435.584 92.2637 434.878 cv
94.1162 434.172 95.6157 435.055 96.52 436.62 cv
97.4243 438.187 97.7329 440.436 96.5864 441.428 cv
96.5864 441.428 li
cp
79.6489 442.067 mo
78.105 442.2 75.8994 441.583 75.5029 440.104 cv
75.1055 438.627 76.5171 436.289 77.8843 435.187 cv
79.252 434.084 80.5747 434.217 81.4131 435.253 cv
82.251 436.289 82.604 438.23 82.3394 439.642 cv
82.0747 441.053 81.1929 441.935 79.6489 442.067 cv
79.6489 442.067 li
cp
50.0967 430.645 mo
48.4204 430.645 46.833 431.438 46.6343 433.026 cv
46.4355 434.614 47.6265 436.996 49.1924 438.032 cv
50.7583 439.069 52.6987 438.76 53.7798 437.569 cv
54.8604 436.378 55.0806 434.306 54.3091 432.871 cv
53.5366 431.438 51.7729 430.645 50.0967 430.645 cv
50.0967 430.645 li
cp
67.4092 434.415 mo
66.1958 435.496 65.0493 437.172 65.667 438.605 cv
66.2842 440.039 68.666 441.23 70.2319 441.075 cv
71.7979 440.921 72.5474 439.422 72.5698 437.746 cv
72.5918 436.069 71.8862 434.217 70.8936 433.533 cv
69.9009 432.85 68.6221 433.335 67.4092 434.415 cv
67.4092 434.415 li
cp
39.5771 436.246 mo
37.5259 434.173 33.7769 431.482 31.3726 429.607 cv
28.9688 427.733 27.9106 426.675 28.1309 424.91 cv
28.3516 423.146 29.8511 420.676 29.2339 418.404 cv
28.6162 416.133 25.8813 414.06 23.9404 414.236 cv
21.9995 414.413 20.853 416.839 18.8901 418.096 cv
16.9272 419.353 14.1489 419.44 11.3037 419.088 cv
8.45898 418.735 5.54736 417.941 3.65088 418.271 cv
1.75439 418.603 .872559 420.058 1.99707 421.47 cv
3.12158 422.882 6.25342 424.248 10.9512 426.785 cv
15.6484 429.321 21.9116 433.026 26.7192 436.048 cv
31.5269 439.069 34.8794 441.406 37.2393 442.156 cv
39.5986 442.906 40.9663 442.068 41.4736 440.921 cv
41.981 439.774 41.6279 438.319 39.5771 436.246 cv
39.5771 436.246 li
cp
425.718 32.1201 mo
427.262 32.6826 429.115 32.1533 430.615 32.6826 cv
432.114 33.2119 433.26 34.7998 434.408 34.9761 cv
435.554 35.1528 436.701 33.918 437.892 34.0059 cv
439.083 34.0942 440.318 35.5054 441.641 35.7261 cv
442.964 35.9463 444.375 34.9766 446.008 34.6235 cv
447.64 34.2705 449.493 34.5356 450.287 35.9468 cv
451.081 37.3584 450.816 39.9165 451.654 40.1812 cv
452.492 40.4458 454.432 38.4165 456.461 37.9756 cv
458.491 37.5347 460.608 38.6816 461.93 40.7104 cv
463.253 42.7393 463.783 45.6509 465.062 46.0474 cv
466.341 46.4443 468.371 44.3271 471.634 43.6655 cv
474.898 43.0039 479.398 43.7979 481.868 45.3857 cv
484.337 46.9736 484.779 49.3555 487.028 50.4141 cv
489.278 51.4727 493.335 51.208 495.629 49.3555 cv
497.922 47.5029 498.452 44.0625 499.731 42.519 cv
501.01 40.9751 503.039 41.3276 504.053 42.7393 cv
505.068 44.1509 505.068 46.6206 505.774 47.106 cv
506.48 47.5913 507.891 46.0918 509.435 45.9595 cv
510.979 45.8271 512.655 47.062 514.992 48.8262 cv
517.33 50.5908 520.33 52.8843 523.108 54.4722 cv
525.887 56.0601 528.445 56.9419 529.857 57.3828 cv
531.268 57.8242 531.533 57.8242 531.709 58.5298 cv
531.886 59.2358 531.974 60.647 532.503 70.042 cv
533.033 79.437 534.002 96.8154 536.738 138.188 cv
539.472 179.562 543.97 244.93 546.22 277.613 cv
548.469 310.297 548.469 310.297 548.911 310.43 cv
549.351 310.562 550.233 310.827 552.108 310.915 cv
553.983 311.003 556.85 310.915 558.901 310.011 cv
560.952 309.106 562.187 307.387 564.392 306.504 cv
566.597 305.622 569.773 305.578 571.625 306.438 cv
573.478 307.298 574.007 309.063 573.942 310.606 cv
573.875 312.15 573.213 313.473 574.426 315.061 cv
575.639 316.648 578.727 318.501 582.83 321.412 cv
586.931 324.323 592.048 328.294 594.739 330.983 cv
597.429 333.675 597.694 335.086 597.892 336.409 cv
598.09 337.732 598.222 338.967 599.06 338.834 cv
599.898 338.702 601.442 337.202 603.757 335.548 cv
606.074 333.895 609.161 332.086 610.749 330.013 cv
612.336 327.94 612.425 325.602 613.351 323.859 cv
614.278 322.117 616.042 320.971 618.511 319.56 cv
620.982 318.147 624.158 316.472 626.187 316.361 cv
628.215 316.251 629.098 317.707 629.803 319.647 cv
630.509 321.589 631.039 324.014 632.56 325.668 cv
634.082 327.322 636.596 328.204 638.316 329.792 cv
640.037 331.381 640.963 333.674 642.287 335.394 cv
643.609 337.114 645.33 338.261 647.005 338.812 cv
648.682 339.363 650.314 339.32 652.607 342.032 cv
654.901 344.745 657.856 350.215 663.237 357.999 cv
668.619 365.784 676.425 375.885 680.858 382.303 cv
685.291 388.72 686.349 391.455 689.171 392.733 cv
691.995 394.013 696.583 393.836 702.36 395.159 cv
708.138 396.483 715.107 399.306 718.547 401.556 cv
721.988 403.805 721.9 405.48 720.885 406.805 cv
719.871 408.128 717.93 409.098 717.136 412.053 cv
716.342 415.008 716.695 419.948 716.563 424.314 cv
716.43 428.682 715.813 432.476 714.534 434.415 cv
713.254 436.356 711.314 436.444 708.094 436.4 cv
704.875 436.356 700.375 436.18 698.963 435.21 cv
697.552 434.239 699.228 432.476 701.169 431.461 cv
703.11 430.446 705.315 430.182 706.198 428.858 cv
707.08 427.535 706.639 425.153 705.051 421.359 cv
703.462 417.566 700.728 412.362 698.832 409.362 cv
696.935 406.363 695.876 405.569 694.509 407.818 cv
693.142 410.068 691.465 415.361 689.26 417.61 cv
687.055 419.86 684.32 419.066 683.791 416.905 cv
683.261 414.743 684.938 411.215 685.555 408.745 cv
686.172 406.275 685.732 404.863 684.584 404.599 cv
683.438 404.334 681.585 405.217 680.35 406.363 cv
679.116 407.51 678.498 408.921 676.16 407.995 cv
673.823 407.068 669.765 403.805 669.014 401.688 cv
668.265 399.57 670.823 398.601 673.073 397.718 cv
675.322 396.836 677.262 396.042 678.145 394.586 cv
679.027 393.131 678.851 391.014 677.88 390.308 cv
676.91 389.602 675.146 390.308 673.029 389.117 cv
670.912 387.926 668.441 384.839 665.398 383.074 cv
662.355 381.31 658.738 380.869 657.458 379.501 cv
656.179 378.134 657.238 375.841 656.84 373.988 cv
656.444 372.135 654.591 370.725 654.327 369.4 cv
654.062 368.077 655.385 366.843 654.9 365.343 cv
654.416 363.843 652.122 362.079 650.71 360.227 cv
649.298 358.374 648.769 356.434 648.725 354.315 cv
648.681 352.199 649.123 349.905 648.46 349.597 cv
647.798 349.288 646.035 350.964 644.094 351.802 cv
642.153 352.64 640.036 352.64 637.477 349.772 cv
634.919 346.906 631.919 341.172 629.758 338.128 cv
627.597 335.085 626.275 334.732 626.23 336.717 cv
626.186 338.702 627.421 343.024 629.45 346.862 cv
631.479 350.699 634.302 354.052 637.654 356.786 cv
641.006 359.521 644.888 361.638 646.387 363.755 cv
647.887 365.872 647.005 367.989 646.697 369.71 cv
646.387 371.43 646.652 372.753 647.313 375.399 cv
647.975 378.046 649.034 382.016 652.209 384.397 cv
655.385 386.779 660.678 387.573 663.281 388.94 cv
665.883 390.308 665.795 392.248 664.208 394.189 cv
662.62 396.13 659.532 398.071 657.546 400.276 cv
655.562 402.481 654.68 404.951 654.106 408.612 cv
653.533 412.273 653.268 417.126 651.945 419.287 cv
650.622 421.448 648.24 420.919 647.093 419.375 cv
645.947 417.831 646.035 415.272 646.652 412.405 cv
647.27 409.539 648.417 406.363 648.019 403.584 cv
647.623 400.806 645.682 398.424 644.888 396.13 cv
644.094 393.836 644.447 391.632 643.83 389.47 cv
643.211 387.309 641.625 385.191 640.786 382.412 cv
639.948 379.634 639.859 376.193 638.625 373.194 cv
637.389 370.194 635.007 367.637 633.507 365.255 cv
632.008 362.873 631.391 360.667 629.626 358.903 cv
627.862 357.139 624.951 355.815 622.966 353.434 cv
620.981 351.052 619.922 347.611 618.953 345.671 cv
617.982 343.73 617.1 343.289 614.806 342.937 cv
612.513 342.584 608.808 342.318 608.631 343.686 cv
608.455 345.054 611.807 348.053 612.248 350.17 cv
612.689 352.287 610.219 353.521 608.719 355.109 cv
607.219 356.698 606.69 358.639 605.367 358.595 cv
604.044 358.55 601.927 356.521 599.325 353.875 cv
596.722 351.229 593.634 347.964 589.621 345.45 cv
585.607 342.937 580.667 341.172 574.712 338.834 cv
568.757 336.496 561.789 333.585 558.415 331.755 cv
555.04 329.924 555.26 329.175 556.694 328.094 cv
558.127 327.014 560.774 325.602 562.693 324.94 cv
564.611 324.278 565.802 324.366 566.993 325.028 cv
568.184 325.69 569.375 326.925 570.631 326.947 cv
571.889 326.969 573.211 325.778 573.586 324.455 cv
573.962 323.132 573.388 321.677 571.646 319.934 cv
569.904 318.191 566.993 316.163 565.096 315.655 cv
563.2 315.148 562.317 316.163 561.721 317.442 cv
561.126 318.722 560.818 320.265 559.295 321.544 cv
557.774 322.823 555.04 323.838 552.966 324.146 cv
550.893 324.455 549.482 324.059 547.453 322.999 cv
545.423 321.941 542.778 320.221 539.932 319.405 cv
537.087 318.589 534.043 318.677 530.493 318.368 cv
526.943 318.06 522.884 317.354 520.326 317.574 cv
517.768 317.795 516.709 318.941 514.592 320.397 cv
512.476 321.853 509.299 323.617 506.609 323.727 cv
503.918 323.838 501.713 322.294 501.912 320.971 cv
502.11 319.647 504.712 318.545 505.638 317.287 cv
506.565 316.03 505.815 314.619 504.58 314.09 cv
503.345 313.561 501.625 313.913 499.684 314.134 cv
497.743 314.354 495.582 314.442 494.457 313.164 cv
493.332 311.885 493.244 309.238 492.273 308.863 cv
491.302 308.488 489.45 310.385 487.884 310.672 cv
486.318 310.959 485.04 309.635 484.046 308.466 cv
483.054 307.297 482.349 306.283 480.695 307.011 cv
479.041 307.738 476.438 310.208 474.255 311.135 cv
472.072 312.062 470.307 311.443 470.396 310.253 cv
470.484 309.062 472.424 307.298 473.835 305.158 cv
475.248 303.019 476.129 300.505 476.019 298.851 cv
475.909 297.196 474.806 296.403 473.593 296.866 cv
472.38 297.329 471.057 299.049 469.271 299.534 cv
467.485 300.02 465.235 299.27 463.493 297.88 cv
461.75 296.49 460.515 294.462 459.369 293.778 cv
458.221 293.095 457.164 293.756 456.414 294.903 cv
455.664 296.05 455.222 297.682 454.428 297.771 cv
453.634 297.858 452.488 296.403 452.73 294.683 cv
452.973 292.962 454.605 290.978 454.186 289.853 cv
453.767 288.728 451.296 288.463 449.577 289.411 cv
447.856 290.36 446.886 292.521 446.334 294.418 cv
445.783 296.314 445.651 297.946 446.357 298.608 cv
447.062 299.27 448.606 298.961 449.069 299.688 cv
449.533 300.416 448.915 302.181 449.4 302.975 cv
449.885 303.769 451.473 303.592 452.377 304.056 cv
453.282 304.519 453.502 305.621 454.34 306.173 cv
455.178 306.724 456.633 306.724 457.604 307.386 cv
458.575 308.047 459.06 309.37 459.854 309.745 cv
460.648 310.12 461.75 309.547 462.853 308.885 cv
463.956 308.224 465.058 307.474 465.72 307.584 cv
466.381 307.694 466.602 308.665 466.602 310.914 cv
466.602 313.164 466.381 316.692 465.852 319.074 cv
465.323 321.456 464.485 322.69 463.051 323.573 cv
461.618 324.455 459.589 324.984 457.626 325.073 cv
455.664 325.161 453.767 324.808 453.215 323.551 cv
452.664 322.294 453.458 320.133 453.171 319.03 cv
452.884 317.927 451.517 317.884 450.282 317.685 cv
449.047 317.486 447.945 317.134 446.776 317.332 cv
445.607 317.53 444.372 318.28 443.247 319.096 cv
442.123 319.912 441.108 320.794 440.491 320.31 cv
439.873 319.824 439.652 317.972 439.012 317.288 cv
438.373 316.604 437.315 317.089 436.521 317.773 cv
435.727 318.457 435.197 319.339 434.448 319.074 cv
433.698 318.81 432.727 317.398 431.757 316.119 cv
430.787 314.84 429.816 313.693 428.382 313.341 cv
426.949 312.987 425.052 313.429 424.633 314.442 cv
424.214 315.457 425.273 317.045 426.111 318.39 cv
426.949 319.735 427.566 320.839 427.082 321.677 cv
426.596 322.515 425.008 323.088 423.597 323.947 cv
422.185 324.808 420.951 325.955 419.098 327.014 cv
417.245 328.072 414.775 329.042 413.055 330.763 cv
411.334 332.482 410.365 334.952 409.107 335.681 cv
407.85 336.408 406.307 335.394 404.741 335.791 cv
403.174 336.188 401.587 337.996 399.536 338.327 cv
397.485 338.657 394.971 337.511 393.713 335.9 cv
392.457 334.291 392.457 332.218 393.713 331.182 cv
394.971 330.145 397.485 330.145 399.029 330.101 cv
400.573 330.057 401.146 329.969 401.499 329.307 cv
401.851 328.646 401.984 327.41 403.351 326.594 cv
404.719 325.778 407.321 325.381 408.954 324.058 cv
410.585 322.734 411.247 320.485 410.805 319.537 cv
410.365 318.589 408.821 318.941 406.968 319.89 cv
405.116 320.838 402.955 322.382 400.462 323.793 cv
397.97 325.205 395.147 326.483 393.207 325.602 cv
391.265 324.72 390.208 321.676 391.31 319.757 cv
392.413 317.839 395.677 317.045 398.102 315.104 cv
400.529 313.163 402.117 310.075 403.065 307.099 cv
404.013 304.121 404.322 301.254 405.336 299.049 cv
406.351 296.844 408.071 295.3 410.365 294.108 cv
412.658 292.918 415.525 292.08 418.15 291.793 cv
420.774 291.506 423.156 291.771 424.258 290.845 cv
425.361 289.919 425.185 287.802 426.464 286.214 cv
427.744 284.626 430.478 283.567 432.926 281.869 cv
435.375 280.171 437.536 277.833 437.844 276.224 cv
438.153 274.613 436.609 273.731 434.778 274.106 cv
432.948 274.481 430.831 276.113 428.713 277.524 cv
426.596 278.937 424.479 280.127 423.09 279.928 cv
421.701 279.729 421.039 278.143 421.238 276.443 cv
421.436 274.746 422.495 272.938 423.024 270.975 cv
423.553 269.012 423.553 266.895 422.781 265.638 cv
422.009 264.381 420.465 263.983 419.076 265.858 cv
417.687 267.732 416.452 271.879 415.437 275.23 cv
414.422 278.583 413.628 281.142 412.129 283.28 cv
410.629 285.42 408.424 287.14 406.483 288.287 cv
404.542 289.434 402.867 290.007 401.61 291.22 cv
400.352 292.434 399.514 294.285 398.301 296.138 cv
397.088 297.99 395.5 299.843 393.825 301.299 cv
392.148 302.754 390.384 303.813 388.222 303.813 cv
386.061 303.813 383.503 302.754 381.893 302.887 cv
380.283 303.019 379.622 304.342 380.57 305.467 cv
381.518 306.592 384.077 307.518 385.246 308.532 cv
386.415 309.547 386.194 310.649 384.561 312.281 cv
382.929 313.913 379.886 316.075 377.769 317.001 cv
375.652 317.927 374.46 317.618 372.85 318.633 cv
371.241 319.647 369.211 321.985 367.094 324.389 cv
364.977 326.793 362.772 329.263 361.801 331.226 cv
360.831 333.188 361.096 334.644 362.088 335.063 cv
363.081 335.481 364.8 334.865 366.234 334.247 cv
367.667 333.63 368.814 333.012 369.785 333.762 cv
370.755 334.512 371.549 336.629 372.321 338.415 cv
373.093 340.202 373.842 341.657 373.204 342.98 cv
372.564 344.304 370.535 345.494 368.219 346.84 cv
365.904 348.185 363.301 349.685 361.493 351.294 cv
359.684 352.904 358.67 354.625 357.435 356.301 cv
356.2 357.977 354.744 359.609 352.737 361.021 cv
350.73 362.432 348.172 363.623 344.975 365.101 cv
341.777 366.578 337.939 368.343 334.301 370.504 cv
330.662 372.665 327.222 375.223 324.487 377.781 cv
321.752 380.34 319.723 382.897 317.121 384.529 cv
314.519 386.162 311.343 386.867 308.829 387.265 cv
306.314 387.661 304.462 387.75 303.315 388.853 cv
302.168 389.955 301.728 392.072 300.271 392.777 cv
298.816 393.483 296.346 392.777 294.229 393.175 cv
292.112 393.571 290.348 395.071 287.922 395.732 cv
285.496 396.395 282.408 396.219 281.614 396.527 cv
280.82 396.836 282.32 397.63 284.393 398.247 cv
286.466 398.865 289.113 399.306 290.392 400.276 cv
291.671 401.247 291.583 402.746 290.083 403.717 cv
288.583 404.687 285.672 405.128 282.584 406.055 cv
279.497 406.98 276.233 408.393 273.542 409.98 cv
270.852 411.568 268.735 413.332 267.544 413.199 cv
266.353 413.067 266.088 411.038 265.956 409.406 cv
265.824 407.774 265.824 406.54 264.412 406.496 cv
263 406.451 260.178 407.598 256.605 409.186 cv
253.032 410.774 248.71 412.803 244.96 413.729 cv
241.211 414.655 238.036 414.479 237.242 413.376 cv
236.448 412.273 238.036 410.244 237.991 408.701 cv
237.948 407.157 236.271 406.099 234.595 407.024 cv
232.919 407.951 231.243 410.862 229.346 413.685 cv
227.45 416.508 225.333 419.242 223.436 419.771 cv
221.539 420.301 219.863 418.625 218.275 418.272 cv
216.688 417.919 215.188 418.89 213.247 419.198 cv
211.307 419.507 208.924 419.154 207.293 418.713 cv
205.661 418.272 204.778 417.743 204.911 416.287 cv
205.043 414.832 206.19 412.45 207.866 411.656 cv
209.542 410.862 211.748 411.656 214.747 409.892 cv
217.746 408.127 221.54 403.805 224.98 400.629 cv
228.42 397.453 231.508 395.425 235.125 394.719 cv
238.742 394.013 242.888 394.631 245.093 396.659 cv
247.298 398.688 247.563 402.129 248.489 403.144 cv
249.416 404.157 251.003 402.746 251.753 400.981 cv
252.503 399.218 252.415 397.101 255.811 393.836 cv
259.208 390.572 266.088 386.161 271.205 384.089 cv
276.321 382.016 279.673 382.28 282.981 380.824 cv
286.29 379.369 289.554 376.193 292.376 373.679 cv
295.199 371.165 297.581 369.313 299.61 368.519 cv
301.639 367.725 303.315 367.989 304.462 367.592 cv
305.609 367.195 306.227 366.137 306.535 364.373 cv
306.844 362.608 306.844 360.139 307.638 357.095 cv
308.432 354.052 310.02 350.434 311.74 347.523 cv
313.46 344.612 315.313 342.406 316.989 341.745 cv
318.665 341.084 320.165 341.966 322.238 342.495 cv
324.311 343.024 326.957 343.2 328.986 342.406 cv
331.015 341.612 332.426 339.849 332.912 337.731 cv
333.396 335.614 332.956 333.145 331.412 332.703 cv
329.868 332.263 327.222 333.85 321.885 335.129 cv
316.548 336.408 308.52 337.379 304.727 336.717 cv
300.933 336.056 301.375 333.762 303.271 332.306 cv
305.167 330.851 308.521 330.233 309.535 328.821 cv
310.549 327.41 309.226 325.205 307.417 324.278 cv
305.609 323.353 303.315 323.705 301.375 325.689 cv
299.434 327.675 297.846 331.292 296.567 334.158 cv
295.288 337.026 294.317 339.143 292.773 339.761 cv
291.23 340.378 289.113 339.496 288.098 337.467 cv
287.084 335.438 287.172 332.262 286.598 330.453 cv
286.025 328.646 284.79 328.204 283.158 328.336 cv
281.525 328.469 279.497 329.175 278.129 328.16 cv
276.762 327.146 276.057 324.411 274.38 323.661 cv
272.704 322.911 270.058 324.146 267.147 325.337 cv
264.236 326.528 261.06 327.675 257.223 328.248 cv
253.385 328.821 248.886 328.821 246.019 327.807 cv
243.152 326.793 241.917 324.764 243.196 323.484 cv
244.476 322.205 248.269 321.677 249.901 320.529 cv
251.533 319.383 251.004 317.618 252.019 316.339 cv
253.034 315.06 255.592 314.266 255.724 312.942 cv
255.856 311.619 253.563 309.767 253.43 308.223 cv
253.298 306.679 255.327 305.444 256.43 304.076 cv
257.532 302.709 257.709 301.21 257.4 299.842 cv
257.091 298.475 256.297 297.24 255.945 294.284 cv
255.592 291.329 255.68 286.653 256.959 283.169 cv
258.238 279.685 260.708 277.392 261.988 275.054 cv
263.267 272.716 263.354 270.334 262.604 269.893 cv
261.855 269.452 260.267 270.951 258.371 272.628 cv
256.474 274.304 254.269 276.156 253.078 278.362 cv
251.887 280.567 251.71 283.125 251.445 285.022 cv
251.181 286.919 250.828 288.153 249.328 289.741 cv
247.829 291.329 245.183 293.271 243.153 293.844 cv
241.125 294.417 239.713 293.623 237.199 292.432 cv
234.685 291.241 231.067 289.653 229.789 288.021 cv
228.509 286.39 229.568 284.714 229.656 282.155 cv
229.745 279.597 228.862 276.156 227.187 274.039 cv
225.51 271.922 223.04 271.128 221.497 269.144 cv
219.953 267.158 219.335 263.982 219.688 262.395 cv
220.041 260.807 221.364 260.807 222.996 260.498 cv
224.628 260.189 226.569 259.571 228.024 258.689 cv
229.48 257.808 230.45 256.661 229.656 256.043 cv
228.862 255.426 226.304 255.337 225.952 254.367 cv
225.599 253.396 227.451 251.544 227.716 250.133 cv
227.98 248.722 226.657 247.751 225.157 247.884 cv
223.658 248.016 221.981 249.251 221.011 248.81 cv
220.041 248.368 219.776 246.252 219.468 244.267 cv
219.159 242.281 218.806 240.429 217.835 238.93 cv
216.865 237.43 215.277 236.283 215.498 235.092 cv
215.718 233.901 217.747 232.666 218.585 231.078 cv
219.423 229.49 219.07 227.55 219.864 226.402 cv
220.658 225.256 222.599 224.903 224.496 223.889 cv
226.393 222.874 228.245 221.198 230.142 219.566 cv
232.039 217.934 233.979 216.346 236.185 215.154 cv
238.39 213.963 240.86 213.169 241.962 211.802 cv
243.065 210.435 242.801 208.494 244.477 205.892 cv
246.153 203.289 249.77 200.025 253.122 198.261 cv
256.474 196.497 259.562 196.232 260.885 197.203 cv
262.208 198.173 261.767 200.378 262.605 202.099 cv
263.443 203.818 265.56 205.053 267.81 204.789 cv
270.06 204.524 272.441 202.76 274.162 200.819 cv
275.882 198.878 276.94 196.762 278.793 196.188 cv
280.645 195.615 283.292 196.585 285.145 197.864 cv
286.997 199.144 288.055 200.73 289.555 201.04 cv
291.055 201.349 292.996 200.378 294.848 198.878 cv
296.701 197.379 298.465 195.35 299.347 192.792 cv
300.229 190.233 300.229 187.146 299.083 184.5 cv
297.936 181.853 295.642 179.647 294.716 178.148 cv
293.79 176.648 294.23 175.854 295.51 175.325 cv
296.789 174.796 298.906 174.531 300.803 173.914 cv
302.699 173.296 304.375 172.326 305.081 171.002 cv
305.787 169.679 305.522 168.003 304.022 167.077 cv
302.523 166.15 299.788 165.974 297.583 165.93 cv
295.377 165.886 293.701 165.974 291.628 167.342 cv
289.555 168.709 287.085 171.355 285.321 173.164 cv
283.556 174.972 282.498 175.942 281.527 175.81 cv
280.557 175.678 279.675 174.443 279.366 172.767 cv
279.058 171.09 279.322 168.974 278.705 167.827 cv
278.087 166.68 276.587 166.503 275.529 167.341 cv
274.47 168.179 273.853 170.032 273.147 170.076 cv
272.441 170.12 271.647 168.356 269.927 167.474 cv
268.207 166.591 265.56 166.591 262.737 166.636 cv
259.915 166.68 256.915 166.768 254.93 166.327 cv
252.946 165.886 251.975 164.916 249.946 162.754 cv
247.917 160.593 244.83 157.241 243.462 154.947 cv
242.095 152.653 242.448 151.419 242.536 150.184 cv
242.625 148.949 242.448 147.713 241.875 145.596 cv
241.301 143.479 240.331 140.481 240.287 138.717 cv
240.243 136.953 241.125 136.423 242.029 137.063 cv
242.934 137.703 243.86 139.511 245.162 140.128 cv
246.462 140.746 248.138 140.172 248.491 138.629 cv
248.844 137.085 247.874 134.571 244.83 132.101 cv
241.787 129.63 236.67 127.205 233.869 125.374 cv
231.069 123.543 230.583 122.309 231.421 121.338 cv
232.259 120.368 234.42 119.662 237.464 118.67 cv
240.507 117.677 244.434 116.398 248.822 114.987 cv
253.21 113.575 258.063 112.032 261.768 111.105 cv
265.473 110.179 268.031 109.871 270.898 109.738 cv
273.765 109.605 276.941 109.649 279.455 110.047 cv
281.97 110.443 283.822 111.193 284.638 112.826 cv
285.454 114.458 285.233 116.972 284.396 118.604 cv
283.557 120.236 282.102 120.986 281.616 121.978 cv
281.131 122.971 281.616 124.205 283.491 125.837 cv
285.366 127.469 288.629 129.499 291.342 130.689 cv
294.055 131.881 296.216 132.233 297.827 133.226 cv
299.437 134.219 300.495 135.851 301.377 135.674 cv
302.259 135.498 302.965 133.513 304.046 132.719 cv
305.126 131.925 306.582 132.322 307.773 132.653 cv
308.963 132.983 309.89 133.249 310.243 132.454 cv
310.596 131.66 310.375 129.808 308.787 128.948 cv
307.199 128.087 304.244 128.22 302.325 127.095 cv
300.407 125.97 299.524 123.588 298.157 121.14 cv
296.79 118.692 294.937 116.178 294.099 113.708 cv
293.261 111.238 293.438 108.812 294.739 108.062 cv
296.04 107.312 298.466 108.238 299.591 109.782 cv
300.715 111.326 300.539 113.487 300.848 115.516 cv
301.156 117.545 301.95 119.441 304.089 120.699 cv
306.229 121.956 309.713 122.573 312.293 123.411 cv
314.874 124.25 316.55 125.308 318.91 126.345 cv
321.27 127.381 324.313 128.396 326.055 127.91 cv
327.797 127.425 328.238 125.44 327.665 123.698 cv
327.091 121.956 325.504 120.456 322.99 119.794 cv
320.476 119.133 317.035 119.309 314.168 118.824 cv
311.301 118.339 309.007 117.192 308.897 115.384 cv
308.787 113.575 310.86 111.105 311.522 109.121 cv
312.183 107.136 311.434 105.636 309.229 104.732 cv
307.023 103.828 303.362 103.519 300.142 102.989 cv
296.922 102.46 294.143 101.71 292.709 100.454 cv
291.276 99.1963 291.188 97.4321 290.879 95.249 cv
290.57 93.0654 290.041 90.4629 289.622 88.1147 cv
289.203 85.7661 288.895 83.6714 286.888 80.3301 cv
284.881 76.9893 281.176 72.4023 278.022 68.8955 cv
274.869 65.3887 272.266 62.9634 270.899 60.6914 cv
269.531 58.4204 269.399 56.3027 269.951 54.8916 cv
270.501 53.48 271.736 52.7739 272.597 53.3916 cv
273.457 54.0098 273.942 55.9497 274.648 56.4575 cv
275.354 56.9648 276.28 56.0386 277.294 53.9434 cv
278.309 51.8481 279.412 48.584 280.646 46.8643 cv
281.882 45.144 283.249 44.9673 284.44 45.2983 cv
285.631 45.6289 286.645 46.4668 288.211 46.5112 cv
289.777 46.5547 291.894 45.8057 293.46 46.2021 cv
295.025 46.5996 296.04 48.1431 297.011 49.1797 cv
297.981 50.2163 298.907 50.7451 300.54 50.2603 cv
302.171 49.7749 304.509 48.2754 306.736 47.3711 cv
308.964 46.4668 311.081 46.1582 312.449 45.4746 cv
313.816 44.7905 314.433 43.7324 314.962 42.2988 cv
315.492 40.8647 315.933 39.0566 316.925 37.3369 cv
317.917 35.6162 319.461 33.9844 322.306 31.0737 cv
325.151 28.1621 329.297 23.9717 331.591 22.0532 cv
333.885 20.1343 334.326 20.4873 334.921 21.3477 cv
335.517 22.2075 336.267 23.5747 337.215 24.126 cv
338.163 24.6772 339.31 24.4131 340.545 23.7295 cv
341.78 23.0454 343.103 21.9429 344.603 20.5537 cv
346.103 19.1641 347.779 17.4878 348.97 16.8711 cv
350.161 16.2529 350.866 16.6938 351.087 17.9512 cv
351.307 19.208 351.042 21.2813 352.785 22.1196 cv
354.527 22.9575 358.276 22.5605 359.114 21.7007 cv
359.953 20.8403 357.879 19.5171 357.173 17.6201 cv
356.468 15.7236 357.129 13.2539 358.607 11.8862 cv
360.085 10.519 362.378 10.2544 363.371 11.0044 cv
364.364 11.7544 364.054 13.5186 364.937 14.4668 cv
365.819 15.415 367.892 15.5479 369.59 15.6138 cv
371.289 15.6797 372.611 15.6797 374.089 14.5332 cv
375.567 13.3862 377.199 11.0928 378.985 8.71094 cv
380.772 6.32861 382.712 3.85889 384.124 2.55762 cv
385.536 1.25635 386.417 1.12402 387.895 2.33691 cv
389.373 3.5498 391.445 6.1084 392.68 7.85059 cv
393.916 9.59277 394.312 10.519 393.607 11.6436 cv
392.901 12.7686 391.093 14.0918 390.1 15.3711 cv
389.108 16.6504 388.931 17.8848 389.66 19.1201 cv
390.387 20.355 392.019 21.5898 393.695 22.0752 cv
395.372 22.5605 397.091 22.2959 397.554 21.7007 cv
398.018 21.105 397.224 20.1787 397.047 19.0317 cv
396.871 17.8848 397.312 16.5181 398.127 15.1504 cv
398.944 13.7832 400.135 12.4155 401.415 12.2832 cv
402.693 12.1509 404.06 13.2539 404.458 14.9741 cv
404.854 16.6938 404.281 19.0317 404.987 20.7524 cv
405.693 22.4722 407.677 23.5752 409.486 23.1118 cv
411.294 22.6489 412.926 20.6201 415.175 20.2891 cv
417.425 19.9585 420.292 21.3252 421.483 22.9355 cv
422.673 24.5454 422.189 26.3979 422.564 28.1509 cv
422.939 29.9043 424.174 31.5581 425.718 32.1201 cv
425.718 32.1201 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
ef
2.9999 lw
0 lc
0 lj
22.9256 ml
[] 0 dsh
true sadj
661.869 404.951 mo
660.678 404.951 659.62 405.922 660.083 407.201 cv
660.545 408.48 662.531 410.068 663.39 411.413 cv
664.25 412.759 663.986 413.861 662.773 414.678 cv
661.56 415.493 659.399 416.022 658.428 417.147 cv
657.458 418.272 657.678 419.992 658.626 421.095 cv
659.576 422.197 661.251 422.683 661.362 423.587 cv
661.472 424.491 660.016 425.814 659.553 427.336 cv
659.09 428.858 659.62 430.578 660.833 431.482 cv
662.045 432.387 663.942 432.475 666.676 434.592 cv
669.412 436.709 672.984 440.855 675.322 443.634 cv
677.66 446.413 678.762 447.824 679.644 447.493 cv
680.527 447.163 681.188 445.09 681.519 443.502 cv
681.85 441.914 681.85 440.812 682.886 440.503 cv
683.923 440.194 685.996 440.679 687.121 439.907 cv
688.246 439.135 688.422 437.106 687.363 435.783 cv
686.305 434.46 684.011 433.842 683.217 432.695 cv
682.423 431.549 683.129 429.872 682.534 428.615 cv
681.938 427.358 680.042 426.521 678.806 425.616 cv
677.572 424.712 676.999 423.742 677.285 422.837 cv
677.572 421.933 678.718 421.095 678.806 419.661 cv
678.894 418.228 677.924 416.199 676.513 414.832 cv
675.101 413.465 673.25 412.759 671.375 411.545 cv
669.5 410.333 667.603 408.612 665.993 407.267 cv
664.383 405.922 663.06 404.951 661.869 404.951 cv
cp
695.81 419.088 mo
693.714 418.581 691.157 420.742 689.745 422.859 cv
688.333 424.977 688.069 427.05 688.665 429.432 cv
689.26 431.813 690.715 434.504 691.664 434.967 cv
692.612 435.431 693.053 433.666 694.552 431.791 cv
696.052 429.917 698.611 427.932 699.074 425.352 cv
699.537 422.771 697.905 419.596 695.81 419.088 cv
695.81 419.088 li
cp
638.756 409.054 mo
637.698 407.466 636.287 404.202 635.051 401.732 cv
633.816 399.262 632.757 397.586 631.038 397.101 cv
629.317 396.616 626.935 397.321 625.392 396.571 cv
623.848 395.822 623.142 393.616 622.437 390.617 cv
621.731 387.618 621.025 383.824 618.908 380.78 cv
616.791 377.737 613.261 375.443 610.924 372.974 cv
608.586 370.504 607.44 367.857 607.705 366.401 cv
607.969 364.946 609.645 364.682 611.41 363.446 cv
613.173 362.211 615.026 360.006 616.217 358.462 cv
617.408 356.918 617.937 356.036 619.349 357.183 cv
620.76 358.33 623.054 361.506 625.568 365.079 cv
628.083 368.651 630.817 372.621 632.801 376.723 cv
634.787 380.825 636.022 385.06 637.301 389.161 cv
638.58 393.264 639.903 397.233 640.565 400.762 cv
641.226 404.29 641.226 407.378 641.226 410.466 cv
640.521 410.554 639.815 410.642 638.756 409.054 cv
638.756 409.054 li
cp
168.989 162.823 mo
168.35 161.146 168.394 159.338 169.474 156.957 cv
170.555 154.575 172.672 151.62 174.149 150.605 cv
175.627 149.591 176.465 150.517 176.752 152.083 cv
177.039 153.648 176.774 155.854 177.833 157.552 cv
178.891 159.25 181.273 160.441 183.633 160.353 cv
185.992 160.265 188.331 158.897 189.698 159.14 cv
191.065 159.383 191.462 161.235 191.616 162.978 cv
191.771 164.72 191.683 166.352 192.829 168.204 cv
193.976 170.057 196.358 172.13 198.299 173.916 cv
200.24 175.703 201.739 177.202 202.291 178.481 cv
202.842 179.76 202.445 180.819 200.923 181.105 cv
199.401 181.392 196.755 180.907 194.704 181.437 cv
192.653 181.966 191.197 183.509 189.742 184.017 cv
188.286 184.524 186.831 183.995 186.213 182.362 cv
185.596 180.73 185.816 177.996 185.243 175.416 cv
184.669 172.835 183.302 170.409 181.913 169.02 cv
180.523 167.631 179.112 167.278 177.502 167.211 cv
175.892 167.146 174.083 167.366 172.518 166.704 cv
170.952 166.042 169.628 164.499 168.989 162.823 cv
168.989 162.823 li
cp
198.454 278.849 mo
197.417 277.105 196.226 274.944 194.44 273.4 cv
192.653 271.857 190.271 270.931 189.147 268.77 cv
188.021 266.608 188.154 263.212 188.794 260.962 cv
189.434 258.713 190.58 257.61 191.926 257.809 cv
193.271 258.008 194.814 259.507 195.961 260.609 cv
197.108 261.713 197.858 262.418 199.292 262.241 cv
200.725 262.065 202.842 261.007 204.65 260.809 cv
206.459 260.609 207.958 261.271 209.282 263.256 cv
210.605 265.241 211.751 268.55 212.061 271.416 cv
212.37 274.283 211.84 276.709 210.274 277.415 cv
208.708 278.12 206.106 277.106 204.43 277.79 cv
202.754 278.474 202.004 280.855 201.188 281.385 cv
200.372 281.914 199.49 280.591 198.454 278.849 cv
198.454 278.849 li
cp
349.656 406.627 mo
352.413 406.473 353.912 407.311 355.434 407.067 cv
356.956 406.825 358.499 405.502 359.139 403.672 cv
359.778 401.841 359.514 399.504 360.462 397.254 cv
361.411 395.004 363.572 392.843 365.116 392.578 cv
366.659 392.313 367.585 393.945 369.173 393.857 cv
370.761 393.77 373.01 391.961 376.385 389.646 cv
379.759 387.33 384.258 384.507 386.663 382.257 cv
389.066 380.008 389.375 378.332 388.537 377.074 cv
387.699 375.817 385.714 374.979 385.604 373.26 cv
385.494 371.539 387.257 368.937 388.889 366.621 cv
390.522 364.306 392.021 362.276 392.11 360.445 cv
392.198 358.615 390.875 356.983 389.088 355.858 cv
387.301 354.734 385.052 354.116 382.869 354.58 cv
380.685 355.043 378.568 356.587 377.465 358.571 cv
376.363 360.557 376.275 362.982 374.775 363.952 cv
373.276 364.923 370.365 364.438 369.085 365.364 cv
367.806 366.29 368.159 368.628 367.696 369.224 cv
367.232 369.818 365.954 368.672 364.674 367.79 cv
363.395 366.908 362.116 366.29 360.925 366.621 cv
359.734 366.952 358.632 368.231 358.984 369.863 cv
359.337 371.495 361.146 373.48 361.763 375.398 cv
362.38 377.317 361.807 379.17 360.749 378.883 cv
359.69 378.597 358.146 376.171 356.007 374.803 cv
353.868 373.436 351.133 373.127 348.95 373.392 cv
346.767 373.656 345.134 374.494 344.561 376.171 cv
343.988 377.847 344.473 380.36 345.113 382.566 cv
345.752 384.771 346.546 386.668 347.516 388.322 cv
348.486 389.977 349.633 391.388 351.552 391.851 cv
353.471 392.313 356.162 391.829 356.757 392.909 cv
357.352 393.99 355.853 396.637 353.604 397.783 cv
351.354 398.931 348.354 398.577 345.862 399.394 cv
343.37 400.209 341.385 402.194 340.305 404.003 cv
339.224 405.812 339.048 407.442 340.966 407.686 cv
342.885 407.928 346.899 406.781 349.656 406.627 cv
349.656 406.627 li
cp
255.22 422.771 mo
252.992 424.821 249.022 426.276 246.2 426.32 cv
243.376 426.365 241.701 424.998 241.634 423.344 cv
241.568 421.689 243.112 419.749 244.92 418.889 cv
246.729 418.028 248.802 418.249 250.412 417.697 cv
252.022 417.146 253.168 415.823 254.426 415.316 cv
255.683 414.809 257.05 415.117 257.491 416.595 cv
257.932 418.072 257.447 420.719 255.22 422.771 cv
255.22 422.771 li
cp
203.391 426.094 mo
203.906 425.146 202.734 424.123 201.789 422.465 cv
200.843 420.808 200.122 418.514 199.762 416.573 cv
199.402 414.632 199.402 413.045 197.726 412.096 cv
196.05 411.147 192.697 410.84 189.918 411.104 cv
187.14 411.369 184.935 412.206 183.479 413.574 cv
182.023 414.941 181.317 416.838 180.259 418.051 cv
179.2 419.264 177.789 419.793 177.171 421.183 cv
176.554 422.572 176.73 424.821 177.259 426.167 cv
177.789 427.512 178.671 427.953 180.104 427.468 cv
181.538 426.982 183.522 425.571 185.706 424.226 cv
187.89 422.881 190.271 421.602 192.433 422.373 cv
194.594 423.146 196.535 425.969 198.605 426.942 cv
200.676 427.917 202.876 427.042 203.391 426.094 cv
203.391 426.094 li
cp
163.763 425.703 mo
162.88 427.688 164.071 430.291 165.835 431.173 cv
167.6 432.055 169.938 431.217 171.239 430.048 cv
172.54 428.88 172.805 427.38 172.518 425.813 cv
172.231 424.248 171.393 422.616 169.497 422.484 cv
167.6 422.352 164.645 423.719 163.763 425.703 cv
163.763 425.703 li
cp
144.509 426.807 mo
145.061 425.571 146.031 424.336 147.421 424.027 cv
148.81 423.719 150.618 424.336 152.713 425.02 cv
154.809 425.704 157.19 426.453 158.425 427.534 cv
159.66 428.614 159.749 430.026 159.594 430.798 cv
159.44 431.57 159.043 431.702 158.293 431.944 cv
157.543 432.188 156.441 432.54 156.75 433.29 cv
157.058 434.04 158.778 435.187 158.933 436.312 cv
159.087 437.437 157.676 438.539 155.625 439.686 cv
153.573 440.833 150.883 442.023 146.604 442.663 cv
142.326 443.303 136.46 443.391 133.262 442.751 cv
130.064 442.111 129.535 440.744 130.329 439.354 cv
131.123 437.966 133.24 436.555 135.688 436.201 cv
138.136 435.849 140.915 436.554 143.297 436.068 cv
145.678 435.583 147.663 433.907 147.663 432.783 cv
147.663 431.658 145.678 431.085 144.752 430.181 cv
143.826 429.276 143.958 428.041 144.509 426.807 cv
144.509 426.807 li
cp
105.496 444.427 mo
104.305 443.435 104.481 441.803 105.43 440.304 cv
106.378 438.804 108.098 437.437 110.062 436.62 cv
112.024 435.805 114.229 435.54 115.795 435.363 cv
117.361 435.187 118.287 435.099 119.478 433.996 cv
120.669 432.893 122.125 430.776 124 429.629 cv
125.874 428.482 128.167 428.306 129.777 428.438 cv
131.387 428.57 132.313 429.012 132.137 429.894 cv
131.961 430.776 130.682 432.099 128.564 434.018 cv
126.447 435.937 123.492 438.45 120.559 440.568 cv
117.626 442.686 114.714 444.405 111.98 445.089 cv
109.245 445.772 106.687 445.42 105.496 444.427 cv
105.496 444.427 li
cp
96.5864 441.428 mo
95.4395 442.42 92.8369 442.156 90.8301 441.736 cv
88.8232 441.318 87.4121 440.744 87.8086 439.311 cv
88.2056 437.877 90.4111 435.584 92.2637 434.878 cv
94.1162 434.172 95.6157 435.055 96.52 436.62 cv
97.4243 438.187 97.7329 440.436 96.5864 441.428 cv
96.5864 441.428 li
cp
79.6489 442.067 mo
78.105 442.2 75.8994 441.583 75.5029 440.104 cv
75.1055 438.627 76.5171 436.289 77.8843 435.187 cv
79.252 434.084 80.5747 434.217 81.4131 435.253 cv
82.251 436.289 82.604 438.23 82.3394 439.642 cv
82.0747 441.053 81.1929 441.935 79.6489 442.067 cv
79.6489 442.067 li
cp
50.0967 430.645 mo
48.4204 430.645 46.833 431.438 46.6343 433.026 cv
46.4355 434.614 47.6265 436.996 49.1924 438.032 cv
50.7583 439.069 52.6987 438.76 53.7798 437.569 cv
54.8604 436.378 55.0806 434.306 54.3091 432.871 cv
53.5366 431.438 51.7729 430.645 50.0967 430.645 cv
50.0967 430.645 li
cp
67.4092 434.415 mo
66.1958 435.496 65.0493 437.172 65.667 438.605 cv
66.2842 440.039 68.666 441.23 70.2319 441.075 cv
71.7979 440.921 72.5474 439.422 72.5698 437.746 cv
72.5918 436.069 71.8862 434.217 70.8936 433.533 cv
69.9009 432.85 68.6221 433.335 67.4092 434.415 cv
67.4092 434.415 li
cp
39.5771 436.246 mo
37.5259 434.173 33.7769 431.482 31.3726 429.607 cv
28.9688 427.733 27.9106 426.675 28.1309 424.91 cv
28.3516 423.146 29.8511 420.676 29.2339 418.404 cv
28.6162 416.133 25.8813 414.06 23.9404 414.236 cv
21.9995 414.413 20.853 416.839 18.8901 418.096 cv
16.9272 419.353 14.1489 419.44 11.3037 419.088 cv
8.45898 418.735 5.54736 417.941 3.65088 418.271 cv
1.75439 418.603 .872559 420.058 1.99707 421.47 cv
3.12158 422.882 6.25342 424.248 10.9512 426.785 cv
15.6484 429.321 21.9116 433.026 26.7192 436.048 cv
31.5269 439.069 34.8794 441.406 37.2393 442.156 cv
39.5986 442.906 40.9663 442.068 41.4736 440.921 cv
41.981 439.774 41.6279 438.319 39.5771 436.246 cv
39.5771 436.246 li
cp
425.718 32.1201 mo
427.262 32.6826 429.115 32.1533 430.615 32.6826 cv
432.114 33.2119 433.26 34.7998 434.408 34.9761 cv
435.554 35.1528 436.701 33.918 437.892 34.0059 cv
439.083 34.0942 440.318 35.5054 441.641 35.7261 cv
442.964 35.9463 444.375 34.9766 446.008 34.6235 cv
447.64 34.2705 449.493 34.5356 450.287 35.9468 cv
451.081 37.3584 450.816 39.9165 451.654 40.1812 cv
452.492 40.4458 454.432 38.4165 456.461 37.9756 cv
458.491 37.5347 460.608 38.6816 461.93 40.7104 cv
463.253 42.7393 463.783 45.6509 465.062 46.0474 cv
466.341 46.4443 468.371 44.3271 471.634 43.6655 cv
474.898 43.0039 479.398 43.7979 481.868 45.3857 cv
484.337 46.9736 484.779 49.3555 487.028 50.4141 cv
489.278 51.4727 493.335 51.208 495.629 49.3555 cv
497.922 47.5029 498.452 44.0625 499.731 42.519 cv
501.01 40.9751 503.039 41.3276 504.053 42.7393 cv
505.068 44.1509 505.068 46.6206 505.774 47.106 cv
506.48 47.5913 507.891 46.0918 509.435 45.9595 cv
510.979 45.8271 512.655 47.062 514.992 48.8262 cv
517.33 50.5908 520.33 52.8843 523.108 54.4722 cv
525.887 56.0601 528.445 56.9419 529.857 57.3828 cv
531.268 57.8242 531.533 57.8242 531.709 58.5298 cv
531.886 59.2358 531.974 60.647 532.503 70.042 cv
533.033 79.437 534.002 96.8154 536.738 138.188 cv
539.472 179.562 543.97 244.93 546.22 277.613 cv
548.469 310.297 548.469 310.297 548.911 310.43 cv
549.351 310.562 550.233 310.827 552.108 310.915 cv
553.983 311.003 556.85 310.915 558.901 310.011 cv
560.952 309.106 562.187 307.387 564.392 306.504 cv
566.597 305.622 569.773 305.578 571.625 306.438 cv
573.478 307.298 574.007 309.063 573.942 310.606 cv
573.875 312.15 573.213 313.473 574.426 315.061 cv
575.639 316.648 578.727 318.501 582.83 321.412 cv
586.931 324.323 592.048 328.294 594.739 330.983 cv
597.429 333.675 597.694 335.086 597.892 336.409 cv
598.09 337.732 598.222 338.967 599.06 338.834 cv
599.898 338.702 601.442 337.202 603.757 335.548 cv
606.074 333.895 609.161 332.086 610.749 330.013 cv
612.336 327.94 612.425 325.602 613.351 323.859 cv
614.278 322.117 616.042 320.971 618.511 319.56 cv
620.982 318.147 624.158 316.472 626.187 316.361 cv
628.215 316.251 629.098 317.707 629.803 319.647 cv
630.509 321.589 631.039 324.014 632.56 325.668 cv
634.082 327.322 636.596 328.204 638.316 329.792 cv
640.037 331.381 640.963 333.674 642.287 335.394 cv
643.609 337.114 645.33 338.261 647.005 338.812 cv
648.682 339.363 650.314 339.32 652.607 342.032 cv
654.901 344.745 657.856 350.215 663.237 357.999 cv
668.619 365.784 676.425 375.885 680.858 382.303 cv
685.291 388.72 686.349 391.455 689.171 392.733 cv
691.995 394.013 696.583 393.836 702.36 395.159 cv
708.138 396.483 715.107 399.306 718.547 401.556 cv
721.988 403.805 721.9 405.48 720.885 406.805 cv
719.871 408.128 717.93 409.098 717.136 412.053 cv
716.342 415.008 716.695 419.948 716.563 424.314 cv
716.43 428.682 715.813 432.476 714.534 434.415 cv
713.254 436.356 711.314 436.444 708.094 436.4 cv
704.875 436.356 700.375 436.18 698.963 435.21 cv
697.552 434.239 699.228 432.476 701.169 431.461 cv
703.11 430.446 705.315 430.182 706.198 428.858 cv
707.08 427.535 706.639 425.153 705.051 421.359 cv
703.462 417.566 700.728 412.362 698.832 409.362 cv
696.935 406.363 695.876 405.569 694.509 407.818 cv
693.142 410.068 691.465 415.361 689.26 417.61 cv
687.055 419.86 684.32 419.066 683.791 416.905 cv
683.261 414.743 684.938 411.215 685.555 408.745 cv
686.172 406.275 685.732 404.863 684.584 404.599 cv
683.438 404.334 681.585 405.217 680.35 406.363 cv
679.116 407.51 678.498 408.921 676.16 407.995 cv
673.823 407.068 669.765 403.805 669.014 401.688 cv
668.265 399.57 670.823 398.601 673.073 397.718 cv
675.322 396.836 677.262 396.042 678.145 394.586 cv
679.027 393.131 678.851 391.014 677.88 390.308 cv
676.91 389.602 675.146 390.308 673.029 389.117 cv
670.912 387.926 668.441 384.839 665.398 383.074 cv
662.355 381.31 658.738 380.869 657.458 379.501 cv
656.179 378.134 657.238 375.841 656.84 373.988 cv
656.444 372.135 654.591 370.725 654.327 369.4 cv
654.062 368.077 655.385 366.843 654.9 365.343 cv
654.416 363.843 652.122 362.079 650.71 360.227 cv
649.298 358.374 648.769 356.434 648.725 354.315 cv
648.681 352.199 649.123 349.905 648.46 349.597 cv
647.798 349.288 646.035 350.964 644.094 351.802 cv
642.153 352.64 640.036 352.64 637.477 349.772 cv
634.919 346.906 631.919 341.172 629.758 338.128 cv
627.597 335.085 626.275 334.732 626.23 336.717 cv
626.186 338.702 627.421 343.024 629.45 346.862 cv
631.479 350.699 634.302 354.052 637.654 356.786 cv
641.006 359.521 644.888 361.638 646.387 363.755 cv
647.887 365.872 647.005 367.989 646.697 369.71 cv
646.387 371.43 646.652 372.753 647.313 375.399 cv
647.975 378.046 649.034 382.016 652.209 384.397 cv
655.385 386.779 660.678 387.573 663.281 388.94 cv
665.883 390.308 665.795 392.248 664.208 394.189 cv
662.62 396.13 659.532 398.071 657.546 400.276 cv
655.562 402.481 654.68 404.951 654.106 408.612 cv
653.533 412.273 653.268 417.126 651.945 419.287 cv
650.622 421.448 648.24 420.919 647.093 419.375 cv
645.947 417.831 646.035 415.272 646.652 412.405 cv
647.27 409.539 648.417 406.363 648.019 403.584 cv
647.623 400.806 645.682 398.424 644.888 396.13 cv
644.094 393.836 644.447 391.632 643.83 389.47 cv
643.211 387.309 641.625 385.191 640.786 382.412 cv
639.948 379.634 639.859 376.193 638.625 373.194 cv
637.389 370.194 635.007 367.637 633.507 365.255 cv
632.008 362.873 631.391 360.667 629.626 358.903 cv
627.862 357.139 624.951 355.815 622.966 353.434 cv
620.981 351.052 619.922 347.611 618.953 345.671 cv
617.982 343.73 617.1 343.289 614.806 342.937 cv
612.513 342.584 608.808 342.318 608.631 343.686 cv
608.455 345.054 611.807 348.053 612.248 350.17 cv
612.689 352.287 610.219 353.521 608.719 355.109 cv
607.219 356.698 606.69 358.639 605.367 358.595 cv
604.044 358.55 601.927 356.521 599.325 353.875 cv
596.722 351.229 593.634 347.964 589.621 345.45 cv
585.607 342.937 580.667 341.172 574.712 338.834 cv
568.757 336.496 561.789 333.585 558.415 331.755 cv
555.04 329.924 555.26 329.175 556.694 328.094 cv
558.127 327.014 560.774 325.602 562.693 324.94 cv
564.611 324.278 565.802 324.366 566.993 325.028 cv
568.184 325.69 569.375 326.925 570.631 326.947 cv
571.889 326.969 573.211 325.778 573.586 324.455 cv
573.962 323.132 573.388 321.677 571.646 319.934 cv
569.904 318.191 566.993 316.163 565.096 315.655 cv
563.2 315.148 562.317 316.163 561.721 317.442 cv
561.126 318.722 560.818 320.265 559.295 321.544 cv
557.774 322.823 555.04 323.838 552.966 324.146 cv
550.893 324.455 549.482 324.059 547.453 322.999 cv
545.423 321.941 542.778 320.221 539.932 319.405 cv
537.087 318.589 534.043 318.677 530.493 318.368 cv
526.943 318.06 522.884 317.354 520.326 317.574 cv
517.768 317.795 516.709 318.941 514.592 320.397 cv
512.476 321.853 509.299 323.617 506.609 323.727 cv
503.918 323.838 501.713 322.294 501.912 320.971 cv
502.11 319.647 504.712 318.545 505.638 317.287 cv
506.565 316.03 505.815 314.619 504.58 314.09 cv
503.345 313.561 501.625 313.913 499.684 314.134 cv
497.743 314.354 495.582 314.442 494.457 313.164 cv
493.332 311.885 493.244 309.238 492.273 308.863 cv
491.302 308.488 489.45 310.385 487.884 310.672 cv
486.318 310.959 485.04 309.635 484.046 308.466 cv
483.054 307.297 482.349 306.283 480.695 307.011 cv
479.041 307.738 476.438 310.208 474.255 311.135 cv
472.072 312.062 470.307 311.443 470.396 310.253 cv
470.484 309.062 472.424 307.298 473.835 305.158 cv
475.248 303.019 476.129 300.505 476.019 298.851 cv
475.909 297.196 474.806 296.403 473.593 296.866 cv
472.38 297.329 471.057 299.049 469.271 299.534 cv
467.485 300.02 465.235 299.27 463.493 297.88 cv
461.75 296.49 460.515 294.462 459.369 293.778 cv
458.221 293.095 457.164 293.756 456.414 294.903 cv
455.664 296.05 455.222 297.682 454.428 297.771 cv
453.634 297.858 452.488 296.403 452.73 294.683 cv
452.973 292.962 454.605 290.978 454.186 289.853 cv
453.767 288.728 451.296 288.463 449.577 289.411 cv
447.856 290.36 446.886 292.521 446.334 294.418 cv
445.783 296.314 445.651 297.946 446.357 298.608 cv
447.062 299.27 448.606 298.961 449.069 299.688 cv
449.533 300.416 448.915 302.181 449.4 302.975 cv
449.885 303.769 451.473 303.592 452.377 304.056 cv
453.282 304.519 453.502 305.621 454.34 306.173 cv
455.178 306.724 456.633 306.724 457.604 307.386 cv
458.575 308.047 459.06 309.37 459.854 309.745 cv
460.648 310.12 461.75 309.547 462.853 308.885 cv
463.956 308.224 465.058 307.474 465.72 307.584 cv
466.381 307.694 466.602 308.665 466.602 310.914 cv
466.602 313.164 466.381 316.692 465.852 319.074 cv
465.323 321.456 464.485 322.69 463.051 323.573 cv
461.618 324.455 459.589 324.984 457.626 325.073 cv
455.664 325.161 453.767 324.808 453.215 323.551 cv
452.664 322.294 453.458 320.133 453.171 319.03 cv
452.884 317.927 451.517 317.884 450.282 317.685 cv
449.047 317.486 447.945 317.134 446.776 317.332 cv
445.607 317.53 444.372 318.28 443.247 319.096 cv
442.123 319.912 441.108 320.794 440.491 320.31 cv
439.873 319.824 439.652 317.972 439.012 317.288 cv
438.373 316.604 437.315 317.089 436.521 317.773 cv
435.727 318.457 435.197 319.339 434.448 319.074 cv
433.698 318.81 432.727 317.398 431.757 316.119 cv
430.787 314.84 429.816 313.693 428.382 313.341 cv
426.949 312.987 425.052 313.429 424.633 314.442 cv
424.214 315.457 425.273 317.045 426.111 318.39 cv
426.949 319.735 427.566 320.839 427.082 321.677 cv
426.596 322.515 425.008 323.088 423.597 323.947 cv
422.185 324.808 420.951 325.955 419.098 327.014 cv
417.245 328.072 414.775 329.042 413.055 330.763 cv
411.334 332.482 410.365 334.952 409.107 335.681 cv
407.85 336.408 406.307 335.394 404.741 335.791 cv
403.174 336.188 401.587 337.996 399.536 338.327 cv
397.485 338.657 394.971 337.511 393.713 335.9 cv
392.457 334.291 392.457 332.218 393.713 331.182 cv
394.971 330.145 397.485 330.145 399.029 330.101 cv
400.573 330.057 401.146 329.969 401.499 329.307 cv
401.851 328.646 401.984 327.41 403.351 326.594 cv
404.719 325.778 407.321 325.381 408.954 324.058 cv
410.585 322.734 411.247 320.485 410.805 319.537 cv
410.365 318.589 408.821 318.941 406.968 319.89 cv
405.116 320.838 402.955 322.382 400.462 323.793 cv
397.97 325.205 395.147 326.483 393.207 325.602 cv
391.265 324.72 390.208 321.676 391.31 319.757 cv
392.413 317.839 395.677 317.045 398.102 315.104 cv
400.529 313.163 402.117 310.075 403.065 307.099 cv
404.013 304.121 404.322 301.254 405.336 299.049 cv
406.351 296.844 408.071 295.3 410.365 294.108 cv
412.658 292.918 415.525 292.08 418.15 291.793 cv
420.774 291.506 423.156 291.771 424.258 290.845 cv
425.361 289.919 425.185 287.802 426.464 286.214 cv
427.744 284.626 430.478 283.567 432.926 281.869 cv
435.375 280.171 437.536 277.833 437.844 276.224 cv
438.153 274.613 436.609 273.731 434.778 274.106 cv
432.948 274.481 430.831 276.113 428.713 277.524 cv
426.596 278.937 424.479 280.127 423.09 279.928 cv
421.701 279.729 421.039 278.143 421.238 276.443 cv
421.436 274.746 422.495 272.938 423.024 270.975 cv
423.553 269.012 423.553 266.895 422.781 265.638 cv
422.009 264.381 420.465 263.983 419.076 265.858 cv
417.687 267.732 416.452 271.879 415.437 275.23 cv
414.422 278.583 413.628 281.142 412.129 283.28 cv
410.629 285.42 408.424 287.14 406.483 288.287 cv
404.542 289.434 402.867 290.007 401.61 291.22 cv
400.352 292.434 399.514 294.285 398.301 296.138 cv
397.088 297.99 395.5 299.843 393.825 301.299 cv
392.148 302.754 390.384 303.813 388.222 303.813 cv
386.061 303.813 383.503 302.754 381.893 302.887 cv
380.283 303.019 379.622 304.342 380.57 305.467 cv
381.518 306.592 384.077 307.518 385.246 308.532 cv
386.415 309.547 386.194 310.649 384.561 312.281 cv
382.929 313.913 379.886 316.075 377.769 317.001 cv
375.652 317.927 374.46 317.618 372.85 318.633 cv
371.241 319.647 369.211 321.985 367.094 324.389 cv
364.977 326.793 362.772 329.263 361.801 331.226 cv
360.831 333.188 361.096 334.644 362.088 335.063 cv
363.081 335.481 364.8 334.865 366.234 334.247 cv
367.667 333.63 368.814 333.012 369.785 333.762 cv
370.755 334.512 371.549 336.629 372.321 338.415 cv
373.093 340.202 373.842 341.657 373.204 342.98 cv
372.564 344.304 370.535 345.494 368.219 346.84 cv
365.904 348.185 363.301 349.685 361.493 351.294 cv
359.684 352.904 358.67 354.625 357.435 356.301 cv
356.2 357.977 354.744 359.609 352.737 361.021 cv
350.73 362.432 348.172 363.623 344.975 365.101 cv
341.777 366.578 337.939 368.343 334.301 370.504 cv
330.662 372.665 327.222 375.223 324.487 377.781 cv
321.752 380.34 319.723 382.897 317.121 384.529 cv
314.519 386.162 311.343 386.867 308.829 387.265 cv
306.314 387.661 304.462 387.75 303.315 388.853 cv
302.168 389.955 301.728 392.072 300.271 392.777 cv
298.816 393.483 296.346 392.777 294.229 393.175 cv
292.112 393.571 290.348 395.071 287.922 395.732 cv
285.496 396.395 282.408 396.219 281.614 396.527 cv
280.82 396.836 282.32 397.63 284.393 398.247 cv
286.466 398.865 289.113 399.306 290.392 400.276 cv
291.671 401.247 291.583 402.746 290.083 403.717 cv
288.583 404.687 285.672 405.128 282.584 406.055 cv
279.497 406.98 276.233 408.393 273.542 409.98 cv
270.852 411.568 268.735 413.332 267.544 413.199 cv
266.353 413.067 266.088 411.038 265.956 409.406 cv
265.824 407.774 265.824 406.54 264.412 406.496 cv
263 406.451 260.178 407.598 256.605 409.186 cv
253.032 410.774 248.71 412.803 244.96 413.729 cv
241.211 414.655 238.036 414.479 237.242 413.376 cv
236.448 412.273 238.036 410.244 237.991 408.701 cv
237.948 407.157 236.271 406.099 234.595 407.024 cv
232.919 407.951 231.243 410.862 229.346 413.685 cv
227.45 416.508 225.333 419.242 223.436 419.771 cv
221.539 420.301 219.863 418.625 218.275 418.272 cv
216.688 417.919 215.188 418.89 213.247 419.198 cv
211.307 419.507 208.924 419.154 207.293 418.713 cv
205.661 418.272 204.778 417.743 204.911 416.287 cv
205.043 414.832 206.19 412.45 207.866 411.656 cv
209.542 410.862 211.748 411.656 214.747 409.892 cv
217.746 408.127 221.54 403.805 224.98 400.629 cv
228.42 397.453 231.508 395.425 235.125 394.719 cv
238.742 394.013 242.888 394.631 245.093 396.659 cv
247.298 398.688 247.563 402.129 248.489 403.144 cv
249.416 404.157 251.003 402.746 251.753 400.981 cv
252.503 399.218 252.415 397.101 255.811 393.836 cv
259.208 390.572 266.088 386.161 271.205 384.089 cv
276.321 382.016 279.673 382.28 282.981 380.824 cv
286.29 379.369 289.554 376.193 292.376 373.679 cv
295.199 371.165 297.581 369.313 299.61 368.519 cv
301.639 367.725 303.315 367.989 304.462 367.592 cv
305.609 367.195 306.227 366.137 306.535 364.373 cv
306.844 362.608 306.844 360.139 307.638 357.095 cv
308.432 354.052 310.02 350.434 311.74 347.523 cv
313.46 344.612 315.313 342.406 316.989 341.745 cv
318.665 341.084 320.165 341.966 322.238 342.495 cv
324.311 343.024 326.957 343.2 328.986 342.406 cv
331.015 341.612 332.426 339.849 332.912 337.731 cv
333.396 335.614 332.956 333.145 331.412 332.703 cv
329.868 332.263 327.222 333.85 321.885 335.129 cv
316.548 336.408 308.52 337.379 304.727 336.717 cv
300.933 336.056 301.375 333.762 303.271 332.306 cv
305.167 330.851 308.521 330.233 309.535 328.821 cv
310.549 327.41 309.226 325.205 307.417 324.278 cv
305.609 323.353 303.315 323.705 301.375 325.689 cv
299.434 327.675 297.846 331.292 296.567 334.158 cv
295.288 337.026 294.317 339.143 292.773 339.761 cv
291.23 340.378 289.113 339.496 288.098 337.467 cv
287.084 335.438 287.172 332.262 286.598 330.453 cv
286.025 328.646 284.79 328.204 283.158 328.336 cv
281.525 328.469 279.497 329.175 278.129 328.16 cv
276.762 327.146 276.057 324.411 274.38 323.661 cv
272.704 322.911 270.058 324.146 267.147 325.337 cv
264.236 326.528 261.06 327.675 257.223 328.248 cv
253.385 328.821 248.886 328.821 246.019 327.807 cv
243.152 326.793 241.917 324.764 243.196 323.484 cv
244.476 322.205 248.269 321.677 249.901 320.529 cv
251.533 319.383 251.004 317.618 252.019 316.339 cv
253.034 315.06 255.592 314.266 255.724 312.942 cv
255.856 311.619 253.563 309.767 253.43 308.223 cv
253.298 306.679 255.327 305.444 256.43 304.076 cv
257.532 302.709 257.709 301.21 257.4 299.842 cv
257.091 298.475 256.297 297.24 255.945 294.284 cv
255.592 291.329 255.68 286.653 256.959 283.169 cv
258.238 279.685 260.708 277.392 261.988 275.054 cv
263.267 272.716 263.354 270.334 262.604 269.893 cv
261.855 269.452 260.267 270.951 258.371 272.628 cv
256.474 274.304 254.269 276.156 253.078 278.362 cv
251.887 280.567 251.71 283.125 251.445 285.022 cv
251.181 286.919 250.828 288.153 249.328 289.741 cv
247.829 291.329 245.183 293.271 243.153 293.844 cv
241.125 294.417 239.713 293.623 237.199 292.432 cv
234.685 291.241 231.067 289.653 229.789 288.021 cv
228.509 286.39 229.568 284.714 229.656 282.155 cv
229.745 279.597 228.862 276.156 227.187 274.039 cv
225.51 271.922 223.04 271.128 221.497 269.144 cv
219.953 267.158 219.335 263.982 219.688 262.395 cv
220.041 260.807 221.364 260.807 222.996 260.498 cv
224.628 260.189 226.569 259.571 228.024 258.689 cv
229.48 257.808 230.45 256.661 229.656 256.043 cv
228.862 255.426 226.304 255.337 225.952 254.367 cv
225.599 253.396 227.451 251.544 227.716 250.133 cv
227.98 248.722 226.657 247.751 225.157 247.884 cv
223.658 248.016 221.981 249.251 221.011 248.81 cv
220.041 248.368 219.776 246.252 219.468 244.267 cv
219.159 242.281 218.806 240.429 217.835 238.93 cv
216.865 237.43 215.277 236.283 215.498 235.092 cv
215.718 233.901 217.747 232.666 218.585 231.078 cv
219.423 229.49 219.07 227.55 219.864 226.402 cv
220.658 225.256 222.599 224.903 224.496 223.889 cv
226.393 222.874 228.245 221.198 230.142 219.566 cv
232.039 217.934 233.979 216.346 236.185 215.154 cv
238.39 213.963 240.86 213.169 241.962 211.802 cv
243.065 210.435 242.801 208.494 244.477 205.892 cv
246.153 203.289 249.77 200.025 253.122 198.261 cv
256.474 196.497 259.562 196.232 260.885 197.203 cv
262.208 198.173 261.767 200.378 262.605 202.099 cv
263.443 203.818 265.56 205.053 267.81 204.789 cv
270.06 204.524 272.441 202.76 274.162 200.819 cv
275.882 198.878 276.94 196.762 278.793 196.188 cv
280.645 195.615 283.292 196.585 285.145 197.864 cv
286.997 199.144 288.055 200.73 289.555 201.04 cv
291.055 201.349 292.996 200.378 294.848 198.878 cv
296.701 197.379 298.465 195.35 299.347 192.792 cv
300.229 190.233 300.229 187.146 299.083 184.5 cv
297.936 181.853 295.642 179.647 294.716 178.148 cv
293.79 176.648 294.23 175.854 295.51 175.325 cv
296.789 174.796 298.906 174.531 300.803 173.914 cv
302.699 173.296 304.375 172.326 305.081 171.002 cv
305.787 169.679 305.522 168.003 304.022 167.077 cv
302.523 166.15 299.788 165.974 297.583 165.93 cv
295.377 165.886 293.701 165.974 291.628 167.342 cv
289.555 168.709 287.085 171.355 285.321 173.164 cv
283.556 174.972 282.498 175.942 281.527 175.81 cv
280.557 175.678 279.675 174.443 279.366 172.767 cv
279.058 171.09 279.322 168.974 278.705 167.827 cv
278.087 166.68 276.587 166.503 275.529 167.341 cv
274.47 168.179 273.853 170.032 273.147 170.076 cv
272.441 170.12 271.647 168.356 269.927 167.474 cv
268.207 166.591 265.56 166.591 262.737 166.636 cv
259.915 166.68 256.915 166.768 254.93 166.327 cv
252.946 165.886 251.975 164.916 249.946 162.754 cv
247.917 160.593 244.83 157.241 243.462 154.947 cv
242.095 152.653 242.448 151.419 242.536 150.184 cv
242.625 148.949 242.448 147.713 241.875 145.596 cv
241.301 143.479 240.331 140.481 240.287 138.717 cv
240.243 136.953 241.125 136.423 242.029 137.063 cv
242.934 137.703 243.86 139.511 245.162 140.128 cv
246.462 140.746 248.138 140.172 248.491 138.629 cv
248.844 137.085 247.874 134.571 244.83 132.101 cv
241.787 129.63 236.67 127.205 233.869 125.374 cv
231.069 123.543 230.583 122.309 231.421 121.338 cv
232.259 120.368 234.42 119.662 237.464 118.67 cv
240.507 117.677 244.434 116.398 248.822 114.987 cv
253.21 113.575 258.063 112.032 261.768 111.105 cv
265.473 110.179 268.031 109.871 270.898 109.738 cv
273.765 109.605 276.941 109.649 279.455 110.047 cv
281.97 110.443 283.822 111.193 284.638 112.826 cv
285.454 114.458 285.233 116.972 284.396 118.604 cv
283.557 120.236 282.102 120.986 281.616 121.978 cv
281.131 122.971 281.616 124.205 283.491 125.837 cv
285.366 127.469 288.629 129.499 291.342 130.689 cv
294.055 131.881 296.216 132.233 297.827 133.226 cv
299.437 134.219 300.495 135.851 301.377 135.674 cv
302.259 135.498 302.965 133.513 304.046 132.719 cv
305.126 131.925 306.582 132.322 307.773 132.653 cv
308.963 132.983 309.89 133.249 310.243 132.454 cv
310.596 131.66 310.375 129.808 308.787 128.948 cv
307.199 128.087 304.244 128.22 302.325 127.095 cv
300.407 125.97 299.524 123.588 298.157 121.14 cv
296.79 118.692 294.937 116.178 294.099 113.708 cv
293.261 111.238 293.438 108.812 294.739 108.062 cv
296.04 107.312 298.466 108.238 299.591 109.782 cv
300.715 111.326 300.539 113.487 300.848 115.516 cv
301.156 117.545 301.95 119.441 304.089 120.699 cv
306.229 121.956 309.713 122.573 312.293 123.411 cv
314.874 124.25 316.55 125.308 318.91 126.345 cv
321.27 127.381 324.313 128.396 326.055 127.91 cv
327.797 127.425 328.238 125.44 327.665 123.698 cv
327.091 121.956 325.504 120.456 322.99 119.794 cv
320.476 119.133 317.035 119.309 314.168 118.824 cv
311.301 118.339 309.007 117.192 308.897 115.384 cv
308.787 113.575 310.86 111.105 311.522 109.121 cv
312.183 107.136 311.434 105.636 309.229 104.732 cv
307.023 103.828 303.362 103.519 300.142 102.989 cv
296.922 102.46 294.143 101.71 292.709 100.454 cv
291.276 99.1963 291.188 97.4321 290.879 95.249 cv
290.57 93.0654 290.041 90.4629 289.622 88.1147 cv
289.203 85.7661 288.895 83.6714 286.888 80.3301 cv
284.881 76.9893 281.176 72.4023 278.022 68.8955 cv
274.869 65.3887 272.266 62.9634 270.899 60.6914 cv
269.531 58.4204 269.399 56.3027 269.951 54.8916 cv
270.501 53.48 271.736 52.7739 272.597 53.3916 cv
273.457 54.0098 273.942 55.9497 274.648 56.4575 cv
275.354 56.9648 276.28 56.0386 277.294 53.9434 cv
278.309 51.8481 279.412 48.584 280.646 46.8643 cv
281.882 45.144 283.249 44.9673 284.44 45.2983 cv
285.631 45.6289 286.645 46.4668 288.211 46.5112 cv
289.777 46.5547 291.894 45.8057 293.46 46.2021 cv
295.025 46.5996 296.04 48.1431 297.011 49.1797 cv
297.981 50.2163 298.907 50.7451 300.54 50.2603 cv
302.171 49.7749 304.509 48.2754 306.736 47.3711 cv
308.964 46.4668 311.081 46.1582 312.449 45.4746 cv
313.816 44.7905 314.433 43.7324 314.962 42.2988 cv
315.492 40.8647 315.933 39.0566 316.925 37.3369 cv
317.917 35.6162 319.461 33.9844 322.306 31.0737 cv
325.151 28.1621 329.297 23.9717 331.591 22.0532 cv
333.885 20.1343 334.326 20.4873 334.921 21.3477 cv
335.517 22.2075 336.267 23.5747 337.215 24.126 cv
338.163 24.6772 339.31 24.4131 340.545 23.7295 cv
341.78 23.0454 343.103 21.9429 344.603 20.5537 cv
346.103 19.1641 347.779 17.4878 348.97 16.8711 cv
350.161 16.2529 350.866 16.6938 351.087 17.9512 cv
351.307 19.208 351.042 21.2813 352.785 22.1196 cv
354.527 22.9575 358.276 22.5605 359.114 21.7007 cv
359.953 20.8403 357.879 19.5171 357.173 17.6201 cv
356.468 15.7236 357.129 13.2539 358.607 11.8862 cv
360.085 10.519 362.378 10.2544 363.371 11.0044 cv
364.364 11.7544 364.054 13.5186 364.937 14.4668 cv
365.819 15.415 367.892 15.5479 369.59 15.6138 cv
371.289 15.6797 372.611 15.6797 374.089 14.5332 cv
375.567 13.3862 377.199 11.0928 378.985 8.71094 cv
380.772 6.32861 382.712 3.85889 384.124 2.55762 cv
385.536 1.25635 386.417 1.12402 387.895 2.33691 cv
389.373 3.5498 391.445 6.1084 392.68 7.85059 cv
393.916 9.59277 394.312 10.519 393.607 11.6436 cv
392.901 12.7686 391.093 14.0918 390.1 15.3711 cv
389.108 16.6504 388.931 17.8848 389.66 19.1201 cv
390.387 20.355 392.019 21.5898 393.695 22.0752 cv
395.372 22.5605 397.091 22.2959 397.554 21.7007 cv
398.018 21.105 397.224 20.1787 397.047 19.0317 cv
396.871 17.8848 397.312 16.5181 398.127 15.1504 cv
398.944 13.7832 400.135 12.4155 401.415 12.2832 cv
402.693 12.1509 404.06 13.2539 404.458 14.9741 cv
404.854 16.6938 404.281 19.0317 404.987 20.7524 cv
405.693 22.4722 407.677 23.5752 409.486 23.1118 cv
411.294 22.6489 412.926 20.6201 415.175 20.2891 cv
417.425 19.9585 420.292 21.3252 421.483 22.9355 cv
422.673 24.5454 422.189 26.3979 422.564 28.1509 cv
422.939 29.9043 424.174 31.5581 425.718 32.1201 cv
425.718 32.1201 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (M) ()
%%Title: (alaska-silhouette.eps)
%%CreationDate: 9/24/2015 7:35 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!U'D0$s]P37+oAZ"pXAnQN=m7jnh5TgWco;\f=c=f^_eOf&j?CMt!AW`r)7kBfmZD:NNqX`V%*LY$),2'YNHeL&oP>!55!B;(u
%m#L!$k2jSZo97Yp[kBE6o(uE)=*%QQ3j39i++NpPhu**1f:2(f>n6-R<9n`^[\[0jG#5=<E)?.&)0:%Br;PO7r9!\&`UW*eqUNR<
%`RXYM=0I'UT<Gt6^U8"2X8fUg41k95p$upIr1f6snTk*$kk&\4FE-tkIC#@P"uV_82#*-`2Td)VhpMH!q=3/8PKdk^^H),fSUH!i
%Dq]F3nBL+X`[5M?eLFmRq;;0_Il>&K%0s!F3SEl#/^mtsa,kAN5F*Hej6DhXqg.l-o_R]bI<0^SrpQKMS/7en5,3$SQYZW<hIJ:E
%s$!\@=,3:6fC.%'I&a5Q0DkA'dhRr=^K4cJdW2Hedq[6;Rn3J?T@1Ahkl:T>n\8A=qg\-[?Bs()ms4m.OEY7(0Fb(fg=J=hUjFbf
%jV(?$!.VV+GBpX2g%_-le#EgTs4t<>L?\$#*R&)_D161](oPokP_1e%H.?rAcd@/r(7Upk2a@=kp!9-#alY'rs2EO52lD/5?#E;A
%9drU(fC.$D=+<=s]eOd-K,3?q0/$'YB>2&6r9.tAL@7Ju5GQ9.l`7La)oLfrZhJ:OmoT,-^\bqGG@.G$fj%hW#;4n^Fh'O4p>TF:
%dGO)V%*,8&gJ?RoTs[mik#J#FQJ1\"@*WXGj1.:*8+_QqG363kk>t`_Dbn]/he1QTqkpLDP9&)[]UJeS<cBb]rI=)3O,;SrDf.Jr
%IHDu.pZfrXPD8&SbAZA\hu<-Eh4+$/.:C?*/UoW6T9k;pkD/Amp$YuB@L)e&2h+uDr8gBQC9W2an8k&n\LdZ+or>Ke_XCCt[M6G-
%`P4PsdVp9d9lujO5"u^HVMT3>FEH"S\h*JV(A]TU:W&NQDTb@*ro,<]?G3)fX&f^XonmZo]qWj#&`4WM9p:;R*RWj0a9VO:IEF_u
%J#@e>d/JGB2On,r@pT#.)scdip$Yus5O$([po1ZFE;3hl`D8\&.":_8#F7TC7Ia;lk7="a(N4G`q@)T-deHD+UEeLh/nskdBnrO;
%MP!)^=76Odl20iFrL/,kWnt_pd>^$SP=PF<qTAcKfJrl')f+e%m@a!cXHB-&@Y'OEr/AbH`)!tL7Xk2G3k@:iI0R?jj+8W80r])^
%:XNTH2[<ZENN_1TTZR)\r6>6-^2;`'s.^)4lo<,h2;D:$?aE4Nd`ld&2*+ui0L+g>!c<2&npZ`AI/XVroT%3;Bfb*bnr>Jc'`F-c
%]liQ9r#GG0Ad=nSh`%F9c_jRJrdK@05JY&.Ikc45W/fQFpC8<q`0($Z.dp-IO0R[Bo^:"-#M/;_32ZF+Yerj<hdKGJq7GJNYhnaO
%F6_]5n/Y'rFSh="S,L/e1o3M<p`6.c`P7rAX5.^o2idl_pY5`$n63M>pY5_Uk+?k4rSKa7kBYpuI?&e1?MIU6hu<*+9E2[%mJh"t
%iLr3tIf$n+54d+4hu7QHrX1d5*qIeSf0B"*rgPe-n^Ua&%S).`c+1NTNt.XFo>TJpO,iT,o?j(t[5HZSN.'\Mg22(^3,G#.mBG`J
%_nh,\:EF2131N2(LYI#Crj_2HhL9R61/0Xtk"0Kg6Y[%]i'D9F*6+`uIIi&/C=[>ul%n:gLUF,!]Ue%jZF@6ZhPNJ*M`T(;?l*T@
%XGP&%dq?;=reX.t2gd[ISc4JVA/u-J:h'4Ch.LlpT1;%Pmh<G:SMaP;AO8Rd-HbfIO@K:)DeY"#^tF:.B1CSDn`:O`':iHCeQQ1,
%bi3CY(/=eLgB2PD?fbGN$_NT#)nXr-Aj%Jr$%;HE(UUOB_e`+sYrB=S]<;%'b@chQ)Q\_08OnPKd7X@CI*Dcf^U)f<R951D/Oo(o
%G]lSH@G^"Zm.e'-"D00O%&,6N[3kRh0b+0jGV=B`rcYtZo*!`om4W[S?3mD:9u@GSI&HZ%`GSTXq2VcYf$o#$QOXE&lbE,k/+(bX
%d"o+,VC_hM^-U"P>?^Acm0BTnChSY==-a\&H"Q=0YH`)jDF!ZmmjEZ]:%N9$ETY</ce^U/#sr!GbkB-Ij_f_CjU3Xi^_nZsXZRT'
%O0[a/V5EAX,&gp`*JGK;])gbMNff'WH;!"B]6E#s7]O-t-QITV(r#c[im`rB49`[dN[!$i4fqfW#K2IOr4RpBlr;8kY+Iq5a'h!`
%5C(+,3k*!LL<GSgC[eAIQa<l=S:%5^N&Ih'e)-ibLE6@]MsYlA^B4s@?N%NTBfbS6Z%1K"/`Lqe4*5kRCq*MF3sj>aGFH5L,"qNk
%Yrf[>hOX9D7&q!ArjR?;HNT90$c_T'o"re]J#NmI4/a-`JNS;:0u)4!\Hj\N:`X9jOWY9bV>OA$5D>ZGp,<lPo&65.LA+\dJZ?P\
%6s7E7D"h$.)@U;(YpIae]<uR^@GDol0t>uBoI2eLjfo>,QTK!(Xfm*lK%:B(hjQ^:+PJ/mcCI@I;*emf)7/Zh+7+jap5*pp*SPp\
%LV66;$_N!?_3ePNI%,QGSNuW\V17o<VK8m%M"+r0Y]K<g/b&]%lomM)L7TIRp=/&o7uAnZ[SO,Jlbm6LrQ#tE\sn9B(akSQFFl5a
%\_KqVER8hnohFc<Do(hpmbG?pP@$B$e_>;`ftG4_9n'@:G!'Msht)$OEc@2S-O+`Bn!<TT[hD&[r4pT>no%>A]%jg7Z7[CDk2`K%
%fYL75:%U6<-bjU+Lr6(7YanL3dBTHLTT*!R'=Z:\KfV`L'Pd?T)7'tmLJ\iqI;QfZqjA'c*CCB%Ek]O<+YFt.7ic;*)]YF>m'+^[
%H0if4/r2\"_-qs6c+TmIc><pPO;U,K)EXL^G>IDZN\H6e,g"mZnD[Ij@GO[8norWq:T3_[I=G,@r1cM\56dZ!mEsSu#j]p\1OIDR
%3',%4SY#^8RHTYn\S184a.2Ef7k:PiT4te>:I05To@`pG2RN8Ne\sUDS_%*Cg?YetZ\u<_mI#V@qdsp@r\?$ZCA@3-(H14D*#mbT
%+8s$jS%j;up>3O]VlPaMQ_0n"J+<&!T=d.oGdCNnSZT(R/-#=leL13,^VAt+_><fpdjN-WDSElqHFJ6O[siN"e)p#VEppj!QM('q
%l;-`HbND"cp"B1hIC7K>gLl"UqNH?6[MA5%^2&)H@lIK@Q^d"S%8rf[YBZk\hH/$Ke[JWGA(ugi=)\)U#2/cbYeN@d4*rUk_8Xs@
%jtE2O-b[7i@J02-F+//CSYptM!sW[kcK)_8jkZDaZd\5agB[/UD#\r"8?jCHSUYeMe%C!VrPRpTMi4n^8A.B<[6p:])^"[PH-*Md
%6SGYsJ%ZAB[6?Z6I=&B9r8I;CU$"Z0rUrZ%)#Gj83Yp3eHK4Cr[P,6Win*]A!<)l\q2#RVk5FPhAd>l)GF,fo=5Wq[^8.0g7sdCC
%c`Q(BNS^SL^]!P`eG8PNZhS`h^2AB[_r($sIlY:=q-9Om^UMbk>PJm3rR9<crigj\=oF!Gq<%>*jk48#Biof&O+$KUT@^GtD*OWa
%Er*")^L0<N$3'`:55eR[lT_K<k>`F$?`sCqhhTb(a7c>m<pr#QWAk4aa,`GgrQ]#t+'Ot]@W,+>6g+.=Ch(*DbBX!Jq=D>dUD3q2
%r)Y"bf6R8if`(nk2k01rs0bYu_B+#=A*u#']DS3ZOTtj6.6!=a5C0q)lu)-Eh@Pn=*nLrs^AD2S!,qXWH45&L=2./@T>1<`%i6U_
%%t+>:X&&`cmd/^ir72A>e`iRt2]H7;s.IXjY--@U;]kV'oTm1>a$6)cSQp$WUK:e#mW/K\p1o-4quZ94f:VtJkL\Vi[(a-N7m!6u
%fGdLP\CL>Op"B4ZB>1nT5f[q-g!MHbF+*rGs72gD^Gt+5#>/VFa$4H:Scu"JocJVt$[d#q!1EJL72jI=`;^(Ejr"Q_n,Ar9'`[2Y
%8WNu8H([-&^H(%2lXW+jVuM6:KYO'+r;NVWP6Lg^3Y7m**h2S=na9IDrr,,NdGJ<7Ogj8BFq1.*WW+d"NM=RE?1[mLlR6+is7<Do
%^],+CjO\%Ba8c$uEK>)[=24WYZT`_PgRkt:^Cm:.&\H5MX8:p\X8:pZZDqnL%Yet::G1sgc0<t)Sjb<A?%3RsCcNRgb>Os;i6S;K
%2a9E?IF7XfYrndE0/"q!>M#@&)j<(lfR/2/@C+9`ir)0X)Nd@nnsbR3=2u7Kf)IdA$=e4nMKukhgoO:Ff_SC2bjmt\RK)k(/1/][
%\\6jD?LZtGPZD#SM]=p]#i+9AX^5@OXuA;?4WSJ)LZ6;9bNa+rBq;D&hn;7<3U70Rl*A%7H#p7)3a!I:)rL2]mTD/@V]hDmPEWV^
%HFLWfna;gX^:^tdgM_L`g.tE.BD^c\oUs[nBX4%2m6L:&o@8cn2]&Nuf@MsNX4+h$:]FDVZ<^"Vd&Zj8:[@=bG29$!9E!dp=)%>>
%[qR^\H2_d?]\iJ*k?`#n_+B",GC"CXI6j<T4`hn^^ok.6R\tVF\c-$LEmG!DjWQbcp`Ig8Ndn]dJ$XIecE$gQs6BR-V1&B^j.?Is
%DP;?ZgWe:Fr;(GN8*]jcS&4EHU#B@N%Ht9&S*a@+'%6ZJdk+tkG[13S=adpXbK]=YPLH#oS("^mRpU?sLr\@:A7)FahnEI4h5jpi
%>jfM5%iA@)Di`kB5ks*+2TIa7UGqMFp%e+[#P-H5j0R3->65`&?OV[-am=:\&c4pJqf4<<g0@om\EtM)8bF2H%"#AD`tt?i]g"UE
%Mu)&MeMT?W2cgM`CYF-UqY]JtAI!@+rP\UC[E_On2ll86X,A&Ycg?-j)psdUhI>N:?^5`!n%M8IqWojo4+d5uB/oRd^AgaMj,9t%
%c,g(KD"YD)>hn-654,,]B<T'QI<?@?\"Nss!_b6Ie#ehGf88ZQe8'PT1QVA^5kE5*!I:a#[lXl`c.fim2XOW"rMMa]SW<<VgPJ).
%qi?Xo#Bp$<?[(XQ\!Q6`5!++cg\$W*QZ)6CF?ZutjEhEE1MO5XmH2m<Vg#O'BO#IXaON*0fI>#:PEY2npF#Nm>G?aclb?c=_6LKO
%\G(2r=e/pd:@[WA>a41+qK*+k:]Bb)c,o5IGC'Jgh`ne#(21l5'*[f4g+,_>WusE0h]b(_hSCN$$GZI>-YY5POgJ*^pkX.oVlTL4
%.E%DU&*I,?)+b_6NVW]U`:M5%dHGqPdQJ:nA/4i#5CBu4#-O#9%(c<IoA7duRJ6`N@HPJ!!OTW)87,\0*OoDKOjcXp'6di-_S"BN
%P5?Nnp>&ddk:mu.+7+8GEW5$<o=_9sAG,)Oe_uc*qQ!C65)Y@^^Erg7J,8]kM0uhbX[tVX,k[=6o-B1&4g"TW3kIFtB6q@gF1OCm
%\@?j3nG'qs;`F3DiIfshO4S$6mF.ZnpsWa%=0KfRj'NkD(@Q?mIf1ZcXj`79Ac$<952Nu$pZ'(I54YU4R5DT1GX(!Jq!-l0Oa2G+
%IWKIKG'eESlu`4*c$!scTpK%,S/E8lN;6VC2l@YFa6%btE5$V07cJ^+fC?iUN?"gVFZN1bRe=pR&p'u2oabS9Dt]"QKA@+0c8XAL
%36?WY^K_i8QAQacKlo^1IUr0'j5TY)ii+!NO$Q#o:>S3r'AOK#`0iN/^qfL>r:j.KTO-sUo8ELgrk32F''/(sqc)X?59>2nYkli2
%NU]LPbt_=>rKD1!o[W:-ror^Gr..l$""pc0^-CGFXShQl9MF-0DFNnrnO3sPeqCr#GgL;YjPHZ8DpCC6OY!jSefK8mh4rlaAj"N9
%nc\`XSNhT>QR>Qme[K,AoAL?nXQ#J-&k2u;^Nj/3Rk7olS?I8-X$(@n3-Y&pDV9E+='g:SrUo=#)*>=?g[@GeqIFYqqY#<or:CPT
%D8l!'@Foo!RHh>D[#]B8?b\V7H+/6]YgCu`>s2S%H'!:jXYmZM#!:FHe"uA2d!nF1OsbM5`>(/eqPb?7cgQiqrbulMf8_R-kU*^s
%f$cf*7+a':esF^E2PT5Anq#H[jrE"@j2]:;Z-LhTIQl33[d*#IB".@:\NYiBoX,p'oRBC+H[)j[Q)CLa4k9"900J_q3<KZ>S+Y>)
%USiSl[b,kORTA5/]qZCik^7MW\:(CS/S["gYlD?.eW8=+B)[bG]9tmYoDZt+dJ_Y?*u);(/bK#7k4%C*,p+3jaY"<7?@@<Crof3*
%*;0k/Er?,uR#&/\\Ka:0*.(4i\[k;!Uf0J,p$K)A(ugk1YabM:V2%.DXm[\Fkk;92:i(5F.CAF,lUP86q8COLa7"J&P^)VB?JPI_
%\U&YffK%Qm/T\B13%oUPI1so?6*9Q+`ii2<Z8m9F\b^dH:sX(25Ae+kal;s`D"HYHM.pb1\80Xmk'Y@VT$lcA#P!>@]KSISm`UO[
%Mo1IFcTN+:26L8u\_(X0itFe@J%3(7[s>AKk^PTU5C)TDp;(*-3&n4k[cX28Y($<.$2X/-JM3W@6m!EFoi$P(K-S-Z<'u&I/cPq<
%ear_m&$nSRBUZE%@Is)jBs>r3"Ra"`mMgF[b4(nnN>J&[gU3dT\1j3$pMMI-H59:<'0\*(qt.9u<HA6o?XK=oDN,7SJ_@)^o+T57
%T:Zte:;9$L;N-B&nGP_Z4&leo/O)49'd7oMJpM@pHY1.,f^^"`i.JW8hr(P]Ct]uH[/8>P+QTp!7t?os#H%OJk^.u!H>;fa2!hIl
%Ed-19o7"C94FDO]s)b[JjmQOAmD8O_qUh;UqV`n'NHkCq3-A-)QdghpeILN<oqd"?:\S\oHeh_PNu?nJ*.,5[\0%3K,ebp,[m$]c
%^AYn!Yp(LFjG-af"'4#N&o[I7&"E1@p%g%J\NXB*N))=608;9f>$pl4Ua.!&D&r0PX$9qV_=mKSa5)(20,O(YQZa3IG-En84\`g9
%qK@:5^,eFOEN;5.rkllb]R@T+X_;iu_1Rb,X&F;0euQ-bO8FWMJG&$#SQI6^fC+cM@)AP.+%f2`4j;e'mk\up1@j_iqqZp#Y?12=
%IjF4Di5:L>FMj\tI!'c2KJ9uK,=\7'[!>%'_e7>lDf4.h-RMPNA$`YYd:]"s5<gJ%4CcOk?Ceh-'%Q%4^=iB%pp[!f6RLjl3S5ZA
%(p<ATP7>&J[skr-8q3(%^^\jRRr*#_k8]mO7!ObVjSC,&VX!>NABn+Qm(q:9p6%M5n(En7gmtu=[bn:Er5b1R]*erBO<*=5QMbIS
%`KVF/1qn88#+<ujc*'.1cT+/6jhKW0]m5"T'-S8iSnt0"lT<VlnM-/2q9-)Lg_&,/5ns$iF\=]>FAIn6If?kIVg#N`gc=aDhK3b)
%D]cI9h!4e-.EdG<*js'C=?QK&?T_au]%)(5D)/6Gg0LY,[:RC&.+f>*[_$;Oq;HMXI9gtKdJ$Cr.HN/Le[(?<ib?;E>FG5pBf24,
%QrbLaS=sBa`LDoQqF&"ul-n0!kL,i:7M"Scr:0AGe"aVNGLkOArdd\WJ)!bi+64.e_>2DAJ,I]DH/DPtT:6euT9i6R3::ANo88?A
%W*)os:.hQ.-R1iiSlar-+,o8&]V@2%ZmdqLUrm^^<o[-hVGsn5Q)WFY;a!\.&q,cX3*A1*ClN"n-gT@M;$2lZ#;,Pf1u$OCXHko-
%UB\0c@&TiEZfg'b/KNmqdES7C(l95:4t''qe5FaTq7q#IkG#C>:\I9t&*>^0HI@nTm<G*1d[1k1*jhcYO=JZ<XN&sZM)HI"D2N$B
%>Osrse3Tb,#P6A#CsMaU_<8V(k$mg3^6iIQ).bIh>D`ZP(hV*a'9,tj[LK(0Y^b\B>A@OfB:EHIk_=^f(8%E\/kaK)*#e=7%=1H.
%YaGn`I[SWY"p:dl_nrhiGkT0_I19m%=H[OQ]K!h:)_s&NYp&p.gTIQqgE1Jdg@.526<i))/\H?hW07u]*Z4f4YR\Re4Jl8@K-AR`
%nCHO>RT\<A7Vf7n$8ArT\Q0f]fVUDWHXTXt[&U)BZtG.bbD(`%CcDI8(sqmT#,XCWe$bp0dph.!KA763nsg-0F]GE6SO!b?aYZZm
%C!Gb42&[Do*;4oO6/]>QV53I3j\oKOm?8AgZ6<?DpC54UKpJQI?f7mRp#A=jC"+I=L3l,0[QXk^lW=T)`E$0.UmAC?,AW\XW\s7<
%Y(;*`i(sFO?4.m]q:3kfD]?B$N$CXK1(W^^7t._F(caUH!-Tp>#1Cog[T)/%3r'POeZ8#b2JL(KAiNqO5JGDIR;k5(KocM,Bc2>r
%'pKW"!,+$ma4IT*["G?.%FtFhrn2!*m!0L_`2Cg?m*ou5Cc8pe=@V/g\Sal%l80Or4.p=[V)9?.`+4J4(el^2'^K@l/YM?W$_(XJ
%A6FX(ArrO\+>0u@-X,lucm_$ZXk3u??k!2c^a<\N_)H@CbBUTMFdU_([VPpaMW*#lA>\ok!m?Qm*RL-m2WpnS$C>LS+oiOH0k/a8
%)3SBLE)d?-72U*R[1CLeZ?;?s12#A#>RV)Q['8_:^h=U1PQi%@fR[1:3t7)kFbLkOgIrN5=6I]767kQp6UP#2'lU0?D^,rSm:k1S
%)Y"^N_f&jp#M3<rKOs3Y:p8_Pci=*_Sm/T<G-'=/NJ>YRm[T7rE6)nS1`.X-f$pW#D[9b'bT*]q))Ej61&<lM)<3"Idb17a+V2!s
%Rn]B##'LJj(`=qC0I;]7`mn0#^C<&G:eS7E3Ai/eFKo!&K2Ol%ZSWu'"Pc8(Th<Rq3@/"Tl;G'u/<o?W?3dcKULg1)$tLuEI:*@S
%/#t*<f.tKV/_Q_'5a\hhXC;;_5uC;HH'[N(-lElbZ.f&5c6SER!n;q9%SC\,CGmO+oR]OUP`ZY),'-X@&^Y&m.Jbe;ZJ)"QC9dA/
%IGj<7Qq"@+a_7!uDe.TNU0<K`)"-[K_Is,lTb6U$Wj]RjA5m-/$mQG&KP"sU,o]Y&_r,m;@C@j7BEEiq^J33]9Juo.p@Mn>Bemik
%BPcVU,;jF`d[f'!470)jNg1286/G.rD1.*t-UXm:>9(QjVeU1?Kb"AH[\D%Pp4"$J7Ym1dZbu2jCFuM<3eW\/UR%:52<Kat2DN:7
%H.%n8:=E[f)iDDW#`+Ntab/Wi4;X*0(6O!1@qUZ8)Ubl(/=@]%50u!OBao6)(AhTVS.QuJJ4egQM-fmbqZDY_m,Vk9ngXJ;ObBl9
%"+q&n*K07jPL3[X-"'T-%5_OYL;io?U`+lE;/d+bO=40QC4s;2FV/f(!2pKt1^j>B5?9"3'>d$R*O0EqZl&6cO_'eG=lSoh`tJVJ
%7f?LHAiN(-NQ,1\nU^d`7g*7eOtG2iMcSJ\Lcp)r9=JhVVMu#hB1uto(1RG`X6`^AZ/LN[C*?e;'$qIS)K$&f2d@K((l/Sq[KAFA
%Aq\)&D(@0^6,Y`EXX5jW^bRq4R\1lD7"[(8Z3CC_9Zuq@(poo%3t=.fj00l.(dkTa[1Vs9+RB,`8bOEk'S;OSiQ($M9WOA0alo:*
%SQ_,r9dI"Cp=Wb.gHlPt$p?Gkn.-ruje)q)fSJV"":7D(Bu[N=$!W>85/W'k#TU.d0-Qu*6I<u=_e+uif=@j!YekS6d+2#Pomr$m
%5D1:R9AqSWW?73e=n5DU>T310?n`q?RUg,>6F*I#\5Ytd,m6\&<u5AhoZ/YG2VY%Ul>D\L'd;BsQ]^)\JgNTMD6R+;(aI6OeFE6k
%0L[?0Q0nKc_l2J-ZK#Dm4o$K>:_9R".n%mqq%VoLl7GF421dc,/m8%((pAW>VdaA%XDJnf/NSSD+]jtSPY"FNCfj)e1Z#VY%kr5Q
%88<9:/X\"+Q(S7R*Ee!-<.i3,=q%D[O+-qoaf@s%1`4MY#L;<C#cq],9[r.YC#mdt&J3-'L02Vu*=#"*3"&X91acLi%to@]G_R'!
%masi#2C`8iY["&C/X^[G6;c7c6ha5JO)M.?B^P^6/TC7/c>airCjV!eJmO8%$Y4'>fjl^Xb9d$gR'^IP_SD@;K/*6%_F9Np1R)9c
%bu=r6[A]SYFA(!8@G4"C".AhHFgM@Kou?h35[4+pHeJ8L!NFI^T.!#p/j@QHM@;;kC$ulXl&rKtBqL;^#t'uT?3RkNLk7+&')^YN
%\@"0c7p:l4%o0Bh!#siP<2]p78ti:QE$VVBFlU)6FD30VaKRum'1G=7E1)93>-M*7Tm.1PbA8FfTiRN^j9$"[=>ssu]U:bsa0*$l
%RVG<R1!CGDel7V4)>L9fc8DY/7]='BIH)h_g9eBRQ]*taG*'Zg(28OdhrH"D0tQ+2U,=Nd!Rk58UtZ$+63u%"=\0#727o5OYGQ=/
%#em$%KHh@S2$GW,J]ik"ATE>M/:;2733O(j@5"']0HTpJV(Hha;4=__N_SCV<sHsEd25Ock?#t"TIUjQRd2U86m#(S9=u&R'Yp0!
%?!3k@81d"_KCVpKN41AcYJ;(jHU*KWPLL/+Vo;jooU$2.7(]<:a6&?jN&@>#b60",hpm:KUgW]/)9uDj<jTfI(XC,5i.P++=T?mD
%Bo'%f8F8(VDV1*t>1eF#A[4dhj?P12;N-Ct[Fch[RF`CIZU#hZL,B@F-uMYG:slqpBSItRP.?PC];-sK(W)Wj$($fjPtWQ_6Al5i
%ZkSA3-I!'=RrQhoWdEaoPanNpP@7-a8<Wjl9JrlD_[(BX'BhH@^sk8<-Pb!h'65DrKN0Cf->:WHFTW<&FPr>@',"B7&Ju?Ik?/@f
%d>GaM;2Nq]if/]8,I?/4B"%86[&(lENFY\NK,a6M<Ys@#eZH.M(&Db%PSQisVX,7BLU:o:*#j-U5_4q(b#I"S!`g>]7;0l4(fAbj
%&tU0Fdfk[B)I=S*2AS8mr"6]1Y]?Pb3^k[*"W5hX;&'Y7"epA]YHi_6?lWL:]Ln#pg;A"RPLPs#U4VHkST#LZcOqu<9LOus4GH1Y
%8POulkjj7CcJ/jDS!ZW%U8(XO@5riJaClHH=/H23F<9+&bVkh5i-o5TWrOr9eJVmerRO6,b98eO3Zqf2@hU>t>"g+5XY;nbf"a,n
%m2h9Q%^'WSXF$j!Tj[8+.\]9a?lE5Oh_QT&;&.`0gG(o2.KgH7[?T#DZ#]Cd'-g[!*@5"L8%)Ts:3<l1?k7\&.7';_C!iNYLGSmC
%Og`Kr%s8.mJM,6)1T\^r!WBeJ#HK6Y(*&c*6U&M8Ve'?s)A1&PAju80js!bC"QQQc<r>ODm3PO<(o'2L9TYI47d,lNHqr-!*cdVQ
%DlM%1Flk'\$)\)<W`?$AZdWs4r#.%n&eQf@0t",5=[[.E2T;VRl(CN0OOYK/1*Due@mi[pTfFRZlE9VM"1XPZ3kAFcfZO<fXp?,'
%)]VB"D)<rYd[N4k##LP7!P-74<E@7V6jB-nV$92E%hC!2W(lK+:+o7(H<`q(UrB-o=\m$QVK%ErW(V4)7A/,!Q8!$A;EAKBb"L3a
%JMC7DB@5)ZccJ!^37?eC'H?3\PYa_iH^DaKhQ+.O6q^_AZeAV+N;S_.9oDt>)*;H>P,f0^S7tFscfU;:$O`"0LRVP1$F>\m:$_s?
%e]FbECsf?1q&j;WiX$"t'DpPp1itV-JNP)jUPj!"fs!HL]4I0\TlFjd)2r+JWg79Clt(4dD8irUWf/O#9iN!uh;#k%jg4#nUQG11
%UW]%tA50q:0OjF4&^TZ5DMp%V@SN6_A6IcXA1E6Jqk;+G>H1s`3+.9RY`TAHD)phM\[gZ,eq]r;`(.[0)3;2@lkDe[O!8oj(:NL,
%=:i?(l?K1l<askFii<tpWSEN#(-SYm'P9Qo9L1.Wf`+FJXZSG<>RV<<_FubH*-nE?</!')p(M,#*<uS!GUub">u1m_1ggm-BsB73
%)_Pq:;[DO(K'eX_SF*uX%lCM%frIg:0W*JsW^ub"d2q7>)*LP,>Cm$_l7U';;ONo@>?':pfJ=aI#Qe4PJ/i2q`^+'I.ErkWGbXQ'
%n">@DH',dV5`A8OOV,&qdZ_:;VTRV"grrbQZ;`&R=U$qLM>C0pd($,Y94pn"b&&J`)J("S217%4U925t^Gq1Y1H(Z[PDe*NNl\61
%(!8YaJfi$*Sd,N^?'`hcWmS[GL"WUP)rn6>Ao4aCR:EL(nuS77-r[BC!a=.[cu>G\AT?ocW&YTeK)pst(.((=S<4Jk"+.j!;1,i`
%qP?X'dFN?;JWlQG\h+MLO%=m'Ke.ss-Xg=j]j7dK(>:apC0ZLpDC)9Yi[5f?W.@=*;n2eu_WE1W)Af"\XHJW"=lIb#3i+8f-fGBT
%UUJ1RCG@/-c2Lj*>d8)/Z-A8To"3jlbHen+>Xq.K(;js\NJ:Yq!R^<7ad%75X"I<iol[ML&"\Gog^qRLPrf`uabQg0i8EV-4;p\4
%jWLYm]o\&-$W3K_4W<cF_edV`^YQYTT-[4W<UiCd/<^eeNhq[u>=Sr;[[)RASU"\</FlaKiE*DRD]E,],Xmo:R"Q%UJ]u3gL*@,P
%*A9c9&On@qjA3ohll%hBE?<$bZ,jVi+:E'M,J:5<g!!P_VEeq7\>ERA&!j(QiU"d)@fjcFI`R0h-FfU?b;1"MBd7,N1/blMlPB:>
%K-^da]Pg&[V9`,Y4)!*+\jrOc3;gS35Um/[P1:0Y`@7:Vk-3'LC5pH[Sjm5/R:oR.'f?iJi7U$rlU7ITno0`.4nD7O)Tkm&+98T$
%r2b,P;?%uenRZa,EU5m\-;nZX@a+D2ZhuPh9m?uL'I:*9X_^L;nnt6"p2KB@n\VrofoEq1j->oWnk##J#YfaT5OsC4GRMkqZ5R$N
%Hf$a&![?JDfJo&%*Y]FWX;OqH0a-\lL_:S`V=SrcKKC()8T&QIM\j`i"T@'h^3`5Wh!*OtLHOc3o.8_%NUKreJ-dcb7nOm0!iIm9
%=PhtU""ZpM@sR#fhQUAu\R6Cn0[&\AAkJXIUWRbHZ!F#Ud82RLb2n\5#%l(3(hi>+mmH(QC\Yh.1n9//p0\>'0g^;K9T7FtbYXqs
%5mE7_MakXV.9rR_YAai%^#!&f3NI-2<6uF(f(*H+*X4<.Cndbb/OD`sdmG/<PR@>]RG=Tb/_QKK*n5GnJqQt,#`SJL(4#MWXMYAL
%6*;&q:ipKQ69h[kcmViBp5#@WqNE&O`LeF@XDuU^aXLEeGqG%qbY&:#@38XtCVkurI8ha'&ibk[`Z/P5#1&WQDq?3%Eq"lj@k`r!
%U[Z$1GRO(R<M-WU))AHW(O$#9_lCRSS9Q1<.263)/hi00O0*M5@2a4D#sWrZR)S-egT.\#&nn=]iO@)pG2!q)mDmCR>07FD,PN?7
%S9b04lN9KgTLG#KlG4%_+FfVV\.#p/$Po)b5QFh7%YY\/G<GLG]Bl;K((GpK8_>N\Pi4mN2F37V6X\\bS1pb;H/9TMBeGRER"e+%
%8Sg]p:^]Cu\KEcl5ZH71lp>*5I+/E]JG!U#D=mTK$&Zj<MDW1U2/\7I/r>$\1N$AbKkN+bro=@Hb*&'(;ih@oTF4!'IIOTP8?J'T
%7ecBaEjg&Mj5hHh6t3KU<NN$S<?!7<llhiUau_-LSB2H*(69q_i?8b-qO9l.">C;'KHY#;s&L]+k\aZo-^g;kR3*]1)PXT()Tf\^
%hR&80i?W"OZ"0i2`MlCp_AHBf2rO0p?R#bla]JNJOch\j8Lb^CG)<ob^!R,-$sCN_3_d>FP631d[lW$:(`*ZtW$+H,b]H\66ZZ7X
%8U96L,bH4:'j2Ci[QQfV4tr(kf2Wj9g:cr\9@Z;^"C+@CBA"emoB)pFTA1Z#V`#Ms8.a;lTHjHVip-,3$sqs2\f:?PO0^%%6-B(V
%P.JTAm,eZd^+f1!NA4%5l`Tmm\K0EP?!;FG`/'%Cp()td.1[Z_#\jo_m#$ff8n=@Fq^u/Yj$F0;I<o@1?<h<`N%I!GQtKJSGkMj.
%M%T_e4cgpFM-\$c.f/#+`BB_0(/Mu,5fCli!kX3HmN*9WRb'ANHAD\7mZOD8INho>TY.WS0<d0WYJs<)L8#:YT8$3`XaL,PX0N0=
%.3>.WEJp<?[VGhuMa,B#;;M8prlI7dMQAnHfQXk/6-+dLOd;YL-37UVV+'fDKosTa&KO*EC+IVs1M*UW1'^tH7)\q1ZDl!YkXUCQ
%J;@@/ErkNHD#NAU$)/J.7)XVX?no/",`U'2fo]8b]O4-e)VWJ3UFiQb&Rq9)*fN##EpdS*3)\6U>Qd+G;hV-%+K7>OpG7g`KnF,1
%/s',)7q7QpgV"CiLi3s.-WRUcN[AAUP')YE*QE'NN`b<q2^1X)a\:?DZ0,\MUF(3hAitbTF_sEk0a(+ABf&0`Nb*(oKq.?<fBn$0
%AQo8+4496s4fl0IVIsTX\DG$1C.gsbU1LqQ[2['2V"*W.KJ_8ZGdf06eo4:0@qmmB'1PNiKd;\4T,+>H@s3&6'Necd7KZnj&gbfj
%WlWO9HjVP8O*ni!JMdYG,86Yg?MB@mi8So:U,#PLiK']_";iW08WhM1JM#V&]3qE)f]?:"%M?/6er<;g&El8/@Gi:e,pMY3$Sfaa
%\K_8I-iXV$+8)S3KE[#Oa(7lPR70iUN<2Cke22Ac;SZC#D7!7N1r1[V)G[&&?1$TNG^be)Bp%SF)+^T\/X24:$CenE.lM"b+n$R&
%R,="b>aM"=!5g".0#R2n&\`$0ML8p(@SO.FP5'7F;q:ueiugm8oRI<Q'X8sU7e@&jHUnGKR'_WIK^t+[+%>fGFA9U<`oWN7Hnh1t
%Tk$JWC@^h,8JtG@[f2"*3_lC9gHgo0(F1_\,>mHR[q!aN/HHK>p-+L&#sm<`H/`Y_1l;GDHRYjt&MKfh:,\>%<1HlaL*;@s"MJes
%@c6IJMSkl[njeBs+Ksg6l6&M!S66CaUpPKM(>-%;i3%0h>053V(:UCMAXcp0_GphD5tdD,NSZ#q):=V\6,Nmc*Gmm7fqX1DcbV@`
%o-rWU-,cI0,RuU=,7=qn%!drITjnEW!O`m)P/\ZoLP"X!-T3HRjJZ;j3$tA:SD8"j6sq#K>uKM-kQmlER3.W[_XOfWBe?hH#s6ZF
%Tcd"_RJ`GO/,)T;U>/<:KG_K,C'7b"fL`QX\b$IbdF`!+0+>oj=P>oi34TQgJ]N%FM#N4t,IS]'hp:`>1jRd1LiOZs!O-R`*K9iM
%Im?E4/C!"f&gre+m"cO:iL*kgdWdB4=b7J:P[)rV)X9)gSB%]J-DXQ'5`OAQce+mb7#_KYIqb;b'i,)^5(-")/WPL@Ta<(f[XS.K
%XKQk^A..ZgN6kfmDH7`%i$-W6NIuF";P"^NbZ3)-0Voq283W!J3hYg\@hM:rq1@9qTm[b#,V^M.$tF<2eC]OJ;oX`^R5$LZoHXB9
%-9$W4-$e/LH^KT@^qosm35/p/"BIR_amD?O5V0gC]OfbV>$8_0N.4ds:a$dTa_(j>X6_:"$U:BMIM2*+E,\=),!p8_R&C@5S.lsL
%i"IZIPUZ=B#e*885bh]t*4]mh&J;n&7Kli:$Rg[,[ILi-DC*t&ge?1lMMFKa7S)Y#Tb\8rMBY3HLKa>+p-OECg]1E^X;lp^.^HIF
%LpSn6!fI0JM5k6/$4@9E19ilb"@@Yo@sfUW$>$g,^<O0Ua6KZ\j7$6nCHd(*CI(u<M7PuoJXI=2W!\&,NaE][BcJM!dIJ1@L!_Kj
%cVZ8$)(5dHMLHOD2^&s4\nUj<0aVp.A2$``PK<gE(i4Tn=PD/F]7S!=/XJp5XTc<W;9@R1--r_C.6_Tj$WM[l.hJC^Z<?CGLO2dR
%D&^/WGr_W$&]?1;8Dl^1#)sl>'HA)[%p&a4Bh:n$$B`3%EC:`o_Bd"aMA1+U*FVI.k<eM["J;!/l3h]8^3`Q9&;NSOEFLGEfWXGO
%&H8pNKi5i"nF+8sGT&/k1PWdiUbJrD;mgOie.Rfa]Fd#e?:a?A+rqK%\OD/saYcB8Y`UK8Wd$.4'[f4iS>aG\#IpG:F1Pe.^,DCh
%Z:C``#Ut"riR%rV"nj-=-OHpJ(9'\?3-[goN=&LT`@3BiTXYhQ0fc4ZKPML8"6EugpaWpoYGHJa;oZV>ZH$t-6Z*"488RiT)2Q[q
%g[%^Vfa)BZ;#Q*eUDG[bZ/FEpnlCA+'Fd_E/$\/<nJ?l!V+F!$j'%GH'uLtl25!doi8Na--8`p[HF/7Gpo0;ngoRlB+PMgm_]r)"
%1rht+0P<D>:nn45(^cLu8*R[ka_4\oWD0=O..K#;m>Qjm(>i`5S<H5r(14B165[-%1RY,Boalu3"5h1aOQ?q*VJ&n,f**?tK^dp^
%9K,q%8StW-'9=q<@$>7e_R_IDO+.Yo+d+?*OTM*#Q4R<!H1oi]TgiuYD1,;TamRZAOu*`-QBDKW+LoQ<WGW@^[ei5c;6neei8=Xh
%I1h@8[Oe&&JsL+Jg^,[uP&GSKWjZ4IP_,e5'P'U'G$'X!LqB:W0kO&#8ZmDj+/]45B_5cY_?uB5b&]h4q%9a(5^ro3?p*iYNS0_>
%<j^K<nq&b2]N:8J&W@$;mNhV&LkH+65T'aBiFEj3gbMdgnJp<]#@iV/9k<^i&.BaJ-$^%V'+#4qNh?R>Sj_KsbcA\8.1;9(KnNW#
%>\*JHi"SV6+[CiXIbZ'g'Qc#RW79h&;X.R.h*Kl`FWPaY(QGX9;?L=k=`TX.+t?<OU-pEgi^[uYR`:.+KC10BMss3hO[VNj&A`Z$
%A3mS@$='*,UOqtRO'4YNH#]l>oXT7_ZCG<!omtnpD4hf#hZG_`:SlSiT!3J3As#VM"Q%@;-8KFMEEjqp#UdNO4/;KX";FD>$TiOg
%UIBAX?RR\=/fAn'cr=8.U8<.noB64D"_Fl:O'YSVRn%-K;)g'[:9M689,g"Sc"'_2?!3:j@g$>iB\YQ6@V0K(JY^Z/<PtR&U#9-k
%#Hl7:OlVA81Plg6M(k`u;Z*OK&k&U:?G**r_b)N'kU$.AKP2NC9kp'OmuK0b6/srsEZ\n+1SnAF0Tqtu.9.r'!Pu"k?8p-@$%tiO
%nNG@be!qbo@4$]/)jV0MkF<`9cgdGn*>.l0aNRPc3e\J^`/@,I"%<&^*m@R8UhOukYNnS\&X4P('"D&:$-/W5=Fs9J/>_HGXkH=+
%6]PPgjj+`6UJPAPI(CGVQ/^qF3Cdf"Gd5e:^ch39k*3js,o9.<BPIl/nCJs(Mrc2b%A]#WhH>o$GY*UPkrF^?N,*]23u]W)[tLA,
%LN@s'f,/p5G.-Rb?M^EmgB5kdbRhm=.AJs@'Igri/)l_jR,mNHo"q9d>$qlHi7ppA<G(&B-4.2j9-34C)jMFi,ec^7d-;5K^@i+\
%Rk`SW4$dmY0'FGKaq#]nJ*d<2ChV?6<mm(Lj\"8>.^0F$H^jp\K24MkP1!LEr>jSE87p]>*(%uA;k_qM!C\]Ne)=H"6^:%[ZK4!q
%Ye\4h=5m)I<XgmsV=6AWA%`HJ5]\Hh2@18N6Uo^u\qCo8i#3:aLuh[n`c+F<1g9uZgcB>AfNa$Vc^lj>mfDC&=oOsoTuTB[.$BMW
%ZYTub=qi?k76m6)gI??<4]FnNZF_sOPU6ga4&\S&[O(Ys[lQN*29t,d0c=U]:9f37(%C]Eiko>RkruO<LHcAX6Iu<JGsa#%0rQ(;
%kFU_*0nqkU;u"l_dX_PY0h97Ti664DAClCeNo"7Ae`>#rE%HmE.OYFj5kBP1!bM-H'dU(/La+`A\o57.U]Z[J&sLKa$tQRH4.%Rm
%M\6F]Z=4e@Cg%POeRVOHiT@Ka&?>)Eb5Gfd4ha:l5j)f;<fmJ$-Pg!Zhj=qg"5CVc(AEX.pc+PQ7#+054DoukC$3R'MCdoKp;e_W
%<*lYnW\G'o=\Fh\iA/3&q8aPf7'\2[gG-'NPa=9c2b)*qp9-o.";B,d:M6Fg/&c.j"/M$LWa65\Cn,_j'oIMRgXVsq`M#dl`f/j2
%+Ds%f5jVpsdiqp88T]tE8,DTJLL=#JA`I&?.T@`?!"TnlgV]:2V'23rGU%(SN9*iQ<=+8UgDjTmb0<`7ln.EYU%QVAGe;^eL/u*Z
%NJq?Je;7,^g#VRod*=b6#dQd9Mel"QYY3Vud*DP/Q`q&nA0qa2U8_*g"D+Q-?jqc'c'&he=>_lVQP^Oq=@@NsdciX1)^tB4:cWOu
%.MQEhNfM/tl="^Af>tVa;8u5j]q(Mr%WCc[RGH>UAU@>:LcHI8\1^;_"E@9R([u\m1\#uJCZC]-^A2Q%&CW@6IYl`@2q%%Kd11^]
%elEM_2(_ZdU"3%CFtF>g-7PfZ%SB?063]4X"m$R6XtHllb-HYo;H52sn;ZA@9[L3GQ9?\t=IDKjCF8Nmf!#6*Z,Y&-d2`3+8e,Kj
%S1*"1K/_0:Pq0p5WLgLGQnE2k,Hkcc\HWJn[YV;&VKQ4%Ljo`;2N?@c[d"C`;ACYK1`XPCDc+<15SKR"1ciVL*FA@d\%C\W;Gi',
%!`!WM`Z,$-EouW]c=;MhgU=+s<2`PH&C[:s=82f0.76p<"d@#gk*.C,s"/>66WqK.nOt\DJ>pVr.#tC4+peWjK./sJ$IDs6VBAl;
%$9qfcLNa(q^`#6'o#bJ*+$Ho"oB/6OfG2StjXrpd+dZ/WDa,C>dXXZp1m!+I\OhS"6uIUC"*qPd\7Z^QX@.?N[):'0/6QM_C(\+/
%#0#OPKY,A_XUI<K*.e9-k`\%e\-_Y[./ABe:7R`T+C\MfA/b"eb`%a`,(\EU=.DScC=S$7,&_dJ"BG3u[`=tJ$%g_7eW(>YJIW,0
%UGN%H%/>jhaB3`C=VAgNP\iBM-BJeYNP:$H4b3#t)<nIq*Jb`RR&"bk9X/9g5o^dui\&ugBM,c0mPn/bjr2)m-NJo.*/YOZ?l>K:
%8l"g5!AlE"4[neJlukXZbs5#^0t[c(`;Nt^:*D,#1,L76DE$7eE0n/jKYF=^I\)Ct5(l@16$R'-fPu>'P=Ge\,$/E54i<;uWbk>8
%>E4uO8#&Z%ZZ`N\TIs)V$,IO8$W'[T5Y1;&,)`spB?Bk#.VVpVQjMdD(tNQP'.^Z)[A=XsEj`9lPHU3WZsAL;RAd+)S3j%skneD`
%WU>Z&X-l,6eeSEYAC\^]NumE:frcWspu7"[d+4!O3nu(U&u$&:<r;51Ps`Cp_CS,JM]DK:B#"Cc]gfs]\HY$VdaT:MN9r>j@JKG;
%BeX'9>8EAk9bU\Gli=-7Le*g94:NA*^bQQ=Q@]M%#861?L-_:FBs`d[!t,01o)+([.&JD@7Z1ATJX<4qO/c<QAK6LC3SnGIa$>Wi
%:+;ns5*K0/TT!=@.Gh9;>Fj3PNK9P9((MHEUp`2lG66rt(T%apG;qE*Q^qDb7-TC]:QCo"CB9-\Z2q?NaD:s1(#si"-q4Wt$H\")
%"ZC:5WG?a'[%$NOC5b+Y"O4/R2BY@L0=F_afRc!.BF:<JGq:_I7=$%S=0@9Q+'(CP4=pS3&RBsbGfVb_<l&p/Ag#KiUTGXb#>Nha
%PWjf=N<IK\3E[cS'^9#f\.=_dWKsf9-osAV,,Vp[@1;0f$'kZ*;IUe&<4'":;NO9%MAKp[OgNsHfe[M,qeG8tN+60cFgj^%*iXHY
%_g@b^di'2HHMAVI>`l(<27%r:KlUTfOrB9S3FW\"Z,TU0M%WRP-u!!!D,Ph>Ub:;SgYuD<K%:8Hm1IGHZSIfe(.On1KOlo!ARfT<
%.3SCEBtZD.7&VkXeRl*t$4-\A.:bMXc>MI97E!2X]]@EJ>?J"I!TW30%Q"2!BCatU#[/-X@rO)F_j)/1J/!^b,MfuK^qc'<<M+Q]
%+?X8+)R:Zc,;BO&kY3BEfW9.19JfWJ:f,)8:m@<:3ob@%OWT1Q`$I_1'Y:jQW61+EVqR.*fH#e"dPOR=ThcF7*:;dlh&M_?D`ucI
%?R,uN]a5QJ_KE^$kYVZ:`=u;g`;Qn#7nGM!!)LPLU@8h2>"*7Y'!u@LObAj[2KPs]M?QNY]C6@UW6p$-RB(F[jO%iiDOAKIQC*]!
%JRB.:YU-j\j^%'Y:r(aXkY*S5M[HcAo-^^]LosqslC;HN_(KSd-\L$uP8=fe(Usg'13)ep(iLHVK2*f7k<dN02N?B?YWs:p%GjHi
%>X4tI,C*iKfeS62kb:b1Ya:?/:a!]a-A"(d5fpCg"-Ah)#0#T1KV_Y%r'l`(&jO9*=U;63`gJ(b>gefY\jX5(-f.8WidmlU@8Vgk
%_<L##Q=rj#9sUgBgds76LD<pCm_7:i$54qDG#VhuBUfe,R-9K.$Z6i9Fs"6Gd6rH0=lPf)";3W(OYtH.ngpR@0$`FFXL'H@.WH[<
%LnK`)_pp'6[L;tpm"P5W!HtNLN4M%uUO+r;4!H6;oF,3T`8aGu>+4KF34Ck^%rUW$lg,9bMR$J1&?&#H!DP0VpYmhMIc47_,#nt"
%.Uh(4d=d<a;M3"U&</jWs2EX(9\u^?@s!oJU<k.7;kBO[[[*ScQKR[pOk5Bh*]m%eb@q+'d%Vp8J2!HnUtr>Y03ulpcqg'1Og-1s
%;qDdW:dQC'E[GI1oR#AN?]-"?bVt\c'nJn8R<G*+?5?&k3<cSIW"?o[aIFqf'MXn,g0El"&dcl_#u\HRE&5O*VIS4/Q>,o-8g`*,
%(CJf8Gfs@'ZQeE[jaG:'Vo<.HM3^t_(fDQR=:ojH7l=bi3!.`2M&6;C,DHKT4:i&HPTb*]*($#".?UP;SM3Y8j62W0*&"-3+YbKk
%R$O=d<tql1e1Y,:a\jUT;+.=g[[sc8<+]UG;T'MIr:NdlQfODnY+UO%m^#P@3c-]I?"0;?7'!(5junD1;c-sK%_GtECIFkMT485o
%C95_b,!c[LUB%VEPE:A=#C"^3Stk&O!M><!/?n,7Ur?H[(jZ;[)u0EE+*A!8cVDQAbn6o"4(&VUO6@im%U*";>';9iEs`t"e"*sq
%_0$Q'_MJ_)+rlPtfi]J``D`uXkH)d884tq9(.Hc_\a'K"+"j>:/uBqnb`')lR!h*)i2A-2d3,?'*$kbF&]bm%/ht,0_<dGUV7@t7
%I@W^/jOFBn&0e/O)-R`B5eb5l'-9VV:g6%>,I^YL^d56-4XiYt8&0bE?h'5PdMCNrK#]$2NHE-jBgKD3*)jYd.`ciU3>0,iQiZ35
%<LkB06r@Z4N&boI_f?Zn(QAeANWa[q"Er*6(=8O"_TNZ0MTkHR\CB],`Z^XB*W].-3IIgKQ%7"RNJV%O!gl)=;^Pr:4i06l4sd7`
%V1b`UOlePeDg5\C`(DNL%077Ec-j7#g5[DS:P&5'(On'N,V:YX"4lI7RC!BRgCTD1V2h)k.f3uM<&ba!MeYS;?:VOq?ou`(#9[MC
%PC.fl6'?8GP6^9\JYFS"G&)M&<e'gBi6p,5Ff>R%2?q5G%N]1M&5S_3SZ9n\[ZHA&8?(s_llXBf`@$Kg6buW7)'[Lk'RG@GP`&12
%>#FG&kQ@<pab=M;WOZ^a]CK0G2ejH:jc0X<(5BjC*1g%R.$)9Y2+#M:b"Z<-0o'1&<MpXo$P4!@*dJ*(>E4Bt\]mU!h>=<cn339+
%3T5u-A13M0E5V%_E=WVUMSK#qAT!:!aQO(,LTq(qc;>1F]^-j-\):@i*V<KFD/hA)E_Rda]u]35MVOScJZ,+sH/qOJG.E5r#g[0;
%>JDR5(DUafKRr,/9!9L)Gq^/j]%e'rN3X#u.PitO5nG=VFc$5-\Q('\$)GKV_%s&NY-d+%Zc=(c);1*eLn`-nm82dWfLG\GXG8GM
%cH&7U#qALu^SoDATXRLH&LM]X'uK<Fm'I%h1lfM#.Q@hK(5q=TX=':--eo`eFm.?h,-4Q@^b_gt8Qcb6a1m98WN+GS'N(m3=r*1s
%A0@2gJH[AZU7f$=K2e+`MgRliH;iLNJsP@T6c!nsd&IE^oD#kBka8C/"/;M?"K9G),)#F;A"4:UVDl*WXP4+>/]g]oN$d1^>;<YZ
%!!RJ;)C-hd(nf$[VM&gsT+oNVEks0!3tW,JI\Wo*2Ad87pg>M_?X['8XV9)Y<K?78pq!5./m=l&gsmul@.Q3.`I\UCOU?bpR>!^:
%TSO<R:doeCrL$'>W_s[tCBRPI<8JjRGd0Xf*D^J-/`M,%UR:K_+tE7K[L!ehRAM9&HjnQe-@+%,]../4DTVjNQ=8LD2.1p0;>(l!
%F6(m>[=j(O_j;bem:)7P[?9c^6JA,L5@Oqb(Bg5T_1;L$$[a,P-rcnWS/9I&Yf'+&+Ve5Q,Sc[XYF<@*F6okMME%QWYT%XsZEkGV
%AO].C(m:^kOfP,kLd*@]6^"+B>ib0j'GF:C'4Qn?j:l.hKgQDT0K$1FZ6QmoUP[$gd\>3h9-#3P"I$8Df>*Qj$Gl#@#dYk%/KoSB
%UmX+kc4\T*ZFN^?el>lf^/pRJ?[\Rs=b*qj+K5`ic&%Pj\iE)(Wp4g>5'7Thd:!r/jPDG*W/e3Z*2QF.A5OC@e<eiQ9f1"Yb\<4`
%O+B&lMa3.Xo-iEl_*mI3RfcY1iVRp,[1l#cdN,V@:FSQ%WqKC;"N1"(*K%s3Cm0#'`H\="#VRJk=/BqLGN^&oij.J!Oh.Lt9aAd^
%H[9DB'$om>2BR9dR#4aWBc+N_pi3ncqM`9@8cqbL[8*rl?PkPF:`<f@nh,OP(T#ug:lK)[0Lo.l'hq/q@R_"XAUZ-s;Iit=0?-Q.
%"NWV$73n"r6C^[*@)B^L^%etAiQ<122('#h+sjUAj<sjo8tfn&$Y-c`>U.K_giA:IMag[qD=C49"CEI1X)8)2pAW#n`t."WF8#,o
%Dn+omO@%H7>/qFP]^.]e.D$Z5"3IJsZS$Z'pDP\L[0t)F)$\Fa4f6Ss1$g3eR^J$Hj4IE)1GZ<),67$8[$2q\M!GPlkG(t>JQA+\
%&C-2%Mreu:nu"lUV\E,JMjoup;U1Y9"H!hCmcD-HOm=arGojXAPT<@R35qh&\3tJ;d0B,P@p.bZ]cr0K+!PJ,O-70<XB36tkdJng
%#uq-^9+H8<=UpK.pBh0n<,IBk9AuL+Ph/:CSZtZ2<(\3aLb5<G7<Nh4;H:Fk>^Gq`d\?@eNWrYd,(`Eef:,[&d7p(<5R!6O'<X1/
%Q)U/qD@oIc9Cm[$_Li0-LM?Jj)^abEMHWnl<p/>(%jGBr+j/I%C7[TPjOfTPE!ZBXl4WVZ'_PP@lfp2m'Ui7#P'TNp&8"?`Kdq?d
%5utW6`Q@T,l1'2O%BQE,e?H;s)>SK`7<&m,m]>^ep!^FM!e2R<'$`su_-FmSWF5fRbY,?#Z&TCf9,\ZjjA#_;F8/O_W!i;%WqD(N
%450Z[Jgf/7R(l$:?\d?k)-]Fs9LI<(PDPHE$Rr#8O^/#Z6\P(`bl`&F4bs>,E<;9j!TNkTi&Jrjc3JJ+ql0\H+Jqe^L8DAP)Nh`7
%#r"f;ZEZBC3nDrInPU4Ia0U;&3d^N=S0Ylhoat]RP..n]TGZZ*mq=R;a%1e3WBH*H1-;-C8]-Y//M@5G@fVq7_2>'1*K\3.j;^Dt
%N*TG-N?7bL8'5CMf'RT%hh-T7B7NfFD^6q@M2gkQ=%YG,0S91.fm[lRO=o='T%tS&(G'UAN*#D;<cZ`T.?[I.O%W:RR>dA_l6qh4
%>Gper-;Pa]?)K93+<;fdJR7\;8Opd*pR^0Q6klP6M4>TH_;O<mN2\oV[&*i(;H;YUKY"34r`qc/56.35M^:-kk9uQ#bVCX2%O,JD
%/"ZpQ<$rg27DgWE?t%E#V(S0PTu2XI6FE)B,CqCJb&G1eZ)C3g`o&^3>!ecX/7H-S^_R2<4SL8)6sBk/19#!;%!VB^-e^i`!R->W
%,i*g_WebY%b#VYB!Ibl@Y&P@Cc*-oV/"Q)\,`Wss:'[69&1<Q>Fn#GMd05aMR9SH?JEVZ##8gm,dO:nc!cO9<Q6]^M?TD%W0-2>B
%S6.<WclXRDln;n>r5]K\MJc+>8eZ&>9HD6PWio.IR]*YcHHJ@H/]&u1<>TOPf?4gs!fBf*nSep]mr`UOQBgMda_42P*V(2LX'\;`
%]15eBQSED'Ak3UZ$Uk@&6sr@`a>_3DQ`5n`FciQe`QX+/QUWI.8:'QTR>L'((WFJl0\%luG8%iFLsL*u?mF**#0b[MCN)_!3A+eT
%Oj^WmjLJ]5+VYg2can7IaLlb(UgO56KXEY?/u1Q;TP0P@5?0HNi29Cl,SbU,oI;>f$:0p6,8PchEX_[Rl1b;?$Cko1l4<",Ri(\@
%)jNKOOVeL&8bKtI`(cAY4fdfFW0T1/@EJCIE#"@pim"ll,adp&[O<=f_)0b#<8<iSbR8Q!Obt)2K/;7QQcO/tO7#_^MkmXS+K<ZC
%-I51J\7.P=Ti;V,f>L(>71CbbUdTME>/7:1^QM&T5a>Q[G_>9uBG;';hH#kK1&1\]KUpA-9,;1\72Rm-H-3r9]?#np0%^\n4S2*$
%RC4&=1`%]%rMYmlO0oo57CYuq3U[i33GkT625cS:fE0]jHj*Ls?B"8\@mIBcR2dJKWS3q%KS._X2l+<PZdRHF[q55/8?/nAFN5(k
%VS4Deb.H>i@nN2#-c_A6cM>;<M5qZ1<Y$NGCC.$oY=;<]e5bS4P.\!!!0r_jR8Z7eVnKe1H!B"d_G_F%MU2sT,W[SDi.WZ7!7-PU
%2T3"#)V*SSGIZu\Zc(BSe0Rr2^$bT6NSO!BR/D7P-"taOV^"/^p:DA`+0X^[cJ5!pVY$@7=pR.s9o>@%\9-7..4E/VUK"rUWM8D3
%<O3Bl9APFQ*iT8^*#R&).5":=XA$#NMAM.J<<4,,&Gq`&1(Gp,W_BF-?k6'Y7*XS_as.ORLDYf7+RLU%W[B)a#?-C-^F6&cKLAo1
%M(F(D1aWqGTMG9l:Ijh=jnKuq3?3nHpDWo9WLCar<N\n-!g/pZIW>J3kgM*jmk;@d3g6UN<$9B!$g(i;:eWlM&EI]H[=Po0W`c>p
%Fmu.obt$2NPY.]eD\Wc>[58Dn,0<7G/p,WE:MRmJ;'f-n?JuGWfcl8hn[]WA-FB?]+&P7*]9Un.Ki<,B&fIZN@Xogd3D4GhY?/=_
%F%;6\h<]ii8p69YSk2RU3Gr)FMr,p;7Vtc_]<l!c4ZP#e$-dXR1iCWM_DnODM`37<daI?iXR^'qBgaVgJWW28(9#V\B4Q+L>m'uq
%nN3dD+;GSj%tS\i.;G^Fb!JO^"@cn,/[LN0Hj.AmE[Z"#:k4+AR,[\B-jGlHfc7T/*CZNaS;</#<P*Ac7LA.8oN$!kN9TE*JV.EB
%?7\O-'$4o1V]hqee"d[X.ich%5QFA]3[nC)n31_35D8NQl:Y0#iPF^*U_PE$Doli,gm%d(nF/JJF0D<)9-aiXbNABFkVp1)A8I@i
%>29:]lj-m=J3eOO>;LP:$U@T4O&BprWrl<u/S?O[jC*npr<TVTWBkYj5WiW<+_)'',Vt;^'&Ao64K>LKZ"G(k5.Y5-]YGd9g&cl)
%D!)f4GNr(j@GGIpab6cha:u03*^4g-h,^Aj1"BIc\4:!`EFc?YBr443\rFsQEV%UXGIHN+rpK,m!o,mED[S%VaQP](UZS._<a];`
%E+6"e5nOGm$gJW`^LSmIXe]d6?j$g^FVg)&X'QB+Ug-Y7Jj<9p,g)htfiZleZm,p:.bZV:IeB(Cg!J`XiFL#(]mNWK;EIH/)G_Dh
%W,$448mA<Y;H,]QAVhrJ,*R,ZSF5nb4RsasT?pC@4-A,c.Jf5];1U@25#1WOaTKu\VC12d]Qe6sgbpu;H1fg*D^f/sWEM"]GX3%S
%O6j".&B&c<?DF%hD=p9U5UWbPUFNV<nu0ugPRL!5N"DpRgNp)g:>sEZa_uKV`tZ)pUVLS^OLC/ZOf'V'U`q[i*_?oBd$&AGR%b^p
%6;Ecc*rubi?JSIU.VT6*M&[6jH)W#/G/]uM-ih!1k':P[Lbd#)-j*N;m&ZD(HnRtp$rdD(m?OH1f*S<K]b=Di9Mp7>8c+.1<m?7Q
%kT`qe>Z>UV6I]cX#:lC@W686&UrH<t,%GZ1*DS=(Y+hB6U10jr?fn2cQtMIhbhb+#\^k8oC)'&chP0/h3j7g0H!MG0c)i'9JIr4I
%@<(dRZq_I)_P;dl"O68dH))?PO/fk>X!S=uD22e_c(cco006+a9#3dfO^=rY.b>s,[`$4`S)TZO09LG#]/^R>h8!W@qfRF#9'7s5
%eh,Kfi>bTQOs&+<\;d(_opZY/<"4-/"@gOXOg2jj<@N6>o#'D;J41*k''9!Vq$_Fn\0XW2)E1(U*9h.JBJb;^dH"7:7D9M"G\"I$
%?LVEgP;t6!k'\g6Cb;q5kt3<V?\CpRFnKj-'3%moF@,G0fuDeq>>@\0En;rsH3Lt1+u]cZ.Y5("K$<\'5:rd<7&VML$C4Paik6BZ
%D1f,-2+fe>/lH,_WZSi$E.,Ot"m&U,6i?tYW0h@"1Krh7n+oak;9j"Mg<JjR[ZeY8:G2!!lFJ>X=2'OF4$j8SF\(&@`7Q8n26M4p
%iaukXP,j*HoTh<pKq$8&6FMr4HH:j(eul/F.Cu0uBbgHG'o-/P"L`7[Mo,4dm"VmW<*3T/D/a9[lE1\.iD_jnJlN*(Qi8-ECQ"0#
%mf#m0<kBb`6YRpZPuHooh>Mji0QcEN\hoYX:g!o%06n+r0$<i0LqB2Op`Xgn04^?XPEi4>$+s.rYZ*O,<ZL/2$5GC!MPcQgF+d3J
%g:$`D9&<Wq12];N:7"#,Tri)$Y]5p\TO(,_?!+5^.l/WAMh\3o_D*p_PY5)+&.V/2Xpbs^f;hrZ.!29?qAD/o`O2kkXj88t[Kt?>
%H+%%=9#[Bd>!I>-[$Oc:6P*0703mKp0&728!q.Usf3AhaClm)#<A'[23T^(^*YK.GZ*(*+Y,(>+X83c\]<'%[M"3>QO^]:DV&63&
%me\Q"LL%T[ZA:67W>7\*fr%Bh*$_D7j9<lr*`[L3Z[A$5MU>D2EYmok)E)jdJJ.'-c#rRW1F5es)?DRS9'IJ=5C>:]_Xmc5HY^;#
%0Su2a+PdnJT`qHN'thAhg/Whb/hYAJ_F+e"lcCd_M6^'<?\5%mKSQ>ZNH&m11fRq&Q'eU=TD&oop`XGa`>^C_1,NMG8]H5BgAP7k
%&\PV!:':/K81p<1_kfbq-n!ZB!AGN&8m6&E1k>3)Pujc9`8D@q4nF9+V,@:j2_mrW*b#GegRY:HH&-4:;HVsV$L.r"e5LBBN4$1`
%8cH[Ql"9M?s$_KIfcu_J%9?UOet]V)XS[pLGESiM)MsgMJ\se+kZ-md-&aaI>1EKe-q?BkH1hTq;'o8r`m/5Q2H^-2WnsFrR9:$P
%4BFbMns-NnENp!jM@?,OaL=3mN1p0QC%a$a-,XJqW9'an,UObN:Jn)sf;L*\NsfpsT'Mi6ALW`k)<ZO?:DLC>@jF7;?H2!0K760j
%nM!"u$\r&`b7A_mA>4*_F4l:U/,-IYT1;HZj"<hljqWJSa'Ltq=2LoUNu7HS7=J,,<"!agpW0Il:rZd9W5XGcl@)++q/s##Gleu\
%Tkph5-JqQ>iN4R6.MBf4b*ete-1djUFS`Ek#*DU%e/4IYlSh!NERZE(T2f#j\Yl/fNbB\FK'lSN-SZT^N\7qQC]%L%66T7sJl?gU
%")H4*bu'?MFWkd'h6uIT=q')Z1M)K*Z_VCo2)_WgdmH*;=^Te^]uQXdB3,jO&.8Y$/%e;bVGl9OEK=!;5=@]*XDfJ`lq=paIWBe,
%Y0(%E[\9Fl-GhlXe\R^p]6$]DmSP>Z3/W-);.l+0:%!h/T_[$2TPLLOgsRXR@9XIA",gA$<<@9h?,QVUFkp&o]/:Ckrm`CGPDNf/
%%`QgQ.dl`s]@F`64c7\Id]N#f`1>PE(eF3QX0N^c^Sf4-TpmO96+;.!n%s4sU-^fJGH-P$r,IH\>b(&&X5ekbBhq-RW/dO.JAgQ'
%<7Si?\ZJfR4dcpZgu29NQp%2[]d'@"0%^TETG/h-CZ8eu7<lu^a(5jq;8NGsg!JNfbJ[YNB3XlaF3eMgr'hLQ:$<74^c`CbDrcd%
%W^7W(Tdo["$<(#%8&#Z<f]XeC?)&=h7mJJn>*i]nEj-MAQ\\iD>k76--\[">O8@j6<`7MFW1ghT,t/*51-*N+9_+(h2.E):rJkW(
%V0RJR,@b,])lL]SUSJi@239S<;8N[Q=1hBCKBJP"<]1Z,cX"lXSm,JgUs!st^J2>OSB4?aC:Mkn4G71IAao<_ap73Z@RHHJ72P$b
%&>0A_Z]4]Sj7,K,F?e2IP5S4$nPY6%Ms>2;I3Q8)6$6u7gPm/K6<fIB2_r-C/j2+4ajD]#W'd['.<Ql7m;0sC[?!Ge.+:PQ_Fnu"
%FOT!/gI;'W0YP:4\S>hU.RWenc)]Tu8=IZV2!@S<3^5Ca`AOi1hHo$dAAHOM;oXdNTFWK^@93XH>'*MAL7#.K`[r2d#*/=Rret&Q
%'kM>+QH'L:3!cESbWuL1%Fl$8m028!CTGjrF4A$+Pe\Od[];IF+icQr^8!Z-C<1gf:H1jQS4PUG"k,%EDPppL'GOQeK`]XUikNG=
%+d:$DXN'`p.,XXKkH8nR"h\C%"!1L&UjFV)h:&JuP]#N@=XIF8ea'P:nt)ilB5[F`ke:WfB_s[%fJM@DB)R;fRFSb2Am&8&BQ3.-
%1)jLHUesG71oa`0+=@n1N\N/=?QuaBcEepSa!=V47m=@1Vqi\]BoFK_P)FQ$Hl4Wc/JH=o"ouK&cBqZ.U1$1'kg%,@Sk^4k+'_/.
%BZ.\Q+(nXbRM$0KBj=mZ[rsY20<o)]os0jB643Lta?bUO1e%E%#qiqV)ARUQOhPR0kT(";i7R;:Jjl9p+\H7k-GrZp5(2%e8@*5:
%$PaEnR2m2&]*,X^Q/#+)oVC,+e^nJ;2:*""A;poTTdW:..Uln$^!Q?`)A])Y9-aomOGZOY#cH].03<uV(!2u8AgeG6&]eiSAJML]
%&S8aH1iuV2KBNBY>YS@s@ug><>5Gb6bVeAiM4.+KfZ=l'I;mZq&;`BO>AdWr%6b!IVT[oQ\`pK.a/+ZZ7ZdW+\Cp?'eMaJ(E^(VW
%(Fg`g=]=WFfB\qY4?iN9aeMr0DS<FJ[cF]40eTVa*6?+Qh!_Ko%rI,CTHo[X^SY0ls07FP7?b3jGXZLA!)9^>`C7UL[u-q(;q2pd
%CEA5E8,2N#a(*NAs743k5PjC$`uk9B`TQp+cd#>#=T>\;qX&4'iA[slD`?Q[X\[8$=!)qap3Q\dB!jfe^URG(CbG+Ue_@.Lp!(J+
%Ap+'i`QtnFBKP-2^\R5sUQ7Y9IfVio-s6~>
%AI9_PrivateDataEnd
