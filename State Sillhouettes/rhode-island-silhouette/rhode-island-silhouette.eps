%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: rhode-island-silhouette.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: M
%%CreationDate: 9/23/2015
%%BoundingBox: 0 0 531 723
%%HiResBoundingBox: 0 0 530.9869 723
%%CropBox: 0 0 530.9869 723
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 96 128 8%%BeginData: 5817 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD25FFFD04A8FD047DFD0452275227522752FD0427F827F8A8FD2C
%FF7D527D52522752FD0827F827F827F827FD1EF87DFD2CFFFD33F87DFD2C
%FF27FD32F852FD2CFF27FD32F87DFD2CFF27FD32F852FD2CFFFD33F8A8FD
%2CFF27FD32F87DFD2CFFFD33F8A8FD2CFF27FD32F87DFD2CFF27FD32F8A8
%FD2CFF27FD32F87DFD2CFF27FD32F8A8FD2CFF27FD32F8FD2DFF27FD32F8
%FD2DFF27FD32F8FD2DFF27FD32F8FD2DFF27FD32F8FD04FF7DFD28FF27FD
%32F8522727F8F827FD27FF27FD37F827FD27FF27FD37F827FD27FF27FD37
%F827FD27FF27FD37F827FD27FF27FD37F827FD27FF27FD32F827FD05F8FD
%27FF52FD32F87D27F8F8F827FD27FF52FD32F8A8FD04F827FD27FF52FD31
%F82727FD04F827FD27FF52FD31F87D27F8F8F827A8FD27FF52FD2FF827F8
%52FD05F8FD28FF52FD30F8FFFD05F827FD28FF7DFD30F85227FD05F8A8FD
%27FF7DFD30F8275227FD04F852FD27FF7DFD31F82752FD05F87DFD26FF7D
%FD31F827FFFD05F827FD26FF7DFD31F852FF27FD05F827A8FD24FF7DFD31
%F827FFFD07F82727A8FD22FFA8FD31F827FF27FD09F827A8FD20FF7DFD32
%F8FFA827FD04F82727F8F8F82727FD1FFFA8FD32F852FFFD05F827F8F8F8
%27F8F8F8FD1EFFA8FD33F8FFFF27FD04F85227527DF8F8F827FD1DFFA8FD
%32F827FFFFFFFD05F87DFF52FD04F827FD1DFFFD32F852FFFFFF52FD05F8
%A852FD04F8277DFD1CFFFD33F8527DFFA827FD04F82752FD06F8A8FD1BFF
%FD36F8FFFFFFA827F87DFD07F827FD1BFFFD34F827FD05FF272752FD08F8
%FD1BFFFD34F8A8FD06FFA827FD04F82727F852FD1BFFFD34F87DFD07FFFD
%06F87D7DFD1CFF27FD33F8FD08FF27FD05F827FD1DFFFD2AF87DFFA87DA8
%A827F8F87DFD07FF27FD07F87DFD1CFF27FD29F87DFD05FF7DF8F8FD07FF
%A8FD08F852FFFFFF522752A8FD15FFFD2BF827F852A8FFFF27F8FFFFFF7D
%A8FFFF52F8F827FD05F8FD04FF27F8F8F8277DFD13FF27FD2DF852FD07FF
%27F8FFFF7DF827FF52F8F827FD05FFFD07F82727A8FD0FFFFD2FF8FD07FF
%F8F87DFFA82752FFFF27F852FFFF7D7D7DFD09F852FD0FFF27FD2DF827FD
%06FFA827F8A8FD04FF52272727FFFF52272752FD09F87DFD0FFFFD2FF8FD
%06FF27F8F827FD04FF27F852FF7DF8F8F82727FD09F8A8FD0FFF27FD2DF8
%27A8FD05FF27FD04F8A8FFFF7D27FF52FD05F827FD09F8FD10FFFD2FF8A8
%FD06FF2727F8F8F827FFFFFF52FD05F827FD0AF8A8FD0FFF27FD2DF827FD
%09FFFD04F8A8FF52FD05F8275227FD08F827FD10FFFD2FF852FD07FF7DFD
%04F87DFF27FD04F852FFFFFD09F8A8FD10FF27FD2DF827FD08FF27FD04F8
%FFFF27FD04F87DFFFF27FD08F852FD10FFFD2FF87DFD07FF27F8F8F827FF
%A8FD05F8FFFFFFA8FD08F827A8FD0FFF27FD2EF827FD07FFF8F8F827A8FF
%27FD04F827FFFFFF7DFD09F852FD0FFFFD2DF82727FD08FF27F8F87DFFA8
%FD06F8A8FFFFFD0AF827FD0FFFFD2AF82752FD0BFFA87DA8FFFF52FD06F8
%27FFFF27FD09F827FD0FFFFD2BF8FD07FF52277DFD07FFFD07F827FFFF27
%FD0AF8FD0FFFFD2BF852FD05FF7DF8F827FD06FF27FD07F827FFFF52FD09
%F827FD0EFFA8FD2CF87DFD04FF27F8F8F8FD05FF52FD08F827FFFD0CF8FD
%0EFFA8FD2CF852FD04FFF8F8F827FD05FF27FD09F8FF27FD0BF8A8FD0DFF
%A8FD2DF8A8FFFFA8F8F8F827FD05FFFD09F827FF7DFD0BF87DFD0DFF7DFD
%2DF852FFFF7DF8F8F87DFD04FFA8FD0AF8FFFF52FD0AF852FD0DFF7DFD2D
%F827FFFF27F8F8F852FD04FFA8FD0BF8FF27FD0AF852FD0DFF7DFD2DF827
%FFFF27F8F8F87DFFFFFF5227FD0AF852FF52FD0AF827FD0DFF7DFD2DF827
%FFFF27F8F8F852FFFFFFFD0CF852FF52FD0AF827FD0DFF7DFD2DF827FFFF
%A8F8F8F827FFFFFF27FD0BF8FFFFFFFD0BF8FD0DFF52FD2DF87DFFFFFF27
%F8F8F8FFFFFF27FD0AF87DFFFF7DFD0AF827FD0DFF52FD2CF827FD04FF27
%F8F87DFFFFFF52FD09F827FD04FFFD0BF8FD0DFF52FD2DF8FFFF27FD04F8
%52FFFFFF52FD0AF8FD04FF7DFD07F827A8FD0EFF52FD2DF87DFF27FD04F8
%27FD04FFF8F8F8FD0427A8F8F852FD04FF27FD06F87DFD0FFF27FD2DF852
%FF27F8F8F827527DF852FD04F852FD04FF52F87DFD04FF27FD05F827FD10
%FF27FD2CF827FFFF52F8F8FFFF7DFD07F8A8FD04FFA87DFD05FF27F8F8F8
%52FD12FF27FD2CF87DFFFF27F852FF7DFD07F827FD0CFFF8F8F827FD13FF
%27FD2CF852FFA8F827FFFF7DFD04F827F8F87DFD0BFF7DF8F87DA8FD13FF
%27FD2CF8A8FFFF277DFFFFFF27272752FFFF52FD24FF27FD2BF827FD33FF
%27FD2AF87DFD34FFFD2AF852FD32FF52527D27FD29F852FD30FF7DFD27F8
%27FD06F852FD2FFF7DFD28F85227FD05F8A8FD2FFF52FD28F8FF52FD04F8
%52FD30FF52FD27F827FF52F8F8F827A8FD31FF27FD26F87DA8F8F8F8277D
%FD32FF27FD26F8A8FD04F827FD33FF27FD23F827277DA827F8F8F8FD34FF
%FD1FF82727A8A8FD06FF52F827FD34FF27FD19F827527D7DFD0CFFA852FD
%34FF27FD16F82727A8FD46FFA8FD13F82727A8FD49FF27FD11F827A8FD4A
%FF7DFD11F852FD4DFFFD0BF827F8FD0427A8FD4BFFA8A82727FD05F82727
%7DFD53FF27FD06F8277DFD57FF27F827F82752FD5AFFA8A8FFA8A8FDFCFF
%FDFCFFFDFCFFFDECFF27F8A8FD5DFF27F8F87DFD5CFF27F8F827FD5CFF27
%F8F852FD5BFFA8F8F8F852FD5AFFA8FF27F8F8A8FD59FF52F8F8A8F8F8A8
%FD58FF5227FD05F852FD58FF27FD07F8FD58FFFD08F827FD57FF27FD08F8
%FD57FFFD05F827F82752FD57FF52F82727FD3AFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-09-23T21:38:46-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-09-23T21:38:46-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-09-23T21:38:46-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>188</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWH/m753u/I35ea&#xA;t5ps7aO7udPEHp28xZUYz3McHxFd9hLXFXzHJ/zmz+YZY+nomkKtdgy3LGnzEy4qhz/zmt+aVTTS&#xA;tDA7fuLv/sqxVCv/AM5k/m0fswaWv/RvIfu/e4qgJf8AnLj853+zfWce37NpF/xtyxVBv/zlV+eL&#xA;A016NNqVWysvv3hOKqD/APOUH56OpRvMx4nrxs7BT/wSwAj6DiqEm/5yN/OuVCh803Cq3XhHAp+h&#xA;hHyH34qgJvzz/OCYMH83akOVK8J2j6eHDjTFUJJ+cH5ryAhvOOsiv8t/cr/xFxiqjJ+an5nSoUl8&#xA;3a1Kh6o+oXTKfoaQjFUHP5888TqUn8w6nIhNSjXk5WvyL0xVAT63rU/9/f3Mu9fjmkbfx3OKvob/&#xA;AJwluLhvOPmONpXKPp8bupYkFkmAUkeIDGnzxV9gYq7FXYq7FXYq7FXYq7FXYq7FXlv/ADk/Hz/I&#xA;vzOtaUWzb/gb+Bv4Yq/P3FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+kv+cIo6+b/Mclfs6fGtP9aYH/&#xA;AI1xV9hYq7FXYq7FXYq7FXYq7FXYq7FXmf8Azkqhf8kPNIALUht2oP8AJu4TX6KYq/PfFXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq+m/+cHoFbXfNU9TyjtbVAO1HkkJ/wCIYq+ucVdirsVdirsVdirsVdir&#xA;sVdirzz/AJyDQv8Akx5rUGlLPl/wMiN/DFX53Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FX1F/zg6B+k&#xA;PNh7+jZgn/ZS0xV9ZYq7FXYq7FXYq7FXYq7FXYq7FWEfnhEkv5Q+bkccgNMuGA3+0icl6e4xV+cW&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV7T/AM45/nX5a/LGHzK2s2l5eS6r9T+px2ixkVtvrHP1GkeP&#xA;iP3y0oDir0nTP+c0L3VfNOl6ba+VUisby6itpuV00twRM4QNHSONQRyrxNa9Kjrir6ixV2KuxV2K&#xA;uxV2KuxV2KuxViH5wRGX8qvN4Bpw0i9k38I4Gcj6eOKvzaxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xVOvJWsxaJ5x0HWpV5RaZqNpeSL4rbzpIR/wuKv06xV2KuxV2KuxV2KuxV2KuxViv5sAn8rPOQG5&#xA;Oh6l/wBQkmKvzVxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ks88p6DpcX5aeb/M+sW6urrbaR5fd6Va/k&#xA;njuJjF3DRW8dWP8AK3H9rFUg8h6XY6t538vaVqAY2N/qVpbXQSvIxTTojhab1Kt2xV+m+KuxV2Ku&#xA;xV2KuxV2KuxV2Ksb/MxS35cea1HU6PqAH02smKvzPxV2KuxV2KuxV2KuxV2KuxV2KuxVfD6Xqp6x&#xA;YRch6hShbjXeldq0xV6T+dUdnoknl/yXo0slz5e0fT472z1GRBGL+bVFFzLeJQfYKlIlFTx4UrWu&#xA;Kon/AJxgGmN+dnl9L+BZgxuDbcxVUnW3keN6eIK/D4Gh7Yq+/wDFXYq7FXYq7FXYq7FXYq7FUi8+&#xA;xrL5G8xRP9l9MvFangbdwcVfmRirsVdirsVdirsVdirsVdirsVdirsVew6N5Hm1n/nGzW/M91deu&#xA;/l/VI10i3oS9vExjW7jDH/dcpukk4DYFOX7TYq8t0HXNS0HWrHWtMl9HUNOmS5tZKBgJI25CqnYj&#xA;bcHrir9DPyn/ADY8u/mD5btL2zu4BrQgQ6tpStSWCcACSkbEv6XP7D7gjvWuKs5xV2KuxV2KuxV2&#xA;KuxV2Kpb5nieby1q0MY5SSWVwiLsKlomAG+Kvy9xV2KuxV2KuxV2KuxV2KuxV2KuxV2Kvof/AJxz&#xA;sLLzv+W3nf8ALC61NdOn1GS2vtMHJfUeVfjdljO7orWkXqcd+JxV8+XFvNbXElvOjRzws0csbCjK&#xA;ymjAjxBxVkNlpt1pflWz856dqs1rqi6pJYww2waOSH0YI5hP9YRwULmUqq8d+LGu2Kvbvy6/5y+8&#xA;16MlrZ+fbB9W06ZeUGqwoIbv0wzJz4nhDOoZCtRxNQasTir6s8readB806Hba3oV2l7pt0KxypUE&#xA;EbMjqaMrKdip3GKprirsVdirsVdirsVQurf8cq9/4wS/8QOKvy3deLsvWhIr8sVW4q7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq9g/5xW1Lyfpv5rxXvma6gslisrj9FXN0/pRLesUQcnJCCsDSgczSvT4uOKvXv&#xA;+ctfy0sdc0G088+W7M3uqwSrb6pLYj1RLaMjFZpBHyr6TKq8v5W32Aoq+Y/Kfmq78s38iXNlHqOk&#xA;3YVNX0O8DCC5iU1Wv7UciVrHKvxIemxIKr0j/nJ/UtGvtT8ky6DEttoT+WrWXTbMABoYnmmARtyf&#xA;hCBevUHFUJ/zjp+dMv5e+ZfqOpys3lTVnVb9N2FvL9lLpF9uklOq+JVRir7ygnhuIY54JFlglUPF&#xA;KhDIyMKqysNiCNwRiq/FXYq7FXYq7FVs0Uc0TxSDlHIpR13FQwoRtir8riSSSep3OKtYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FX6I/kv8AlX5S8i+W4ZtEWWW81a2t5dQv53YvMQhdaJXhGqmRqKo+Zbri&#xA;qh+dn5Laf+Zun6XE9ythfabdLILwx+ozWr7TwihXrsy+4964q+GvzF8yyeYvN9/fCIWtlE/1TTLF&#xA;QFS2srb91bwKg2XhGorTq1T3xVU8veQNa80aU0/lmCTVNUtJOGoaVCOU6RPT0riNBu8ZaqPSvAgF&#xA;tnGKv0C/Kzy7f+XPy58u6JqDMb+xsYUu1dg5SUryeIMpKlY2YotD0GKspxV2KuxV2KuxV2KvysZW&#xA;VirCjA0I9xirWKuxV2KuxV2KuxV2KuxV2KvT/wAiV/J5tW1cfmeE/RotFaxZ2ul/eiQBgv1T94WK&#xA;nb6cVfQnkX8jP+ca/NSXGr+WJm1W3kgeF7T60zfVTcI0YdoZQJo5B8RjMncch0BxV4vo/wCSdrbf&#xA;85GW3kXWbG8Hl17qea2Mhq9xYwxSTQuZYwqlZCiq5WhG42YYq+3577S9P+qwXFxBafWHW3sopHSP&#xA;1JKfDFEpI5NQbKuKsI/Pb8x7v8vvy8u9csI0k1OSWK008SqWjEspJLOAVrxjR2HvTFX56XKX0i/p&#xA;C4jkMd1LIBcspCSSrRpAGpQsvqKWA6VHjir0T/nHFvNCfnB5fby/HJI/rhdTCV4Cwba5aX9niqGo&#xA;r+1xp8VMVfeHnDzLaeV/K2q+YbtecGl2styYuQQyNGpKRhjWhkaij3OKvLfIn/OWP5Z+ZZ7ex1Fp&#xA;fLuozL8f18p9UDgVKi6BC022aRUrir2OyvrK+t0ubK4iuraQVSeF1kRh12ZSQcVV8VdirsVdir8s&#xA;b1St5Op6iRwf+COKqOKuxV2KuxV2KuxV2KuxV2KuxV7L/wA4k6pc2f50afaxMRFqVrd21wo6FEha&#xA;4Ff9nAuKvu4qpYMQCw6HuK4q+R/+c0vM+hXGvaBo9nPL+n9FEs11w2jiS6EbxjlWol/dBth0I36Y&#xA;q9r8y+TNP/OD8n9JsZtWAe7hs75NWgQTKLlI6SExhowa8nUrUcT8qYq8p/NN/wAv7ay0n/nH7TtK&#xA;ebWYo7eLTtckVVW31C44yRu3EM5Fyzfv2Gyhq0NNlU4/Li88of8AOPnke7tPOup2z+bNSmN5LpVh&#xA;S4uvTCBYYdgtB8LNycqlSaHxVYH+Yn/OQeq+e/yX12K6tLaxe71u2sre2gZy4sQjXY9QsTydZLdV&#xA;LAKDX7IxV854qi9O1XVNNuFuNOvJ7K4X7M1vI8Tj5MhU4q/SH6r5n/5Vj9V9eT/FH6E9L6zX979f&#xA;+qcfUr/N62/zxVlGKuxV2KvyzvyDfXBHQyuR/wAEcVQ+KuxV2KuxV2KuxV2KuxV2KuxV6b/zjfPp&#xA;sH5yeXZb29msn9cx2jQxCQSzSo0SwyNzUxpIHKlgreBABLBV+g+KvHvzr/5x78meeZZ/M15fy6Lq&#xA;traMJ76MI0DxwqWV542AJ4DbkrD4duwoq+Pfy4/Nbzn+X+qrd6DestqzhrzTJCWtbgAioePoGoKB&#xA;1ow7HFX17+evn/QvJflvSfPlroNnd+b74R2ui3V7Cpmto5YnldmYUkoiuy8VYbv4VxV8TAa/5r8y&#xA;KtZNS17WroKCxHqTXFw9BUmgHJm+QxVmX5h/lX5r/L7yho6+ZES2vdavLmX6jHIkvppaxxKhd4+S&#xA;cmM7fZY7Yq84xVO/JHlmfzR5v0fy9DJ6T6pdxWxmpX01dhzelRXitWpir9MvqUP1H6lv6Ppej1+L&#xA;jx49fGmKq+KuxV2Kvytdmd2djVmJJPucVW4q7FXYq7FXYq7FXYq7FXYq7FXqn/OOlv57g/MnR9R8&#xA;t6Q99bfWY4NSunthLDDayNxnb6w6MIG9Pl8SsG7b14lV+gGKvOv+ciJdRi/JbzU2n8/XNqqP6YJb&#xA;0HmjW4rT9n0S/L2rir41/I78q9Q/MHztaWht3Og2ciT63d0IjWBTX0ue3xzU4KBv1bopxVnf/OYH&#xA;5gxa350tvKdlx+peWlYTyLvzu7hULrsaUiRVX/W5Yqwz/nGyCym/OzywLyVIokmmdDIQA0q28hiU&#xA;V25NJxA9/fFX0L/zmbdeVE/L/T7bUkZ/ME11z0BkG6iPj9aZ2/336bqCO7FPDZV8W4qjtD1rUND1&#xA;mx1jTZfRv9PnjubWSlaSRMGWoOxFRuO+Kv0L/wCVmf8AIGf+Vh/V4/W/Q/6R+qcj6f1j0q+ly68f&#xA;V+Hx+nFWd4q7FUPqMskOn3MsZ4yRxO6NsaFVJB3xV+Wr8eR4/ZqafLFVuKuxV2KuxV2KuxV2KuxV&#xA;2Ks5/Jvzd5Z8r+eLW980aXbar5fuEa21CG6to7sxK5DJPEkgIDxyKpJArx5AbnFX6J6fNYz2FtPY&#xA;FGsZokktWiACGJ1DIVp2KnbFXgf/ADkb/wA5F6x5G1q28seVkhOqiOO61K7nX1FiRmqkCpUDk6rV&#xA;ieikU33Cr1v8tvNieePy90fzDPAinVbX/TLcL+69VS0M6qrF/g9RGoCTt1xVAeffN3lP8qfIl1qs&#xA;dlb2dtETHp2mWsaQJPdyAlI1WMKorxLM1NlBOKvzv1jVb3WNWvdWv39W91CeS6upKU5SzOXc0Hiz&#xA;YqreWoZp/MelQw3BtJpby3SO6VijRM0qgSBxQqVO9cVfTP8Azmd5t8oX1rYeW4pufmrR7tZZoTDI&#xA;PTtrm3LtxmICHkfSJCk/euKvlTFXYq+tf0q3/Qj/AKvP956H1SlRWn6X9Gn/ACL3+WKvp/FXYqln&#xA;mm4a28s6vcKeLQ2VxIGO9CsTGv4Yq/L7FXYq7FXYq7FXYq7FXYq7FXYq7FX3j/zil5zvPMn5UW9v&#xA;etzudBnbS1kPVoI0R4CabfDHJ6Y/1cVfKH/OQHmGDX/zh8z38BrBHdCzjI3BFlGtsWB7hmiLD54q&#xA;+4vye0GDQfyu8r6ZDWkenwTSE7/vbhfXl+j1JGpirwL/AJzjv5/X8o6eHpAEvZ2jBO7kworMPYV4&#xA;/M4q+WMVVIJBHPHIeiMGNOuxrir6Y/5yy8u+Xdb8v+X/AM1NKvnpq0dvZx2jx09WGSOSeOUdGRkF&#xA;VYNt06U+JV8x4q7FXuX+I5f+hQvqFfh/xN+jv9j6X1/w/mxV9xYq7FWPfmLK0P5feZ5lNGj0m+cH&#xA;rQrbOcVfmZirsVdirsVdirsVdirsVdirsVdir7N/5wr0XULTyFq+p3CFLTUr8fUqgjmtvHwdwe68&#xA;yV+anFXzj+enkO78lfmXq2myrSzu5X1DS3BrytLiRjH3rVGDRmvdT2xV9x/k3r41/wDK3yzqnoPb&#xA;mSxiheKQcTztq27MB/K7RFk/ySMVfAH5gya1H5v1jTNW1K51ObS7+7tRPdOzsTHOyu1CWClmWpA2&#xA;xVjmKpn5a8u6t5k1+x0LSYfX1HUZVgt4+1W6sx3oqirMewBOKvsT/nJDybpWm/8AOPNhpU156Z8s&#xA;nT0sX9ME3EsMRtOB3+HmsjOT7Yq+KMVdirJ/8TN/yrX/AAx2/TP6S/6dfR8f4Yq/S3FXYqxb81XZ&#xA;Pyv84OuzLompEfMWkmKvzUxV2KuxV2KuxV2KuxV2KuxV2KuxV9k/kx5t1a2/5xT1S80cC31Py5Bq&#xA;iW05AIDJyu/WAYMpKCfuKVG+KvmPzB5i/ML8ztfiu79J9e1qOBbdfqlqvqGJGZhWK2jUfakO/HFX&#xA;275T/Mzy5oPlvyToPmt08u+ZNU0+CKLRpV9NovRjEYMiqONuj8PgWTj/AC9Vair4m/OI6S/5peaL&#xA;jSdQi1TT7vUZ7uG9tzyib6y/rOqt0bg8hTkNjSo2xVm2nf8AOKH5pX8Hl+9tls5tN1uKG4nuY5gD&#xA;ZRTqr1njmELsyo/SLnuCPCqqe+TPI2vflB/zkd5c0R0g19tTQCCaFWR0tLsyQPccDy9N4RE7MKsO&#xA;AO++yr6087eT9H84+V7/AMuauhayv4+BddnjcHlHKh/mRwGH47Yq/NfzDotzoev6nol0ytc6Xdz2&#xA;U7Jupkt5GiYr7VXFWSflJ+W+pefvOdho8EE7ab6qNq95CKCC1BrIxkYMisVBCV6t2OKvsb/oVf8A&#xA;JH6j9V/QcnPr9a+t3XrVpTr6nD6ONMVetYq7FWHfnLK0X5T+bmBpXSbtWp/K0LKw+lScVfm5irsV&#xA;dirsVdirsVdirsVdirsVbAJIAFSdgMVffXnKz1XRv+cc7qw0PyyItTu9GjtbjQbCI1hkvoliuyI4&#xA;g7M0fquxO5JFSepxVJf+cffym1/yT+WOp38cf1Tzx5gtmkjt72npW8kSyiySRQOS7yBpQd+1ARir&#xA;5Mu/K35pea9dvby40nVdX1aS7a2v7kwTSlbpTxMUjhSqFOnGoCjwGKs50r/nFj8zF84aHpGuac8O&#xA;k6iyPf6naOk8dtEBzmR3FVSVR8K1+Et9ksMVfc9lZ29lZwWVsnp21tGkMEdSeKRqFUVO+wGKqb6T&#xA;pUmpRapJZQPqcEbQQ3zRIZ0ic1aNZSOYUnqAaYqu1CW8i0+5lsoRcXkcTtbW5YIJJQpKIWNAvJqC&#xA;pxV8d+Uv+cTPzJ8wa2ms+c5LfTba4vPX1O3km9S7mRpOcpX0A8alwTSrgjwxV9gaRo2k6Np8WnaT&#xA;Zw2NjAOMVtbosaKP9VQN/E4qjMVdiriQBU7AdTiryP8APLzz5Svvyh84W+k65Yahdw2gint7S6hm&#xA;lj9WdIfjSN2Zd2pvir4HxV2KuxV2KuxV2KuxV2KuxV2Kvpz/AJxQ/Jfyd5j0qXzrrq/pG5sb9ray&#xA;05ifq8bwpHL6ky0HqN+8FFJ406gnoq+uMVdirsVdirsVdirsVdirsVdirsVfJ/8Azmb5781WWuab&#xA;5RsruW00O608Xl5HCSn1mSSaWL05GG7IixA8K03qR0xV8t4q7FXYq7FXYq7FXYq7FXYq9r/Iv8v7&#xA;bWPy9/M3zFf8vq1pos1pagAEGZF+vFt+8bWsX0McVeMQQTXE0cEEbSzysEiiQFmZmNFVQNyScVfo&#xA;T+QH5b3fkD8ubXSb8j9K3kr6hqUakFY5pkRfSBGx4RxqrEbVrTbFXo+KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KvmH/nOC601dI8rWjW6PqctxcyxXX7ccEaIrx/KR5FP+wxV8k4q7FXYq7FXYq7FXYqyHyx+X&#xA;vnfzTKI/L+iXmojvLFE3pLXpylaka9O7Yqzaw/5xd/O27mWP9AC3jLBWnnurZEWvcj1C5H+qpxV6&#xA;j56/Jr83fL35IaT5U8vpDexRTXN15qt9LJ9a5Z3DQUDLHJOsarxYD4iePwkLsqx3/nDnyBpet+b9&#xA;S8yaiFlfy0Ifqdo61pc3PqBZmrt+6WFuP+UQeq4q+zsVdirsVdirsVdirsVdirsVdirsVdir55/5&#xA;zR0jRLjyFpepXFxHDrFhe8LCJj8c0VwtJ0RR4cEcnoONO+KvjHFXYq7FV0cbyOscal5HIVEUVJJ2&#xA;AAGKvU/J/wDzjJ+b3mXhL+if0NZv/wAfWqsbbp/xTR7jft+7p74q9w8l/wDOFvlSxaO482arPrEo&#xA;ozWVqDa29e6s4LTOPdShxV7PpP5W/ltpEUMen+WNLg9CnpS/VIXlBHRjK6tIze5auKsoACgACgGw&#xA;A6AYq7FXYqgdN0HQ9MnvLjTdPt7KfUZfXv5beJImnl/nlKgF23O5xVHYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq8c1/8A5yw/J/SLm6tUvLrUp7UshFnbsyO6EqVSSQxo24+1XiexxV8Zand+cPzA813V4kN7&#xA;rWr30jyLBEsl1KsZYkIoUEhEBoKAAYqzbRf+cWfzq1N4ueiJp0EtP9IvbmBAoP8ANGjyTD/gMVen&#xA;6F/zg+5tw+veaQlwQeUFhbc0VuxEsroWH/PMYqyCx/5wl8hpA4v9e1S4nP8AdvB9XgQbftI0cxb6&#xA;GGKvQPyz/wCce/y9/L68bUdNhmv9XIpHqN+ySSRAijCFUSNErvvTlTblTFXpeKuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV5Qf+cW/yTIvK6E3K7YsGFzcD0a0NIQJOKgEV3B8Om2Ks78n&#xA;+R/Kvk7SV0ry5p8VhaDd+AJkkb+eWRqvI3ux9htiqeYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYqxq4/MryJbebv8IXOs28HmPjGy2EpaMt6oBjVXYCNnYEUQNy9s&#xA;VZLirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir4Q/5yz1PSb7847xd&#xA;PB9Wztbe21B+zXKAseP+rG6L8wcVfZf5Zy3c35ceVJr2R5byTR9Pe5llYvI0rWsZdnYklmLVqTir&#xA;JMVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVfOn/OT35+615Ruk8neV2Nrq&#xA;08Mdze6sKFoY3ZuMUKkH42C1LHop23NVVfM/5jfmPcee7jTdT1PToIPMFtb/AFbVNUg+D6/wIEMk&#xA;sQAVXVPhJHX2AChV9/flt5p0rzT5F0XW9Lotrc2sYMI/3TJGPTkhOw3jdSv49MVZLirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir4Z/5yv0rWZvzquuNhOy3ltajT2VGb6wFhVW&#xA;MdB8XF6qaeGKsf0j/nGv869Uso7yDy1LDDIKot3Nb2sv0wzSJKv+yUYq+of+cZ/yr86/l95f1S38&#xA;y3MIGpTRT22lwt6ot2RSsjvIPhLSjgCFqKKN99lXsuKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kv8A&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.1.0.843</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">pattern</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:D63F55FF5C62E511BF3BCEBF3C6C05A1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:D63F55FF5C62E511BF3BCEBF3C6C05A1</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:04a782ef-4616-4797-81b1-f92fa43baa72</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:85c60700-7b5c-4d37-a5ea-e96bd909dce6</stRef:instanceID>
            <stRef:documentID>uuid:04a782ef-4616-4797-81b1-f92fa43baa72</stRef:documentID>
            <stRef:originalDocumentID>uuid:04a782ef-4616-4797-81b1-f92fa43baa72</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:D63F55FF5C62E511BF3BCEBF3C6C05A1</stEvt:instanceID>
                  <stEvt:when>2015-09-23T21:38:46-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -723 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 723 li
530.987 723 li
530.987 0 li
cp
clp
[1 0 0 1 0 0 ]ct
470.92 432.484 mo
472.229 434.289 474.333 437.115 475.837 439.371 cv
477.341 441.627 478.244 443.311 478.634 445.596 cv
479.025 447.882 478.905 450.769 478.093 453.986 cv
477.281 457.204 475.778 460.753 474.875 463.068 cv
473.973 465.384 473.672 466.467 474.093 467.188 cv
474.514 467.91 475.657 468.271 477.1 467.971 cv
478.544 467.67 480.289 466.707 482.033 465.835 cv
483.777 464.963 485.521 464.181 487.446 463.881 cv
489.371 463.58 491.475 463.76 492.648 463.009 cv
493.821 462.257 494.062 460.573 494.091 459.37 cv
494.122 458.167 493.942 457.445 494.874 456.332 cv
495.806 455.22 497.851 453.716 499.715 452.724 cv
501.58 451.731 503.264 451.25 505.128 450.618 cv
506.993 449.987 509.038 449.205 510.632 448.122 cv
512.226 447.04 513.369 445.656 513.94 444.303 cv
514.511 442.95 514.511 441.627 514.751 440.334 cv
514.993 439.04 515.474 437.777 516.316 436.785 cv
517.158 435.792 518.361 435.071 520.285 434.59 cv
522.21 434.108 524.856 433.868 526.53 433.688 cv
528.203 433.507 528.902 433.387 529.251 432.905 cv
529.601 432.424 529.601 431.582 528.981 425.809 cv
528.361 420.034 527.12 409.328 525.988 398.953 cv
524.856 388.578 523.833 378.534 523.142 370.655 cv
522.451 362.776 522.089 357.062 521.639 354.055 cv
521.188 351.047 520.646 350.747 519.774 349.845 cv
518.902 348.942 517.7 347.438 516.586 345.814 cv
515.474 344.191 514.452 342.447 514 340.432 cv
513.549 338.417 513.669 336.131 513.94 334.207 cv
514.21 332.282 514.631 330.718 515.504 329.064 cv
516.375 327.41 517.699 325.666 518.466 324.012 cv
519.233 322.358 519.443 320.794 519.157 319.366 cv
518.872 317.937 518.089 316.644 518.134 314.87 cv
518.179 313.095 519.052 310.84 519.593 308.78 cv
520.134 306.72 520.345 304.855 520.496 303.232 cv
520.646 301.608 520.736 300.224 520.36 299.232 cv
519.984 298.239 519.142 297.638 517.593 297.247 cv
516.044 296.856 513.79 296.676 509.383 295.849 cv
504.978 295.022 498.422 293.548 494.904 292.542 cv
491.386 291.534 490.905 290.992 490.664 290.391 cv
490.423 289.79 490.423 289.128 489.761 288.767 cv
489.1 288.406 487.777 288.346 485.641 287.985 cv
483.506 287.625 480.559 286.963 478.514 286.001 cv
476.469 285.039 475.327 283.775 474.634 283.625 cv
473.943 283.475 473.703 284.437 473.373 285.76 cv
473.042 287.083 472.621 288.767 471.838 291.745 cv
471.056 294.722 469.914 298.992 468.921 303.022 cv
467.929 307.052 467.086 310.841 466.576 313.607 cv
466.064 316.374 465.884 318.118 465.673 321.216 cv
465.462 324.313 465.222 328.764 465.131 332.403 cv
465.042 336.042 465.101 338.869 465.522 340.463 cv
465.943 342.056 466.725 342.417 467.687 343.47 cv
468.65 344.522 469.792 346.267 470.333 347.92 cv
470.875 349.575 470.815 351.138 470.033 352.432 cv
469.251 353.725 467.748 354.747 466.605 356.07 cv
465.462 357.394 464.68 359.018 464.379 360.07 cv
464.079 361.123 464.259 361.604 464.68 362.025 cv
465.101 362.445 465.763 362.807 466.244 364.852 cv
466.725 366.896 467.026 370.626 467.116 373.572 cv
467.207 376.52 467.085 378.685 466.514 379.497 cv
465.943 380.309 464.92 379.768 463.507 379.497 cv
462.094 379.227 460.29 379.227 459.568 379.557 cv
458.846 379.888 459.207 380.55 459.658 381.542 cv
460.109 382.534 460.651 383.857 460.846 385.616 cv
461.042 387.376 460.891 389.571 461.357 390.805 cv
461.824 392.037 462.906 392.309 464.109 392.97 cv
465.312 393.631 466.635 394.684 467.583 395.601 cv
468.53 396.519 469.101 397.3 468.875 398.684 cv
468.65 400.066 467.627 402.052 467.056 403.525 cv
466.485 404.998 466.364 405.961 466.71 406.878 cv
467.056 407.795 467.868 408.667 468.063 409.6 cv
468.259 410.531 467.837 411.524 467.703 412.637 cv
467.567 413.75 467.718 414.982 468.544 416.065 cv
469.372 417.147 470.875 418.08 471.717 418.787 cv
472.559 419.493 472.74 419.975 472.063 421.207 cv
471.386 422.44 469.853 424.425 469.131 425.868 cv
468.41 427.313 468.5 428.215 468.8 429.056 cv
469.101 429.898 469.612 430.68 470.92 432.484 cv
cp
368.92 472.129 mo
369.8 471.579 370.883 470.738 371.71 470.196 cv
372.538 469.655 373.109 469.414 373.831 469.655 cv
374.552 469.896 375.424 470.617 376.236 470.948 cv
377.048 471.279 377.799 471.219 378.972 470.692 cv
380.145 470.166 381.74 469.174 383.393 468.001 cv
385.047 466.828 386.761 465.475 387.98 464.903 cv
389.198 464.332 389.919 464.543 391.272 465.535 cv
392.625 466.527 394.611 468.302 396.28 469.084 cv
397.949 469.865 399.302 469.655 399.979 469.265 cv
400.655 468.873 400.655 468.302 400.76 467.068 cv
400.866 465.836 401.076 463.941 401.904 462.393 cv
402.73 460.844 404.173 459.641 405.091 458.889 cv
406.008 458.138 406.399 457.836 406.594 456.363 cv
406.79 454.89 406.79 452.243 406.925 450.003 cv
407.06 447.762 407.332 445.928 407.587 444.665 cv
407.842 443.401 408.083 442.71 409.181 442.153 cv
410.279 441.598 412.233 441.176 413.707 441.102 cv
415.18 441.025 416.172 441.297 417.044 442.063 cv
417.917 442.83 418.668 444.094 419.872 444.695 cv
421.075 445.296 422.729 445.236 423.721 444.845 cv
424.713 444.454 425.044 443.732 425.42 442.815 cv
425.796 441.898 426.217 440.785 426.939 440.063 cv
427.661 439.342 428.683 439.012 430.082 439.146 cv
431.48 439.282 433.254 439.883 434.562 440.507 cv
435.871 441.131 436.712 441.777 437.57 442.462 cv
438.426 443.146 439.298 443.868 439.69 444.694 cv
440.081 445.521 439.991 446.454 439.78 447.469 cv
439.57 448.483 439.239 449.581 439.208 450.529 cv
439.178 451.477 439.449 452.273 440.081 452.709 cv
440.712 453.145 441.705 453.221 442.381 453.032 cv
443.058 452.844 443.419 452.394 444.343 450.95 cv
445.268 449.506 446.757 447.07 447.418 445.582 cv
448.081 444.094 447.915 443.552 447.253 442.68 cv
446.591 441.808 445.434 440.604 444.577 439.537 cv
443.719 438.47 443.164 437.537 442.908 436.673 cv
442.652 435.808 442.697 435.011 443.02 433.545 cv
443.343 432.079 443.945 429.943 444.772 428.049 cv
445.599 426.154 446.651 424.5 447.824 422.981 cv
448.997 421.463 450.291 420.08 451.162 418.546 cv
452.035 417.013 452.486 415.328 452.921 413.013 cv
453.358 410.697 453.779 407.75 454.034 406.021 cv
454.29 404.291 454.38 403.78 453.989 403.134 cv
453.598 402.487 452.726 401.705 451.884 400.923 cv
451.042 400.142 450.23 399.359 449.944 398.427 cv
449.659 397.494 449.899 396.412 450.019 394.246 cv
450.14 392.081 450.14 388.833 449.869 386.607 cv
449.598 384.383 449.057 383.18 448.787 381.767 cv
448.515 380.353 448.515 378.729 448.666 376.864 cv
448.816 375 449.117 372.895 449.508 371 cv
449.899 369.105 450.38 367.422 450.23 366.279 cv
450.08 365.137 449.297 364.535 448.094 363.151 cv
446.892 361.768 445.268 359.603 444.426 358.129 cv
443.583 356.656 443.524 355.874 443.854 354.25 cv
444.185 352.626 444.907 350.16 445.328 347.754 cv
445.75 345.349 445.869 343.003 446.11 340.567 cv
446.35 338.131 446.711 335.605 447.403 334.222 cv
448.094 332.838 449.117 332.598 450.831 332.207 cv
452.544 331.815 454.951 331.274 456.605 330.777 cv
458.258 330.282 459.162 329.831 459.748 328.763 cv
460.333 327.695 460.605 326.011 460.83 323.966 cv
461.055 321.921 461.236 319.516 461.041 317.531 cv
460.845 315.546 460.274 313.982 460.078 312.253 cv
459.882 310.524 460.063 308.629 460.124 307.066 cv
460.183 305.502 460.124 304.27 459.582 303.638 cv
459.041 303.006 458.018 302.976 456.951 303.758 cv
455.883 304.54 454.77 306.134 453.447 307.502 cv
452.125 308.87 450.59 310.013 448.019 311.246 cv
445.448 312.479 441.839 313.802 439.297 315.065 cv
436.756 316.329 435.284 317.531 434.095 318.764 cv
432.908 319.997 432.005 321.26 431.329 322.479 cv
430.652 323.696 430.201 324.869 429.359 325.5 cv
428.517 326.132 427.284 326.222 426.066 326.914 cv
424.848 327.605 423.645 328.899 422.789 330.342 cv
421.931 331.786 421.419 333.379 421.119 335.62 cv
420.818 337.86 420.728 340.747 420.563 342.612 cv
420.397 344.477 420.157 345.319 419.464 346.477 cv
418.773 347.634 417.63 349.108 416.336 351.469 cv
415.043 353.829 413.6 357.078 412.397 360.265 cv
411.195 363.452 410.232 366.58 409.255 368.956 cv
408.278 371.331 407.285 372.956 405.841 374.715 cv
404.398 376.474 402.503 378.368 400.82 381.03 cv
399.135 383.691 397.663 387.12 396.85 390.668 cv
396.039 394.217 395.888 397.886 395.813 401.163 cv
395.738 404.441 395.738 407.328 395.632 408.998 cv
395.527 410.667 395.317 411.117 394.354 411.013 cv
393.391 410.907 391.677 410.245 390.354 409.84 cv
389.031 409.434 388.099 409.283 387.167 410.021 cv
386.235 410.757 385.302 412.381 385.272 413.629 cv
385.242 414.877 386.114 415.749 386.851 416.486 cv
387.587 417.223 388.189 417.824 388.189 418.786 cv
388.189 419.749 387.587 421.072 387.618 422.185 cv
387.648 423.297 388.309 424.199 388.49 426.154 cv
388.67 428.108 388.37 431.116 388.309 433.281 cv
388.25 435.447 388.429 436.77 389.031 438.484 cv
389.632 440.198 390.655 442.304 391.196 443.867 cv
391.738 445.431 391.798 446.453 391.226 447.235 cv
390.655 448.018 389.452 448.559 387.948 449.461 cv
386.445 450.362 384.64 451.626 383.016 452.258 cv
381.392 452.889 379.949 452.889 379.287 452.137 cv
378.625 451.385 378.746 449.882 378.596 448.769 cv
378.446 447.656 378.024 446.935 377.333 446.694 cv
376.641 446.453 375.679 446.694 375.047 447.416 cv
374.416 448.138 374.115 449.34 372.22 451.114 cv
370.326 452.889 366.837 455.234 364.492 457.009 cv
362.146 458.783 360.943 459.986 360.341 461.099 cv
359.74 462.211 359.74 463.234 360.281 464.046 cv
360.823 464.858 361.906 465.46 362.657 466.753 cv
363.409 468.046 363.83 470.03 364.447 471.219 cv
365.063 472.406 365.875 472.798 366.62 472.865 cv
367.364 472.933 368.041 472.678 368.92 472.129 cv
368.92 472.129 li
cp
337.651 456.212 mo
337.696 454.482 337.756 451.656 337.425 448.949 cv
337.094 446.243 336.373 443.657 336.252 441.371 cv
336.132 439.086 336.613 437.101 337.305 436.318 cv
337.997 435.537 338.899 435.958 340.824 436.439 cv
342.749 436.92 345.696 437.462 347.44 437.372 cv
349.184 437.281 349.725 436.56 349.485 435.657 cv
349.244 434.755 348.221 433.673 348.041 432.439 cv
347.861 431.206 348.522 429.823 348.883 428.65 cv
349.244 427.478 349.303 426.516 348.281 424.681 cv
347.258 422.847 345.154 420.14 343.679 417.493 cv
342.207 414.848 341.364 412.261 341.394 409.795 cv
341.424 407.329 342.327 404.983 343.379 401.796 cv
344.431 398.607 345.634 394.578 346.146 391.149 cv
346.657 387.722 346.477 384.895 347.289 381.917 cv
348.101 378.94 349.905 375.813 351.709 373.527 cv
353.513 371.241 355.318 369.798 357.243 369.527 cv
359.167 369.257 361.212 370.159 362.566 371.843 cv
363.918 373.527 364.581 375.993 364.941 378.729 cv
365.302 381.466 365.363 384.474 365.272 386.398 cv
365.182 388.323 364.941 389.165 364.31 390.548 cv
363.678 391.932 362.656 393.856 362.144 397.194 cv
361.633 400.532 361.633 405.284 361.603 409.014 cv
361.573 412.742 361.513 415.448 362.114 417.464 cv
362.715 419.479 363.979 420.802 364.851 421.884 cv
365.723 422.967 366.204 423.809 365.813 425.012 cv
365.422 426.215 364.16 427.778 363.077 429.252 cv
361.995 430.726 361.091 432.109 360.912 433.793 cv
360.731 435.478 361.273 437.462 362.205 439.206 cv
363.137 440.95 364.459 442.454 364.76 443.958 cv
365.061 445.462 364.34 446.965 362.806 447.656 cv
361.273 448.349 358.926 448.229 356.641 448.258 cv
354.356 448.288 352.13 448.469 350.716 449.762 cv
349.303 451.055 348.702 453.46 348.416 455.189 cv
348.13 456.918 348.161 457.971 347.905 458.603 cv
347.649 459.234 347.108 459.444 346.372 459.595 cv
345.634 459.745 344.703 459.835 344.25 460.783 cv
343.8 461.73 343.831 463.534 343.409 464.993 cv
342.988 466.451 342.116 467.564 340.988 468.646 cv
339.861 469.729 338.477 470.782 337.229 470.933 cv
335.981 471.083 334.869 470.331 334.251 469.263 cv
333.635 468.195 333.515 466.813 333.997 465.64 cv
334.477 464.467 335.56 463.504 336.251 462.467 cv
336.944 461.43 337.244 460.316 337.41 459.444 cv
337.575 458.572 337.606 457.941 337.651 456.212 cv
337.651 456.212 li
cp
414.334 314.539 mo
414.68 316.087 415.853 317.41 417.372 318.117 cv
418.89 318.824 420.754 318.914 422.303 317.771 cv
423.852 316.628 425.085 314.253 425.16 312.268 cv
425.235 310.283 424.153 308.689 422.86 307.908 cv
421.567 307.125 420.063 307.156 418.709 307.546 cv
417.356 307.938 416.154 308.689 415.311 309.953 cv
414.469 311.215 413.988 312.99 414.334 314.539 cv
414.334 314.539 li
cp
386.773 362.595 mo
388.247 362.58 389.69 362.038 391.449 360.925 cv
393.208 359.813 395.284 358.129 397.208 355.858 cv
399.132 353.588 400.907 350.73 402.32 347.919 cv
403.734 345.107 404.787 342.34 405.568 339.935 cv
406.35 337.529 406.861 335.484 406.832 333.515 cv
406.801 331.544 406.23 329.65 405.192 328.026 cv
404.155 326.402 402.651 325.048 400.546 323.605 cv
398.441 322.162 395.735 320.628 393.268 319.32 cv
390.802 318.011 388.577 316.929 386.938 315.711 cv
385.299 314.493 384.247 313.14 383.886 311.501 cv
383.525 309.862 383.855 307.937 384.126 306.118 cv
384.397 304.298 384.608 302.584 384.276 300.9 cv
383.946 299.216 383.074 297.562 382.082 296.239 cv
381.089 294.916 379.976 293.923 378.984 293.412 cv
377.992 292.901 377.12 292.871 376.262 293.277 cv
375.406 293.683 374.563 294.525 374.082 295.487 cv
373.601 296.449 373.48 297.532 373.811 298.855 cv
374.142 300.178 374.924 301.742 375.42 303.035 cv
375.917 304.328 376.127 305.351 376.127 306.178 cv
376.127 307.005 375.917 307.636 375.195 308.253 cv
374.473 308.87 373.24 309.471 372.007 310.433 cv
370.774 311.396 369.542 312.719 369.15 314.208 cv
368.759 315.696 369.209 317.35 369.947 318.778 cv
370.684 320.207 371.707 321.41 372.924 322.372 cv
374.142 323.334 375.555 324.056 376.999 324.357 cv
378.443 324.658 379.917 324.538 381.224 324.748 cv
382.533 324.958 383.675 325.5 384.382 326.583 cv
385.088 327.665 385.36 329.289 385.419 330.657 cv
385.48 332.025 385.33 333.138 384.954 334.552 cv
384.578 335.965 383.976 337.679 383.194 339.318 cv
382.413 340.958 381.45 342.521 380.923 344.491 cv
380.397 346.461 380.307 348.837 380.247 351.047 cv
380.187 353.257 380.157 355.302 380.502 357.032 cv
380.849 358.76 381.57 360.174 382.683 361.136 cv
383.795 362.099 385.299 362.609 386.773 362.595 cv
386.773 362.595 li
cp
357.603 196.767 mo
358.167 199.436 358.588 200.939 358.468 202.383 cv
358.348 203.826 357.687 205.209 357.235 206.653 cv
356.785 208.096 356.543 209.6 357.235 210.652 cv
357.927 211.705 359.551 212.307 360.574 213.088 cv
361.596 213.87 362.017 214.833 362.438 216.186 cv
362.859 217.539 363.28 219.283 363.491 220.727 cv
363.701 222.17 363.701 223.313 364.243 223.885 cv
364.784 224.456 365.866 224.456 366.888 224.787 cv
367.912 225.118 368.874 225.779 369.625 226.651 cv
370.377 227.523 370.918 228.606 371.851 229.598 cv
372.784 230.591 374.106 231.493 375.008 232.786 cv
375.911 234.079 376.392 235.763 376.752 237.718 cv
377.114 239.673 377.354 241.898 378.016 243.372 cv
378.677 244.845 379.76 245.567 381.835 245.898 cv
383.91 246.229 386.977 246.168 389.564 246.439 cv
392.15 246.71 394.255 247.311 395.668 248.364 cv
397.083 249.416 397.803 250.92 398.375 252.694 cv
398.947 254.469 399.368 256.514 399.939 257.927 cv
400.51 259.34 401.232 260.122 402.014 260.153 cv
402.796 260.183 403.638 259.461 403.999 258.468 cv
404.36 257.476 404.24 256.213 404.48 255.04 cv
404.72 253.867 405.322 252.785 406.254 251.822 cv
407.186 250.86 408.45 250.018 408.93 248.665 cv
409.412 247.311 409.111 245.447 408.45 243.673 cv
407.788 241.898 406.765 240.214 405.232 238.561 cv
403.698 236.906 401.653 235.282 399.397 233.328 cv
397.142 231.373 394.676 229.087 393.142 227.012 cv
391.609 224.937 391.007 223.073 390.857 220.877 cv
390.707 218.682 391.007 216.156 391.699 214.592 cv
392.391 213.028 393.473 212.427 395.006 212.547 cv
396.541 212.667 398.525 213.509 399.187 214.502 cv
399.849 215.494 399.187 216.637 398.465 218.081 cv
397.744 219.524 396.961 221.268 397.654 223.042 cv
398.345 224.817 400.51 226.621 402.525 227.944 cv
404.541 229.268 406.405 230.109 407.307 229.688 cv
408.208 229.268 408.149 227.584 408.69 226.2 cv
409.232 224.817 410.375 223.734 411.667 222.952 cv
412.96 222.17 414.404 221.689 415.487 222.381 cv
416.569 223.073 417.291 224.937 417.742 226.531 cv
418.193 228.125 418.374 229.448 418.073 230.771 cv
417.772 232.095 416.99 233.417 416.809 234.891 cv
416.629 236.365 417.05 237.989 417.261 239.823 cv
417.471 241.658 417.471 243.703 417.291 245.417 cv
417.111 247.131 416.75 248.514 415.546 250.8 cv
414.343 253.085 412.298 256.273 410.885 258.739 cv
409.472 261.205 408.69 262.949 408.6 265.054 cv
408.509 267.159 409.111 269.625 409.412 271.4 cv
409.712 273.174 409.712 274.257 409.352 275.43 cv
408.991 276.603 408.269 277.866 406.976 279.024 cv
405.683 280.182 403.819 281.234 402.661 282.633 cv
401.502 284.031 401.051 285.775 400.736 288.076 cv
400.42 290.376 400.24 293.233 400.42 296.015 cv
400.601 298.797 401.142 301.503 402.435 302.751 cv
403.729 304 405.773 303.789 407.157 302.315 cv
408.541 300.842 409.262 298.105 410.33 295.669 cv
411.397 293.233 412.81 291.098 414.45 290.226 cv
416.088 289.354 417.953 289.745 418.96 290.828 cv
419.967 291.91 420.118 293.685 421.065 294.948 cv
422.012 296.21 423.756 296.962 424.674 297.774 cv
425.591 298.586 425.682 299.458 425.832 300.827 cv
425.983 302.195 426.193 304.06 426.825 305.428 cv
427.456 306.796 428.508 307.668 429.921 307.924 cv
431.335 308.18 433.11 307.818 434.087 306.691 cv
435.064 305.563 435.245 303.668 435.696 302.586 cv
436.147 301.503 436.869 301.232 437.139 300.345 cv
437.41 299.458 437.23 297.955 437.169 296.857 cv
437.109 295.76 437.169 295.068 438.478 294.045 cv
439.786 293.023 442.342 291.669 444.131 290.301 cv
445.92 288.933 446.943 287.55 447.333 285.686 cv
447.724 283.821 447.484 281.476 445.89 278.257 cv
444.296 275.04 441.349 270.95 439.274 267.883 cv
437.199 264.815 435.997 262.77 435.424 260.665 cv
434.853 258.56 434.914 256.395 435.544 255.252 cv
436.176 254.109 437.379 253.989 438.162 254.831 cv
438.943 255.673 439.304 257.478 440.357 259.643 cv
441.409 261.808 443.154 264.334 445.018 265.447 cv
446.882 266.56 448.867 266.258 450.31 265.688 cv
451.754 265.116 452.657 264.273 453.078 263.131 cv
453.499 261.988 453.438 260.545 453.709 259.312 cv
453.979 258.079 454.581 257.056 454.912 255.793 cv
455.243 254.53 455.303 253.026 454.521 251.433 cv
453.739 249.839 452.115 248.155 448.295 243.253 cv
444.476 238.351 438.461 230.231 435.124 225.992 cv
431.786 221.751 431.124 221.39 424.328 217.902 cv
417.531 214.414 404.6 207.797 397.473 204.038 cv
390.345 200.279 389.022 199.377 388.03 198.354 cv
387.038 197.332 386.375 196.189 385.985 194.896 cv
385.593 193.603 385.473 192.159 384.3 190.836 cv
383.127 189.513 380.902 188.31 379.669 186.626 cv
378.436 184.942 378.196 182.777 377.955 180.491 cv
377.714 178.206 377.474 175.8 376.993 173.875 cv
376.511 171.951 375.79 170.507 375.458 168.733 cv
375.128 166.958 375.188 164.854 376.18 162.869 cv
377.173 160.884 379.098 159.02 379.94 157.185 cv
380.782 155.351 380.542 153.546 380.03 151.953 cv
379.519 150.358 378.737 148.976 379.218 146.81 cv
379.7 144.645 381.444 141.698 382.255 139.172 cv
383.067 136.646 382.947 134.541 382.166 131.022 cv
381.383 127.503 379.94 122.571 379.729 118.542 cv
379.518 114.512 380.542 111.384 380.932 108.858 cv
381.323 106.332 381.083 104.407 380.601 103.174 cv
380.12 101.941 379.399 101.4 377.534 101.43 cv
375.669 101.46 372.662 102.062 367.701 103.205 cv
362.738 104.347 355.821 106.031 352.333 106.572 cv
348.844 107.114 348.784 106.512 348.814 104.167 cv
348.844 101.821 348.964 97.731 349.326 80.311 cv
349.686 62.8911 350.288 32.1421 350.407 16.7676 cv
350.527 1.39258 350.167 1.39258 348.933 1.52051 cv
347.701 1.64844 345.595 1.90527 327.852 2.54443 cv
310.109 3.18359 276.728 4.20605 230.575 5.69922 cv
184.42 7.19238 125.493 9.15625 95.8486 10.1445 cv
66.2051 11.1323 65.8442 11.1445 65.4834 11.1563 cv
65.1226 11.1685 64.7617 11.1802 64.4009 11.1924 cv
64.04 11.2046 63.6792 11.2163 63.5283 11.7939 cv
63.3784 12.3711 63.4385 13.5137 63.5435 17.9346 cv
63.6489 22.355 63.7993 30.0542 64.4609 58.7129 cv
65.1221 87.3721 66.2944 136.992 67.3623 184.958 cv
68.4292 232.924 69.3916 279.235 69.8125 303.233 cv
70.2329 327.232 70.1133 328.916 69.9932 331.562 cv
69.8726 334.208 69.7524 337.817 69.1509 357.425 cv
68.5493 377.032 67.4668 412.638 66.625 438.681 cv
65.7827 464.724 65.1816 481.203 64.6401 489.639 cv
64.0986 498.074 63.6177 498.465 63.0161 498.601 cv
62.4146 498.735 61.6934 498.615 60.2192 498.028 cv
58.7461 497.442 56.5205 496.39 54.686 495.834 cv
52.8516 495.277 51.4082 495.218 50.1602 495.487 cv
48.9121 495.759 47.8599 496.36 45.9199 497.518 cv
43.98 498.676 41.1533 500.39 38.9883 501.547 cv
36.8232 502.705 35.3193 503.307 34.312 504.646 cv
33.3047 505.983 32.793 508.058 32.6279 510.088 cv
32.4624 512.118 32.6431 514.103 32.8232 515.666 cv
33.0034 517.23 33.1836 518.373 33.9053 519.396 cv
34.627 520.418 35.8901 521.32 36.7622 522.764 cv
37.6343 524.207 38.1152 526.192 37.8149 528.508 cv
37.5137 530.823 36.4312 533.47 35.6797 535.815 cv
34.9277 538.161 34.5063 540.206 34.687 541.92 cv
34.8677 543.634 35.6494 545.018 36.582 546.972 cv
37.5137 548.927 38.5967 551.453 39.3784 553.678 cv
40.1602 555.903 40.6411 557.828 40.3408 559.572 cv
40.04 561.316 38.9575 562.88 36.8525 564.264 cv
34.7476 565.647 31.6196 566.85 29.4844 567.872 cv
27.3491 568.896 26.2065 569.737 25.6655 570.64 cv
25.124 571.542 25.1841 572.504 25.3345 573.346 cv
25.4849 574.188 25.7256 574.91 25.4248 575.872 cv
25.124 576.834 24.2822 578.037 23.1992 579.24 cv
22.1167 580.443 20.793 581.646 18.0566 581.977 cv
15.3198 582.308 11.1699 581.766 8.13916 582.188 cv
5.1084 582.608 3.19678 583.991 2.24121 585.676 cv
1.28516 587.359 1.28516 589.345 2.06055 590.878 cv
2.83594 592.412 4.38672 593.495 6.84619 593.044 cv
9.30518 592.593 12.6733 590.607 14.7485 590.156 cv
16.8237 589.705 17.6055 590.788 18.7183 591.721 cv
19.8311 592.652 21.2739 593.435 23.0186 592.743 cv
24.7627 592.051 26.8076 589.886 30.8071 587.66 cv
34.8066 585.435 40.7617 583.149 46.0244 581.856 cv
51.2866 580.563 55.8579 580.263 59.978 579.45 cv
64.0981 578.639 67.7666 577.315 71.6763 576.143 cv
75.5859 574.97 79.7358 573.947 82.6528 573.496 cv
85.5698 573.045 87.2539 573.165 89.3892 573.346 cv
91.5244 573.526 94.1108 573.768 96.5464 573.346 cv
98.9824 572.925 101.268 571.843 104.847 571.843 cv
108.425 571.843 113.297 572.925 117.327 572.083 cv
121.356 571.241 124.544 568.475 127.04 566.429 cv
129.536 564.384 131.341 563.061 136.212 561.166 cv
141.084 559.271 149.022 556.805 156.841 554.279 cv
164.66 551.753 172.359 549.167 177.441 547.212 cv
182.523 545.257 184.989 543.934 188.177 543.362 cv
191.365 542.791 195.274 542.972 198.763 542.46 cv
202.251 541.949 205.319 540.746 207.604 540.235 cv
209.89 539.724 211.394 539.904 213.559 539.182 cv
215.724 538.461 218.551 536.836 222.55 536.205 cv
226.55 535.573 231.723 535.935 236.564 535.483 cv
241.406 535.032 245.917 533.77 248.864 532.807 cv
251.811 531.845 253.195 531.183 253.585 529.979 cv
253.977 528.777 253.375 527.033 253.134 525.56 cv
252.894 524.086 253.014 522.883 253.706 522.041 cv
254.397 521.199 255.661 520.718 256.232 519.334 cv
256.803 517.951 256.683 515.665 257.134 513.35 cv
257.585 511.034 258.608 508.688 259.51 506.854 cv
260.412 505.02 261.194 503.696 261.375 502.042 cv
261.555 500.388 261.133 498.403 261.855 497.11 cv
262.577 495.817 264.441 495.216 265.644 495.275 cv
266.847 495.336 267.388 496.058 267.629 497.471 cv
267.87 498.885 267.809 500.989 268.261 502.884 cv
268.712 504.779 269.674 506.463 270.215 507.786 cv
270.756 509.109 270.876 510.071 270.576 511.094 cv
270.276 512.116 269.554 513.199 269.734 514.222 cv
269.915 515.244 270.998 516.206 270.998 517.409 cv
270.998 518.612 269.915 520.056 268.05 521.83 cv
266.186 523.604 263.54 525.709 261.946 527.514 cv
260.352 529.318 259.811 530.821 260.412 532.024 cv
261.013 533.228 262.758 534.13 264.712 534.882 cv
266.667 535.634 268.833 536.234 270.727 537.769 cv
272.622 539.303 274.246 541.769 275.75 543.121 cv
277.252 544.475 278.636 544.715 279.568 543.993 cv
280.5 543.271 280.982 541.588 280.862 540.054 cv
280.741 538.521 280.019 537.137 280.169 535.452 cv
280.32 533.769 281.342 531.784 283.598 528.146 cv
285.853 524.506 289.342 519.214 292.289 515.124 cv
295.236 511.034 297.642 508.146 299.145 505.17 cv
300.649 502.192 301.25 499.125 300.95 496.539 cv
300.649 493.952 299.447 491.848 299.356 489.562 cv
299.266 487.276 300.289 484.811 302.634 482.855 cv
304.98 480.901 308.649 479.457 310.814 478.284 cv
312.979 477.112 313.64 476.21 313.941 474.916 cv
314.242 473.623 314.181 471.939 314.933 470.646 cv
315.685 469.354 317.249 468.45 317.73 467.248 cv
318.21 466.045 317.61 464.541 316.828 463.038 cv
316.045 461.534 315.083 460.03 314.993 458.377 cv
314.903 456.723 315.685 454.918 317.039 454.046 cv
318.391 453.174 320.316 453.234 321.458 452.572 cv
322.602 451.911 322.962 450.527 322.993 448.783 cv
323.023 447.039 322.722 444.934 322.121 443.1 cv
321.519 441.266 320.617 439.701 320.226 437.025 cv
319.835 434.349 319.956 430.56 320.707 427.823 cv
321.458 425.086 322.842 423.402 323.684 421.868 cv
324.526 420.335 324.827 418.951 324.887 417.508 cv
324.948 416.064 324.767 414.561 324.676 412.245 cv
324.586 409.93 324.586 406.802 323.955 403.193 cv
323.324 399.584 322.06 395.494 320.948 392.908 cv
319.834 390.322 318.873 389.239 318.061 388.036 cv
317.249 386.833 316.587 385.511 316.587 384.247 cv
316.587 382.984 317.249 381.781 315.986 380.397 cv
314.722 379.015 311.535 377.451 310.271 375.826 cv
309.008 374.203 309.67 372.519 309.219 371.406 cv
308.768 370.293 307.205 369.752 306.302 368.489 cv
305.4 367.226 305.16 365.241 305.611 363.888 cv
306.062 362.534 307.205 361.813 308.317 361.933 cv
309.43 362.054 310.512 363.016 312.106 362.865 cv
313.701 362.715 315.805 361.452 319.714 360.279 cv
323.625 359.106 329.337 358.024 332.225 356.49 cv
335.112 354.957 335.171 352.972 335.171 351.228 cv
335.171 349.483 335.112 347.979 333.819 347.138 cv
332.526 346.295 330 346.115 328.556 345.514 cv
327.113 344.912 326.751 343.89 327.624 342.687 cv
328.496 341.484 330.601 340.101 332.074 339.108 cv
333.548 338.116 334.39 337.515 334.36 336.281 cv
334.33 335.048 333.427 333.184 332.044 332.131 cv
330.661 331.079 328.796 330.838 327.834 330.297 cv
326.872 329.755 326.812 328.914 327.292 328.191 cv
327.774 327.47 328.796 326.869 329.939 326.568 cv
331.082 326.267 332.345 326.267 332.947 325.515 cv
333.548 324.764 333.488 323.26 333.006 321.726 cv
332.525 320.192 331.623 318.628 331.382 316.824 cv
331.142 315.02 331.563 312.975 331.563 310.81 cv
331.563 308.645 331.142 306.359 330.811 304.013 cv
330.48 301.667 330.24 299.262 329.758 297.487 cv
329.278 295.713 328.555 294.571 326.811 293.579 cv
325.067 292.586 322.3 291.745 320.586 290.873 cv
318.873 290 318.21 289.098 317.038 289.038 cv
315.865 288.978 314.181 289.76 312.617 290.391 cv
311.053 291.023 309.61 291.504 308.256 291.263 cv
306.903 291.022 305.64 290.061 305.039 287.294 cv
304.437 284.527 304.498 279.956 304.978 277.34 cv
305.459 274.723 306.362 274.062 309.91 274.453 cv
313.458 274.844 319.654 276.287 323.804 276.888 cv
327.954 277.49 330.059 277.249 331.051 276.287 cv
332.043 275.325 331.923 273.641 332.645 272.769 cv
333.368 271.896 334.931 271.836 335.802 272.829 cv
336.675 273.821 336.856 275.866 337.637 276.858 cv
338.419 277.851 339.802 277.791 340.946 277.67 cv
342.088 277.55 342.991 277.37 343.591 278.001 cv
344.193 278.632 344.494 280.076 344.284 281.58 cv
344.073 283.083 343.351 284.647 343.953 286.332 cv
344.554 288.016 346.479 289.82 348.343 291.083 cv
350.208 292.346 352.012 293.068 353.155 292.707 cv
354.297 292.346 354.779 290.903 354.869 289.188 cv
354.959 287.474 354.659 285.489 354.539 283.745 cv
354.417 282.001 354.478 280.497 355.411 279.023 cv
356.342 277.55 358.147 276.106 359.35 274.844 cv
360.553 273.58 361.155 272.498 361.245 269.551 cv
361.335 266.604 360.914 261.792 361.064 259.206 cv
361.214 256.62 361.936 256.258 364.042 255.417 cv
366.146 254.574 369.635 253.251 371.319 252.168 cv
373.003 251.086 372.882 250.244 371.349 249.823 cv
369.816 249.402 366.869 249.402 364.192 249.131 cv
361.515 248.86 359.109 248.319 356.974 247.387 cv
354.839 246.455 352.974 245.132 352.102 243.387 cv
351.23 241.643 351.35 239.478 351.38 237.433 cv
351.411 235.388 351.351 233.464 352.042 232.021 cv
352.735 230.577 354.178 229.615 354.78 228.593 cv
355.38 227.57 355.14 226.487 354.298 225.946 cv
353.457 225.405 352.013 225.405 350.96 224.804 cv
349.908 224.202 349.246 222.999 348.916 221.646 cv
348.584 220.293 348.584 218.789 348.344 216.954 cv
348.103 215.12 347.623 212.955 346.991 210.068 cv
346.359 207.181 345.577 203.572 345.156 200.685 cv
344.735 197.798 344.675 195.633 345.457 194.039 cv
346.239 192.445 347.863 191.422 348.404 190.129 cv
348.946 188.836 348.404 187.272 346.75 185.739 cv
345.096 184.205 342.33 182.701 340.615 180.656 cv
338.901 178.611 338.24 176.025 337.307 173.83 cv
336.375 171.635 335.171 169.83 335.262 168.567 cv
335.352 167.304 336.736 166.583 337.878 166.643 cv
339.021 166.703 339.923 167.545 340.706 167.455 cv
341.487 167.364 342.149 166.342 342.781 164.627 cv
343.412 162.914 344.013 160.508 344.825 158.223 cv
345.637 155.937 346.66 153.772 347.591 152.449 cv
348.524 151.125 349.367 150.645 349.727 149.352 cv
350.088 148.058 349.967 145.953 350.268 143.818 cv
350.57 141.683 351.291 139.518 352.494 138.134 cv
353.697 136.75 355.38 136.149 356.553 136.961 cv
357.726 137.773 358.388 139.999 358.598 142.495 cv
358.809 144.991 358.568 147.757 357.606 150.314 cv
356.644 152.87 354.959 155.215 353.065 158.915 cv
351.17 162.613 349.065 167.666 347.682 170.703 cv
346.299 173.74 345.637 174.763 345.847 175.816 cv
346.058 176.868 347.141 177.951 348.916 179.725 cv
350.689 181.499 353.156 183.965 354.743 187.115 cv
356.33 190.265 357.039 194.098 357.603 196.767 cv
357.603 196.767 li
cp
228.039 694.93 mo
229.603 697.605 232.31 701.756 234.053 704.673 cv
235.798 707.59 236.58 709.273 235.979 710.688 cv
235.377 712.101 233.392 713.244 230.986 714.056 cv
228.581 714.868 225.753 715.349 222.716 715.379 cv
219.679 715.409 216.431 714.988 212.552 715.86 cv
208.672 716.732 204.161 718.897 200.733 720.131 cv
197.305 721.363 194.959 721.664 193.305 721.424 cv
191.651 721.183 190.689 720.401 189.847 719.349 cv
189.004 718.296 188.283 716.973 188.192 715.95 cv
188.103 714.928 188.644 714.206 188.885 711.65 cv
189.125 709.094 189.065 704.703 189.155 701.876 cv
189.245 699.049 189.486 697.786 189.727 696.463 cv
189.967 695.14 190.208 693.757 190.99 692.734 cv
191.771 691.712 193.094 691.05 194.628 689.757 cv
196.162 688.464 197.906 686.539 199.049 685.186 cv
200.192 683.833 200.733 683.051 201.425 683.141 cv
202.116 683.231 202.958 684.193 204.372 685.576 cv
205.785 686.96 207.77 688.765 209.364 689.666 cv
210.958 690.569 212.161 690.569 213.394 690.058 cv
214.626 689.547 215.89 688.523 216.371 687.682 cv
216.852 686.84 216.551 686.178 215.859 685.096 cv
215.168 684.013 214.085 682.509 212.853 680.885 cv
211.62 679.261 210.236 677.518 209.484 676.585 cv
208.732 675.652 208.612 675.532 209.244 674.66 cv
209.875 673.788 211.259 672.164 212.101 670.45 cv
212.942 668.736 213.244 666.932 213.033 664.676 cv
212.822 662.421 212.101 659.714 211.68 657.429 cv
211.259 655.143 211.138 653.278 211.439 652.195 cv
211.74 651.113 212.461 650.813 213.785 651.083 cv
215.108 651.354 217.032 652.195 219.017 653.369 cv
221.002 654.541 223.047 656.045 224.46 656.947 cv
225.874 657.85 226.656 658.15 227.107 659.143 cv
227.558 660.135 227.678 661.818 227.648 663.894 cv
227.618 665.969 227.438 668.436 227.227 670.601 cv
227.017 672.766 226.776 674.63 226.265 676.705 cv
225.753 678.78 224.972 681.065 224.821 683.291 cv
224.671 685.517 225.152 687.682 225.603 689.366 cv
226.054 691.05 226.475 692.253 228.039 694.93 cv
228.039 694.93 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
ef
2.9999 lw
1 lc
1 lj
22.9256 ml
[] 0 dsh
true sadj
470.92 432.484 mo
472.229 434.289 474.333 437.115 475.837 439.371 cv
477.341 441.627 478.244 443.311 478.634 445.596 cv
479.025 447.882 478.905 450.769 478.093 453.986 cv
477.281 457.204 475.778 460.753 474.875 463.068 cv
473.973 465.384 473.672 466.467 474.093 467.188 cv
474.514 467.91 475.657 468.271 477.1 467.971 cv
478.544 467.67 480.289 466.707 482.033 465.835 cv
483.777 464.963 485.521 464.181 487.446 463.881 cv
489.371 463.58 491.475 463.76 492.648 463.009 cv
493.821 462.257 494.062 460.573 494.091 459.37 cv
494.122 458.167 493.942 457.445 494.874 456.332 cv
495.806 455.22 497.851 453.716 499.715 452.724 cv
501.58 451.731 503.264 451.25 505.128 450.618 cv
506.993 449.987 509.038 449.205 510.632 448.122 cv
512.226 447.04 513.369 445.656 513.94 444.303 cv
514.511 442.95 514.511 441.627 514.751 440.334 cv
514.993 439.04 515.474 437.777 516.316 436.785 cv
517.158 435.792 518.361 435.071 520.285 434.59 cv
522.21 434.108 524.856 433.868 526.53 433.688 cv
528.203 433.507 528.902 433.387 529.251 432.905 cv
529.601 432.424 529.601 431.582 528.981 425.809 cv
528.361 420.034 527.12 409.328 525.988 398.953 cv
524.856 388.578 523.833 378.534 523.142 370.655 cv
522.451 362.776 522.089 357.062 521.639 354.055 cv
521.188 351.047 520.646 350.747 519.774 349.845 cv
518.902 348.942 517.7 347.438 516.586 345.814 cv
515.474 344.191 514.452 342.447 514 340.432 cv
513.549 338.417 513.669 336.131 513.94 334.207 cv
514.21 332.282 514.631 330.718 515.504 329.064 cv
516.375 327.41 517.699 325.666 518.466 324.012 cv
519.233 322.358 519.443 320.794 519.157 319.366 cv
518.872 317.937 518.089 316.644 518.134 314.87 cv
518.179 313.095 519.052 310.84 519.593 308.78 cv
520.134 306.72 520.345 304.855 520.496 303.232 cv
520.646 301.608 520.736 300.224 520.36 299.232 cv
519.984 298.239 519.142 297.638 517.593 297.247 cv
516.044 296.856 513.79 296.676 509.383 295.849 cv
504.978 295.022 498.422 293.548 494.904 292.542 cv
491.386 291.534 490.905 290.992 490.664 290.391 cv
490.423 289.79 490.423 289.128 489.761 288.767 cv
489.1 288.406 487.777 288.346 485.641 287.985 cv
483.506 287.625 480.559 286.963 478.514 286.001 cv
476.469 285.039 475.327 283.775 474.634 283.625 cv
473.943 283.475 473.703 284.437 473.373 285.76 cv
473.042 287.083 472.621 288.767 471.838 291.745 cv
471.056 294.722 469.914 298.992 468.921 303.022 cv
467.929 307.052 467.086 310.841 466.576 313.607 cv
466.064 316.374 465.884 318.118 465.673 321.216 cv
465.462 324.313 465.222 328.764 465.131 332.403 cv
465.042 336.042 465.101 338.869 465.522 340.463 cv
465.943 342.056 466.725 342.417 467.687 343.47 cv
468.65 344.522 469.792 346.267 470.333 347.92 cv
470.875 349.575 470.815 351.138 470.033 352.432 cv
469.251 353.725 467.748 354.747 466.605 356.07 cv
465.462 357.394 464.68 359.018 464.379 360.07 cv
464.079 361.123 464.259 361.604 464.68 362.025 cv
465.101 362.445 465.763 362.807 466.244 364.852 cv
466.725 366.896 467.026 370.626 467.116 373.572 cv
467.207 376.52 467.085 378.685 466.514 379.497 cv
465.943 380.309 464.92 379.768 463.507 379.497 cv
462.094 379.227 460.29 379.227 459.568 379.557 cv
458.846 379.888 459.207 380.55 459.658 381.542 cv
460.109 382.534 460.651 383.857 460.846 385.616 cv
461.042 387.376 460.891 389.571 461.357 390.805 cv
461.824 392.037 462.906 392.309 464.109 392.97 cv
465.312 393.631 466.635 394.684 467.583 395.601 cv
468.53 396.519 469.101 397.3 468.875 398.684 cv
468.65 400.066 467.627 402.052 467.056 403.525 cv
466.485 404.998 466.364 405.961 466.71 406.878 cv
467.056 407.795 467.868 408.667 468.063 409.6 cv
468.259 410.531 467.837 411.524 467.703 412.637 cv
467.567 413.75 467.718 414.982 468.544 416.065 cv
469.372 417.147 470.875 418.08 471.717 418.787 cv
472.559 419.493 472.74 419.975 472.063 421.207 cv
471.386 422.44 469.853 424.425 469.131 425.868 cv
468.41 427.313 468.5 428.215 468.8 429.056 cv
469.101 429.898 469.612 430.68 470.92 432.484 cv
cp
368.92 472.129 mo
369.8 471.579 370.883 470.738 371.71 470.196 cv
372.538 469.655 373.109 469.414 373.831 469.655 cv
374.552 469.896 375.424 470.617 376.236 470.948 cv
377.048 471.279 377.799 471.219 378.972 470.692 cv
380.145 470.166 381.74 469.174 383.393 468.001 cv
385.047 466.828 386.761 465.475 387.98 464.903 cv
389.198 464.332 389.919 464.543 391.272 465.535 cv
392.625 466.527 394.611 468.302 396.28 469.084 cv
397.949 469.865 399.302 469.655 399.979 469.265 cv
400.655 468.873 400.655 468.302 400.76 467.068 cv
400.866 465.836 401.076 463.941 401.904 462.393 cv
402.73 460.844 404.173 459.641 405.091 458.889 cv
406.008 458.138 406.399 457.836 406.594 456.363 cv
406.79 454.89 406.79 452.243 406.925 450.003 cv
407.06 447.762 407.332 445.928 407.587 444.665 cv
407.842 443.401 408.083 442.71 409.181 442.153 cv
410.279 441.598 412.233 441.176 413.707 441.102 cv
415.18 441.025 416.172 441.297 417.044 442.063 cv
417.917 442.83 418.668 444.094 419.872 444.695 cv
421.075 445.296 422.729 445.236 423.721 444.845 cv
424.713 444.454 425.044 443.732 425.42 442.815 cv
425.796 441.898 426.217 440.785 426.939 440.063 cv
427.661 439.342 428.683 439.012 430.082 439.146 cv
431.48 439.282 433.254 439.883 434.562 440.507 cv
435.871 441.131 436.712 441.777 437.57 442.462 cv
438.426 443.146 439.298 443.868 439.69 444.694 cv
440.081 445.521 439.991 446.454 439.78 447.469 cv
439.57 448.483 439.239 449.581 439.208 450.529 cv
439.178 451.477 439.449 452.273 440.081 452.709 cv
440.712 453.145 441.705 453.221 442.381 453.032 cv
443.058 452.844 443.419 452.394 444.343 450.95 cv
445.268 449.506 446.757 447.07 447.418 445.582 cv
448.081 444.094 447.915 443.552 447.253 442.68 cv
446.591 441.808 445.434 440.604 444.577 439.537 cv
443.719 438.47 443.164 437.537 442.908 436.673 cv
442.652 435.808 442.697 435.011 443.02 433.545 cv
443.343 432.079 443.945 429.943 444.772 428.049 cv
445.599 426.154 446.651 424.5 447.824 422.981 cv
448.997 421.463 450.291 420.08 451.162 418.546 cv
452.035 417.013 452.486 415.328 452.921 413.013 cv
453.358 410.697 453.779 407.75 454.034 406.021 cv
454.29 404.291 454.38 403.78 453.989 403.134 cv
453.598 402.487 452.726 401.705 451.884 400.923 cv
451.042 400.142 450.23 399.359 449.944 398.427 cv
449.659 397.494 449.899 396.412 450.019 394.246 cv
450.14 392.081 450.14 388.833 449.869 386.607 cv
449.598 384.383 449.057 383.18 448.787 381.767 cv
448.515 380.353 448.515 378.729 448.666 376.864 cv
448.816 375 449.117 372.895 449.508 371 cv
449.899 369.105 450.38 367.422 450.23 366.279 cv
450.08 365.137 449.297 364.535 448.094 363.151 cv
446.892 361.768 445.268 359.603 444.426 358.129 cv
443.583 356.656 443.524 355.874 443.854 354.25 cv
444.185 352.626 444.907 350.16 445.328 347.754 cv
445.75 345.349 445.869 343.003 446.11 340.567 cv
446.35 338.131 446.711 335.605 447.403 334.222 cv
448.094 332.838 449.117 332.598 450.831 332.207 cv
452.544 331.815 454.951 331.274 456.605 330.777 cv
458.258 330.282 459.162 329.831 459.748 328.763 cv
460.333 327.695 460.605 326.011 460.83 323.966 cv
461.055 321.921 461.236 319.516 461.041 317.531 cv
460.845 315.546 460.274 313.982 460.078 312.253 cv
459.882 310.524 460.063 308.629 460.124 307.066 cv
460.183 305.502 460.124 304.27 459.582 303.638 cv
459.041 303.006 458.018 302.976 456.951 303.758 cv
455.883 304.54 454.77 306.134 453.447 307.502 cv
452.125 308.87 450.59 310.013 448.019 311.246 cv
445.448 312.479 441.839 313.802 439.297 315.065 cv
436.756 316.329 435.284 317.531 434.095 318.764 cv
432.908 319.997 432.005 321.26 431.329 322.479 cv
430.652 323.696 430.201 324.869 429.359 325.5 cv
428.517 326.132 427.284 326.222 426.066 326.914 cv
424.848 327.605 423.645 328.899 422.789 330.342 cv
421.931 331.786 421.419 333.379 421.119 335.62 cv
420.818 337.86 420.728 340.747 420.563 342.612 cv
420.397 344.477 420.157 345.319 419.464 346.477 cv
418.773 347.634 417.63 349.108 416.336 351.469 cv
415.043 353.829 413.6 357.078 412.397 360.265 cv
411.195 363.452 410.232 366.58 409.255 368.956 cv
408.278 371.331 407.285 372.956 405.841 374.715 cv
404.398 376.474 402.503 378.368 400.82 381.03 cv
399.135 383.691 397.663 387.12 396.85 390.668 cv
396.039 394.217 395.888 397.886 395.813 401.163 cv
395.738 404.441 395.738 407.328 395.632 408.998 cv
395.527 410.667 395.317 411.117 394.354 411.013 cv
393.391 410.907 391.677 410.245 390.354 409.84 cv
389.031 409.434 388.099 409.283 387.167 410.021 cv
386.235 410.757 385.302 412.381 385.272 413.629 cv
385.242 414.877 386.114 415.749 386.851 416.486 cv
387.587 417.223 388.189 417.824 388.189 418.786 cv
388.189 419.749 387.587 421.072 387.618 422.185 cv
387.648 423.297 388.309 424.199 388.49 426.154 cv
388.67 428.108 388.37 431.116 388.309 433.281 cv
388.25 435.447 388.429 436.77 389.031 438.484 cv
389.632 440.198 390.655 442.304 391.196 443.867 cv
391.738 445.431 391.798 446.453 391.226 447.235 cv
390.655 448.018 389.452 448.559 387.948 449.461 cv
386.445 450.362 384.64 451.626 383.016 452.258 cv
381.392 452.889 379.949 452.889 379.287 452.137 cv
378.625 451.385 378.746 449.882 378.596 448.769 cv
378.446 447.656 378.024 446.935 377.333 446.694 cv
376.641 446.453 375.679 446.694 375.047 447.416 cv
374.416 448.138 374.115 449.34 372.22 451.114 cv
370.326 452.889 366.837 455.234 364.492 457.009 cv
362.146 458.783 360.943 459.986 360.341 461.099 cv
359.74 462.211 359.74 463.234 360.281 464.046 cv
360.823 464.858 361.906 465.46 362.657 466.753 cv
363.409 468.046 363.83 470.03 364.447 471.219 cv
365.063 472.406 365.875 472.798 366.62 472.865 cv
367.364 472.933 368.041 472.678 368.92 472.129 cv
368.92 472.129 li
cp
337.651 456.212 mo
337.696 454.482 337.756 451.656 337.425 448.949 cv
337.094 446.243 336.373 443.657 336.252 441.371 cv
336.132 439.086 336.613 437.101 337.305 436.318 cv
337.997 435.537 338.899 435.958 340.824 436.439 cv
342.749 436.92 345.696 437.462 347.44 437.372 cv
349.184 437.281 349.725 436.56 349.485 435.657 cv
349.244 434.755 348.221 433.673 348.041 432.439 cv
347.861 431.206 348.522 429.823 348.883 428.65 cv
349.244 427.478 349.303 426.516 348.281 424.681 cv
347.258 422.847 345.154 420.14 343.679 417.493 cv
342.207 414.848 341.364 412.261 341.394 409.795 cv
341.424 407.329 342.327 404.983 343.379 401.796 cv
344.431 398.607 345.634 394.578 346.146 391.149 cv
346.657 387.722 346.477 384.895 347.289 381.917 cv
348.101 378.94 349.905 375.813 351.709 373.527 cv
353.513 371.241 355.318 369.798 357.243 369.527 cv
359.167 369.257 361.212 370.159 362.566 371.843 cv
363.918 373.527 364.581 375.993 364.941 378.729 cv
365.302 381.466 365.363 384.474 365.272 386.398 cv
365.182 388.323 364.941 389.165 364.31 390.548 cv
363.678 391.932 362.656 393.856 362.144 397.194 cv
361.633 400.532 361.633 405.284 361.603 409.014 cv
361.573 412.742 361.513 415.448 362.114 417.464 cv
362.715 419.479 363.979 420.802 364.851 421.884 cv
365.723 422.967 366.204 423.809 365.813 425.012 cv
365.422 426.215 364.16 427.778 363.077 429.252 cv
361.995 430.726 361.091 432.109 360.912 433.793 cv
360.731 435.478 361.273 437.462 362.205 439.206 cv
363.137 440.95 364.459 442.454 364.76 443.958 cv
365.061 445.462 364.34 446.965 362.806 447.656 cv
361.273 448.349 358.926 448.229 356.641 448.258 cv
354.356 448.288 352.13 448.469 350.716 449.762 cv
349.303 451.055 348.702 453.46 348.416 455.189 cv
348.13 456.918 348.161 457.971 347.905 458.603 cv
347.649 459.234 347.108 459.444 346.372 459.595 cv
345.634 459.745 344.703 459.835 344.25 460.783 cv
343.8 461.73 343.831 463.534 343.409 464.993 cv
342.988 466.451 342.116 467.564 340.988 468.646 cv
339.861 469.729 338.477 470.782 337.229 470.933 cv
335.981 471.083 334.869 470.331 334.251 469.263 cv
333.635 468.195 333.515 466.813 333.997 465.64 cv
334.477 464.467 335.56 463.504 336.251 462.467 cv
336.944 461.43 337.244 460.316 337.41 459.444 cv
337.575 458.572 337.606 457.941 337.651 456.212 cv
337.651 456.212 li
cp
414.334 314.539 mo
414.68 316.087 415.853 317.41 417.372 318.117 cv
418.89 318.824 420.754 318.914 422.303 317.771 cv
423.852 316.628 425.085 314.253 425.16 312.268 cv
425.235 310.283 424.153 308.689 422.86 307.908 cv
421.567 307.125 420.063 307.156 418.709 307.546 cv
417.356 307.938 416.154 308.689 415.311 309.953 cv
414.469 311.215 413.988 312.99 414.334 314.539 cv
414.334 314.539 li
cp
386.773 362.595 mo
388.247 362.58 389.69 362.038 391.449 360.925 cv
393.208 359.813 395.284 358.129 397.208 355.858 cv
399.132 353.588 400.907 350.73 402.32 347.919 cv
403.734 345.107 404.787 342.34 405.568 339.935 cv
406.35 337.529 406.861 335.484 406.832 333.515 cv
406.801 331.544 406.23 329.65 405.192 328.026 cv
404.155 326.402 402.651 325.048 400.546 323.605 cv
398.441 322.162 395.735 320.628 393.268 319.32 cv
390.802 318.011 388.577 316.929 386.938 315.711 cv
385.299 314.493 384.247 313.14 383.886 311.501 cv
383.525 309.862 383.855 307.937 384.126 306.118 cv
384.397 304.298 384.608 302.584 384.276 300.9 cv
383.946 299.216 383.074 297.562 382.082 296.239 cv
381.089 294.916 379.976 293.923 378.984 293.412 cv
377.992 292.901 377.12 292.871 376.262 293.277 cv
375.406 293.683 374.563 294.525 374.082 295.487 cv
373.601 296.449 373.48 297.532 373.811 298.855 cv
374.142 300.178 374.924 301.742 375.42 303.035 cv
375.917 304.328 376.127 305.351 376.127 306.178 cv
376.127 307.005 375.917 307.636 375.195 308.253 cv
374.473 308.87 373.24 309.471 372.007 310.433 cv
370.774 311.396 369.542 312.719 369.15 314.208 cv
368.759 315.696 369.209 317.35 369.947 318.778 cv
370.684 320.207 371.707 321.41 372.924 322.372 cv
374.142 323.334 375.555 324.056 376.999 324.357 cv
378.443 324.658 379.917 324.538 381.224 324.748 cv
382.533 324.958 383.675 325.5 384.382 326.583 cv
385.088 327.665 385.36 329.289 385.419 330.657 cv
385.48 332.025 385.33 333.138 384.954 334.552 cv
384.578 335.965 383.976 337.679 383.194 339.318 cv
382.413 340.958 381.45 342.521 380.923 344.491 cv
380.397 346.461 380.307 348.837 380.247 351.047 cv
380.187 353.257 380.157 355.302 380.502 357.032 cv
380.849 358.76 381.57 360.174 382.683 361.136 cv
383.795 362.099 385.299 362.609 386.773 362.595 cv
386.773 362.595 li
cp
357.603 196.767 mo
358.167 199.436 358.588 200.939 358.468 202.383 cv
358.348 203.826 357.687 205.209 357.235 206.653 cv
356.785 208.096 356.543 209.6 357.235 210.652 cv
357.927 211.705 359.551 212.307 360.574 213.088 cv
361.596 213.87 362.017 214.833 362.438 216.186 cv
362.859 217.539 363.28 219.283 363.491 220.727 cv
363.701 222.17 363.701 223.313 364.243 223.885 cv
364.784 224.456 365.866 224.456 366.888 224.787 cv
367.912 225.118 368.874 225.779 369.625 226.651 cv
370.377 227.523 370.918 228.606 371.851 229.598 cv
372.784 230.591 374.106 231.493 375.008 232.786 cv
375.911 234.079 376.392 235.763 376.752 237.718 cv
377.114 239.673 377.354 241.898 378.016 243.372 cv
378.677 244.845 379.76 245.567 381.835 245.898 cv
383.91 246.229 386.977 246.168 389.564 246.439 cv
392.15 246.71 394.255 247.311 395.668 248.364 cv
397.083 249.416 397.803 250.92 398.375 252.694 cv
398.947 254.469 399.368 256.514 399.939 257.927 cv
400.51 259.34 401.232 260.122 402.014 260.153 cv
402.796 260.183 403.638 259.461 403.999 258.468 cv
404.36 257.476 404.24 256.213 404.48 255.04 cv
404.72 253.867 405.322 252.785 406.254 251.822 cv
407.186 250.86 408.45 250.018 408.93 248.665 cv
409.412 247.311 409.111 245.447 408.45 243.673 cv
407.788 241.898 406.765 240.214 405.232 238.561 cv
403.698 236.906 401.653 235.282 399.397 233.328 cv
397.142 231.373 394.676 229.087 393.142 227.012 cv
391.609 224.937 391.007 223.073 390.857 220.877 cv
390.707 218.682 391.007 216.156 391.699 214.592 cv
392.391 213.028 393.473 212.427 395.006 212.547 cv
396.541 212.667 398.525 213.509 399.187 214.502 cv
399.849 215.494 399.187 216.637 398.465 218.081 cv
397.744 219.524 396.961 221.268 397.654 223.042 cv
398.345 224.817 400.51 226.621 402.525 227.944 cv
404.541 229.268 406.405 230.109 407.307 229.688 cv
408.208 229.268 408.149 227.584 408.69 226.2 cv
409.232 224.817 410.375 223.734 411.667 222.952 cv
412.96 222.17 414.404 221.689 415.487 222.381 cv
416.569 223.073 417.291 224.937 417.742 226.531 cv
418.193 228.125 418.374 229.448 418.073 230.771 cv
417.772 232.095 416.99 233.417 416.809 234.891 cv
416.629 236.365 417.05 237.989 417.261 239.823 cv
417.471 241.658 417.471 243.703 417.291 245.417 cv
417.111 247.131 416.75 248.514 415.546 250.8 cv
414.343 253.085 412.298 256.273 410.885 258.739 cv
409.472 261.205 408.69 262.949 408.6 265.054 cv
408.509 267.159 409.111 269.625 409.412 271.4 cv
409.712 273.174 409.712 274.257 409.352 275.43 cv
408.991 276.603 408.269 277.866 406.976 279.024 cv
405.683 280.182 403.819 281.234 402.661 282.633 cv
401.502 284.031 401.051 285.775 400.736 288.076 cv
400.42 290.376 400.24 293.233 400.42 296.015 cv
400.601 298.797 401.142 301.503 402.435 302.751 cv
403.729 304 405.773 303.789 407.157 302.315 cv
408.541 300.842 409.262 298.105 410.33 295.669 cv
411.397 293.233 412.81 291.098 414.45 290.226 cv
416.088 289.354 417.953 289.745 418.96 290.828 cv
419.967 291.91 420.118 293.685 421.065 294.948 cv
422.012 296.21 423.756 296.962 424.674 297.774 cv
425.591 298.586 425.682 299.458 425.832 300.827 cv
425.983 302.195 426.193 304.06 426.825 305.428 cv
427.456 306.796 428.508 307.668 429.921 307.924 cv
431.335 308.18 433.11 307.818 434.087 306.691 cv
435.064 305.563 435.245 303.668 435.696 302.586 cv
436.147 301.503 436.869 301.232 437.139 300.345 cv
437.41 299.458 437.23 297.955 437.169 296.857 cv
437.109 295.76 437.169 295.068 438.478 294.045 cv
439.786 293.023 442.342 291.669 444.131 290.301 cv
445.92 288.933 446.943 287.55 447.333 285.686 cv
447.724 283.821 447.484 281.476 445.89 278.257 cv
444.296 275.04 441.349 270.95 439.274 267.883 cv
437.199 264.815 435.997 262.77 435.424 260.665 cv
434.853 258.56 434.914 256.395 435.544 255.252 cv
436.176 254.109 437.379 253.989 438.162 254.831 cv
438.943 255.673 439.304 257.478 440.357 259.643 cv
441.409 261.808 443.154 264.334 445.018 265.447 cv
446.882 266.56 448.867 266.258 450.31 265.688 cv
451.754 265.116 452.657 264.273 453.078 263.131 cv
453.499 261.988 453.438 260.545 453.709 259.312 cv
453.979 258.079 454.581 257.056 454.912 255.793 cv
455.243 254.53 455.303 253.026 454.521 251.433 cv
453.739 249.839 452.115 248.155 448.295 243.253 cv
444.476 238.351 438.461 230.231 435.124 225.992 cv
431.786 221.751 431.124 221.39 424.328 217.902 cv
417.531 214.414 404.6 207.797 397.473 204.038 cv
390.345 200.279 389.022 199.377 388.03 198.354 cv
387.038 197.332 386.375 196.189 385.985 194.896 cv
385.593 193.603 385.473 192.159 384.3 190.836 cv
383.127 189.513 380.902 188.31 379.669 186.626 cv
378.436 184.942 378.196 182.777 377.955 180.491 cv
377.714 178.206 377.474 175.8 376.993 173.875 cv
376.511 171.951 375.79 170.507 375.458 168.733 cv
375.128 166.958 375.188 164.854 376.18 162.869 cv
377.173 160.884 379.098 159.02 379.94 157.185 cv
380.782 155.351 380.542 153.546 380.03 151.953 cv
379.519 150.358 378.737 148.976 379.218 146.81 cv
379.7 144.645 381.444 141.698 382.255 139.172 cv
383.067 136.646 382.947 134.541 382.166 131.022 cv
381.383 127.503 379.94 122.571 379.729 118.542 cv
379.518 114.512 380.542 111.384 380.932 108.858 cv
381.323 106.332 381.083 104.407 380.601 103.174 cv
380.12 101.941 379.399 101.4 377.534 101.43 cv
375.669 101.46 372.662 102.062 367.701 103.205 cv
362.738 104.347 355.821 106.031 352.333 106.572 cv
348.844 107.114 348.784 106.512 348.814 104.167 cv
348.844 101.821 348.964 97.731 349.326 80.311 cv
349.686 62.8911 350.288 32.1421 350.407 16.7676 cv
350.527 1.39258 350.167 1.39258 348.933 1.52051 cv
347.701 1.64844 345.595 1.90527 327.852 2.54443 cv
310.109 3.18359 276.728 4.20605 230.575 5.69922 cv
184.42 7.19238 125.493 9.15625 95.8486 10.1445 cv
66.2051 11.1323 65.8442 11.1445 65.4834 11.1563 cv
65.1226 11.1685 64.7617 11.1802 64.4009 11.1924 cv
64.04 11.2046 63.6792 11.2163 63.5283 11.7939 cv
63.3784 12.3711 63.4385 13.5137 63.5435 17.9346 cv
63.6489 22.355 63.7993 30.0542 64.4609 58.7129 cv
65.1221 87.3721 66.2944 136.992 67.3623 184.958 cv
68.4292 232.924 69.3916 279.235 69.8125 303.233 cv
70.2329 327.232 70.1133 328.916 69.9932 331.562 cv
69.8726 334.208 69.7524 337.817 69.1509 357.425 cv
68.5493 377.032 67.4668 412.638 66.625 438.681 cv
65.7827 464.724 65.1816 481.203 64.6401 489.639 cv
64.0986 498.074 63.6177 498.465 63.0161 498.601 cv
62.4146 498.735 61.6934 498.615 60.2192 498.028 cv
58.7461 497.442 56.5205 496.39 54.686 495.834 cv
52.8516 495.277 51.4082 495.218 50.1602 495.487 cv
48.9121 495.759 47.8599 496.36 45.9199 497.518 cv
43.98 498.676 41.1533 500.39 38.9883 501.547 cv
36.8232 502.705 35.3193 503.307 34.312 504.646 cv
33.3047 505.983 32.793 508.058 32.6279 510.088 cv
32.4624 512.118 32.6431 514.103 32.8232 515.666 cv
33.0034 517.23 33.1836 518.373 33.9053 519.396 cv
34.627 520.418 35.8901 521.32 36.7622 522.764 cv
37.6343 524.207 38.1152 526.192 37.8149 528.508 cv
37.5137 530.823 36.4312 533.47 35.6797 535.815 cv
34.9277 538.161 34.5063 540.206 34.687 541.92 cv
34.8677 543.634 35.6494 545.018 36.582 546.972 cv
37.5137 548.927 38.5967 551.453 39.3784 553.678 cv
40.1602 555.903 40.6411 557.828 40.3408 559.572 cv
40.04 561.316 38.9575 562.88 36.8525 564.264 cv
34.7476 565.647 31.6196 566.85 29.4844 567.872 cv
27.3491 568.896 26.2065 569.737 25.6655 570.64 cv
25.124 571.542 25.1841 572.504 25.3345 573.346 cv
25.4849 574.188 25.7256 574.91 25.4248 575.872 cv
25.124 576.834 24.2822 578.037 23.1992 579.24 cv
22.1167 580.443 20.793 581.646 18.0566 581.977 cv
15.3198 582.308 11.1699 581.766 8.13916 582.188 cv
5.1084 582.608 3.19678 583.991 2.24121 585.676 cv
1.28516 587.359 1.28516 589.345 2.06055 590.878 cv
2.83594 592.412 4.38672 593.495 6.84619 593.044 cv
9.30518 592.593 12.6733 590.607 14.7485 590.156 cv
16.8237 589.705 17.6055 590.788 18.7183 591.721 cv
19.8311 592.652 21.2739 593.435 23.0186 592.743 cv
24.7627 592.051 26.8076 589.886 30.8071 587.66 cv
34.8066 585.435 40.7617 583.149 46.0244 581.856 cv
51.2866 580.563 55.8579 580.263 59.978 579.45 cv
64.0981 578.639 67.7666 577.315 71.6763 576.143 cv
75.5859 574.97 79.7358 573.947 82.6528 573.496 cv
85.5698 573.045 87.2539 573.165 89.3892 573.346 cv
91.5244 573.526 94.1108 573.768 96.5464 573.346 cv
98.9824 572.925 101.268 571.843 104.847 571.843 cv
108.425 571.843 113.297 572.925 117.327 572.083 cv
121.356 571.241 124.544 568.475 127.04 566.429 cv
129.536 564.384 131.341 563.061 136.212 561.166 cv
141.084 559.271 149.022 556.805 156.841 554.279 cv
164.66 551.753 172.359 549.167 177.441 547.212 cv
182.523 545.257 184.989 543.934 188.177 543.362 cv
191.365 542.791 195.274 542.972 198.763 542.46 cv
202.251 541.949 205.319 540.746 207.604 540.235 cv
209.89 539.724 211.394 539.904 213.559 539.182 cv
215.724 538.461 218.551 536.836 222.55 536.205 cv
226.55 535.573 231.723 535.935 236.564 535.483 cv
241.406 535.032 245.917 533.77 248.864 532.807 cv
251.811 531.845 253.195 531.183 253.585 529.979 cv
253.977 528.777 253.375 527.033 253.134 525.56 cv
252.894 524.086 253.014 522.883 253.706 522.041 cv
254.397 521.199 255.661 520.718 256.232 519.334 cv
256.803 517.951 256.683 515.665 257.134 513.35 cv
257.585 511.034 258.608 508.688 259.51 506.854 cv
260.412 505.02 261.194 503.696 261.375 502.042 cv
261.555 500.388 261.133 498.403 261.855 497.11 cv
262.577 495.817 264.441 495.216 265.644 495.275 cv
266.847 495.336 267.388 496.058 267.629 497.471 cv
267.87 498.885 267.809 500.989 268.261 502.884 cv
268.712 504.779 269.674 506.463 270.215 507.786 cv
270.756 509.109 270.876 510.071 270.576 511.094 cv
270.276 512.116 269.554 513.199 269.734 514.222 cv
269.915 515.244 270.998 516.206 270.998 517.409 cv
270.998 518.612 269.915 520.056 268.05 521.83 cv
266.186 523.604 263.54 525.709 261.946 527.514 cv
260.352 529.318 259.811 530.821 260.412 532.024 cv
261.013 533.228 262.758 534.13 264.712 534.882 cv
266.667 535.634 268.833 536.234 270.727 537.769 cv
272.622 539.303 274.246 541.769 275.75 543.121 cv
277.252 544.475 278.636 544.715 279.568 543.993 cv
280.5 543.271 280.982 541.588 280.862 540.054 cv
280.741 538.521 280.019 537.137 280.169 535.452 cv
280.32 533.769 281.342 531.784 283.598 528.146 cv
285.853 524.506 289.342 519.214 292.289 515.124 cv
295.236 511.034 297.642 508.146 299.145 505.17 cv
300.649 502.192 301.25 499.125 300.95 496.539 cv
300.649 493.952 299.447 491.848 299.356 489.562 cv
299.266 487.276 300.289 484.811 302.634 482.855 cv
304.98 480.901 308.649 479.457 310.814 478.284 cv
312.979 477.112 313.64 476.21 313.941 474.916 cv
314.242 473.623 314.181 471.939 314.933 470.646 cv
315.685 469.354 317.249 468.45 317.73 467.248 cv
318.21 466.045 317.61 464.541 316.828 463.038 cv
316.045 461.534 315.083 460.03 314.993 458.377 cv
314.903 456.723 315.685 454.918 317.039 454.046 cv
318.391 453.174 320.316 453.234 321.458 452.572 cv
322.602 451.911 322.962 450.527 322.993 448.783 cv
323.023 447.039 322.722 444.934 322.121 443.1 cv
321.519 441.266 320.617 439.701 320.226 437.025 cv
319.835 434.349 319.956 430.56 320.707 427.823 cv
321.458 425.086 322.842 423.402 323.684 421.868 cv
324.526 420.335 324.827 418.951 324.887 417.508 cv
324.948 416.064 324.767 414.561 324.676 412.245 cv
324.586 409.93 324.586 406.802 323.955 403.193 cv
323.324 399.584 322.06 395.494 320.948 392.908 cv
319.834 390.322 318.873 389.239 318.061 388.036 cv
317.249 386.833 316.587 385.511 316.587 384.247 cv
316.587 382.984 317.249 381.781 315.986 380.397 cv
314.722 379.015 311.535 377.451 310.271 375.826 cv
309.008 374.203 309.67 372.519 309.219 371.406 cv
308.768 370.293 307.205 369.752 306.302 368.489 cv
305.4 367.226 305.16 365.241 305.611 363.888 cv
306.062 362.534 307.205 361.813 308.317 361.933 cv
309.43 362.054 310.512 363.016 312.106 362.865 cv
313.701 362.715 315.805 361.452 319.714 360.279 cv
323.625 359.106 329.337 358.024 332.225 356.49 cv
335.112 354.957 335.171 352.972 335.171 351.228 cv
335.171 349.483 335.112 347.979 333.819 347.138 cv
332.526 346.295 330 346.115 328.556 345.514 cv
327.113 344.912 326.751 343.89 327.624 342.687 cv
328.496 341.484 330.601 340.101 332.074 339.108 cv
333.548 338.116 334.39 337.515 334.36 336.281 cv
334.33 335.048 333.427 333.184 332.044 332.131 cv
330.661 331.079 328.796 330.838 327.834 330.297 cv
326.872 329.755 326.812 328.914 327.292 328.191 cv
327.774 327.47 328.796 326.869 329.939 326.568 cv
331.082 326.267 332.345 326.267 332.947 325.515 cv
333.548 324.764 333.488 323.26 333.006 321.726 cv
332.525 320.192 331.623 318.628 331.382 316.824 cv
331.142 315.02 331.563 312.975 331.563 310.81 cv
331.563 308.645 331.142 306.359 330.811 304.013 cv
330.48 301.667 330.24 299.262 329.758 297.487 cv
329.278 295.713 328.555 294.571 326.811 293.579 cv
325.067 292.586 322.3 291.745 320.586 290.873 cv
318.873 290 318.21 289.098 317.038 289.038 cv
315.865 288.978 314.181 289.76 312.617 290.391 cv
311.053 291.023 309.61 291.504 308.256 291.263 cv
306.903 291.022 305.64 290.061 305.039 287.294 cv
304.437 284.527 304.498 279.956 304.978 277.34 cv
305.459 274.723 306.362 274.062 309.91 274.453 cv
313.458 274.844 319.654 276.287 323.804 276.888 cv
327.954 277.49 330.059 277.249 331.051 276.287 cv
332.043 275.325 331.923 273.641 332.645 272.769 cv
333.368 271.896 334.931 271.836 335.802 272.829 cv
336.675 273.821 336.856 275.866 337.637 276.858 cv
338.419 277.851 339.802 277.791 340.946 277.67 cv
342.088 277.55 342.991 277.37 343.591 278.001 cv
344.193 278.632 344.494 280.076 344.284 281.58 cv
344.073 283.083 343.351 284.647 343.953 286.332 cv
344.554 288.016 346.479 289.82 348.343 291.083 cv
350.208 292.346 352.012 293.068 353.155 292.707 cv
354.297 292.346 354.779 290.903 354.869 289.188 cv
354.959 287.474 354.659 285.489 354.539 283.745 cv
354.417 282.001 354.478 280.497 355.411 279.023 cv
356.342 277.55 358.147 276.106 359.35 274.844 cv
360.553 273.58 361.155 272.498 361.245 269.551 cv
361.335 266.604 360.914 261.792 361.064 259.206 cv
361.214 256.62 361.936 256.258 364.042 255.417 cv
366.146 254.574 369.635 253.251 371.319 252.168 cv
373.003 251.086 372.882 250.244 371.349 249.823 cv
369.816 249.402 366.869 249.402 364.192 249.131 cv
361.515 248.86 359.109 248.319 356.974 247.387 cv
354.839 246.455 352.974 245.132 352.102 243.387 cv
351.23 241.643 351.35 239.478 351.38 237.433 cv
351.411 235.388 351.351 233.464 352.042 232.021 cv
352.735 230.577 354.178 229.615 354.78 228.593 cv
355.38 227.57 355.14 226.487 354.298 225.946 cv
353.457 225.405 352.013 225.405 350.96 224.804 cv
349.908 224.202 349.246 222.999 348.916 221.646 cv
348.584 220.293 348.584 218.789 348.344 216.954 cv
348.103 215.12 347.623 212.955 346.991 210.068 cv
346.359 207.181 345.577 203.572 345.156 200.685 cv
344.735 197.798 344.675 195.633 345.457 194.039 cv
346.239 192.445 347.863 191.422 348.404 190.129 cv
348.946 188.836 348.404 187.272 346.75 185.739 cv
345.096 184.205 342.33 182.701 340.615 180.656 cv
338.901 178.611 338.24 176.025 337.307 173.83 cv
336.375 171.635 335.171 169.83 335.262 168.567 cv
335.352 167.304 336.736 166.583 337.878 166.643 cv
339.021 166.703 339.923 167.545 340.706 167.455 cv
341.487 167.364 342.149 166.342 342.781 164.627 cv
343.412 162.914 344.013 160.508 344.825 158.223 cv
345.637 155.937 346.66 153.772 347.591 152.449 cv
348.524 151.125 349.367 150.645 349.727 149.352 cv
350.088 148.058 349.967 145.953 350.268 143.818 cv
350.57 141.683 351.291 139.518 352.494 138.134 cv
353.697 136.75 355.38 136.149 356.553 136.961 cv
357.726 137.773 358.388 139.999 358.598 142.495 cv
358.809 144.991 358.568 147.757 357.606 150.314 cv
356.644 152.87 354.959 155.215 353.065 158.915 cv
351.17 162.613 349.065 167.666 347.682 170.703 cv
346.299 173.74 345.637 174.763 345.847 175.816 cv
346.058 176.868 347.141 177.951 348.916 179.725 cv
350.689 181.499 353.156 183.965 354.743 187.115 cv
356.33 190.265 357.039 194.098 357.603 196.767 cv
357.603 196.767 li
cp
228.039 694.93 mo
229.603 697.605 232.31 701.756 234.053 704.673 cv
235.798 707.59 236.58 709.273 235.979 710.688 cv
235.377 712.101 233.392 713.244 230.986 714.056 cv
228.581 714.868 225.753 715.349 222.716 715.379 cv
219.679 715.409 216.431 714.988 212.552 715.86 cv
208.672 716.732 204.161 718.897 200.733 720.131 cv
197.305 721.363 194.959 721.664 193.305 721.424 cv
191.651 721.183 190.689 720.401 189.847 719.349 cv
189.004 718.296 188.283 716.973 188.192 715.95 cv
188.103 714.928 188.644 714.206 188.885 711.65 cv
189.125 709.094 189.065 704.703 189.155 701.876 cv
189.245 699.049 189.486 697.786 189.727 696.463 cv
189.967 695.14 190.208 693.757 190.99 692.734 cv
191.771 691.712 193.094 691.05 194.628 689.757 cv
196.162 688.464 197.906 686.539 199.049 685.186 cv
200.192 683.833 200.733 683.051 201.425 683.141 cv
202.116 683.231 202.958 684.193 204.372 685.576 cv
205.785 686.96 207.77 688.765 209.364 689.666 cv
210.958 690.569 212.161 690.569 213.394 690.058 cv
214.626 689.547 215.89 688.523 216.371 687.682 cv
216.852 686.84 216.551 686.178 215.859 685.096 cv
215.168 684.013 214.085 682.509 212.853 680.885 cv
211.62 679.261 210.236 677.518 209.484 676.585 cv
208.732 675.652 208.612 675.532 209.244 674.66 cv
209.875 673.788 211.259 672.164 212.101 670.45 cv
212.942 668.736 213.244 666.932 213.033 664.676 cv
212.822 662.421 212.101 659.714 211.68 657.429 cv
211.259 655.143 211.138 653.278 211.439 652.195 cv
211.74 651.113 212.461 650.813 213.785 651.083 cv
215.108 651.354 217.032 652.195 219.017 653.369 cv
221.002 654.541 223.047 656.045 224.46 656.947 cv
225.874 657.85 226.656 658.15 227.107 659.143 cv
227.558 660.135 227.678 661.818 227.648 663.894 cv
227.618 665.969 227.438 668.436 227.227 670.601 cv
227.017 672.766 226.776 674.63 226.265 676.705 cv
225.753 678.78 224.972 681.065 224.821 683.291 cv
224.671 685.517 225.152 687.682 225.603 689.366 cv
226.054 691.05 226.475 692.253 228.039 694.93 cv
228.039 694.93 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (M) ()
%%Title: (rhode-island-silhouette.eps)
%%CreationDate: 9/23/2015 9:38 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!U'D0$smEp%_OBu]U<AnuJ-g!sIc+u1>u8$C:qKU*62jH1Erf!I2927hFnL^%5eRN1VATE"oYO]CU7!uOV=a'Hn#NJ`VVnF1)b
%ps!`K?,"!sFa!<Og#ZT?YSi3j))l]\S#O[TJ+T5fr:dP$G;nti3N>Fs<putjc#bcpL$I,aV88)5e$j7=(UmaW?_6\'DOt4,?XDXf
%@IsD`mD\4Gm;)T2]D3P\oCL.t2p]dYVa"@Sj3R"7-YMVSPKW8NgY5Fa)H9hQ;r^*u==`]f^SC_5Mpq:,YBF8Uqq\=!hUqQ]qI]S!
%+26FahV)d_eAR<;J+5c&iG^])fF18K*HJH8gU+>uk`6nMCk"!'C?+H?J,XcgqX!A<H@(!^H1<Q&V4ZeoRa:2eh::)kY`W`5qqidp
%jlXPMqsE/0>G(1m?d&G]rU#=lrnHSY.nX^/Wbhqt[Y_s&r)9'9K)WOB-2tZ_pASFsSMt+9qD_i1on"p(=(oK`XS-ds#3if%./?8p
%A:qYQ]t$2]hX5LDAS@R=[/P!I@L&d6Vk^dRo=4U%*fn<Q6^=FrL:ir'A=oXj*\)=tSaCn*_re`&[]al+EVRT+\)3_SRiQNB#"_IJ
%iih72n#l\4EHZ-PjW,q%!+0!Fg7A-*7e;i8/a%Pl.Jb&B^>3,1hVB(q?_5#Ds8T<kL]6*OhnJo6qoeF(VK]OtpZ9rninMY+e3ndf
%;DLM0CUW,D2T%@gVD`@5djT@EOT:pM=[p/J65R?,M1bWH_"5b8Ze&h+J*=5.^AGP.ZWDL@[C\Bp0<O/G559'\s2@BCfseH&Ma$`s
%^O,t!^8GC!qVmt]j4b[4^3P"/4gT"3UJ,sik^#HL.)1#3^"rZr;shBe=T5UOp<0T+dpPD:n@LQ,0+5Oe5OYGFn8Bb'>708Rinp>t
%W4=j&NG>TcWAU]`7^^fB:3rh]6Ch\]c=0"Q^+<5f(96m@^T$r)3Rs]cVs3g9I.R7rF\Y^,p>i#,2*X*p_T@Wnnk&_CI7?DtInS8i
%I4<a;J#LAupe<WseQ;(oYpb'"LIL`;C[^$:NEI(4q8B$&9io&3hDL5N\(8hH'XKD]of_sc:lV=ARlVoEPk@u'jF*qS07Bnrm7i$%
%^&Xe>cd'S_jSMgI.fMdmf#Vd@nq6S"qfd%!r'<3kfMC51`Z)6RIe/C"3ZRWN-;P5gWQ#kPm>'raig]6i@*B)gRXBmdIWRbBhg;C!
%k4QFXeb]D)H(UOdm!\V<o.']o3\7MQ-js!q?b([2)Ym)bLNV23qr3V29cY!_br_0aS)i>e@lU9.E:-!?iD,S\OE$rWQ_^7Un%R,o
%pYJF6c-tbN_=[EroVpE^p[5]ss5&67npXFVZMj-<K=m*UrAZ4oDnicdk5G#AmoePLrB5*jmrr.MM/'b[VLJ.2Vqq)nIi?P1Dl9&m
%\"lg/:UuPQ*IH8"#6"%0TZRs53VunTJ,O""rU^"qs0:^oHI;_!s-Y56]`6T5k1MuFo/c^f5KChDec&qUH1oHHn,N&&C]<=I([_7q
%T2.]Echi4jB39WbcZ=j=p@It'rKI9))Y<`OX=#ZA[EgL\nTa3joRbsXk@sr<-$_P>q2\_4_..dg1]OSBk$BM9H]^KTRHZDHE%gS1
%iffg0U#_E*VGucOH\6OWpC8%tRbu_)?f@^HNZk`i<Or"[5/#Tuo&_Sho_#hgL68%4db.9e-<aE@fI#K(qp1a*O*tX4^TL0%cU0jP
%Xg9\5;d[)]@Gdl1j3[9jH&C#"hg8_em7s,fhrPN,#shjh$6,^oK7,fN;KXtrL/H5Kq)?@kanIG/4FJOpV14j04)_(2Dg\=4o.TQk
%fCmIjd7GE7Q8&#Nqp*Z4nm,&qCVmj"@l7WEk!LuOC/3=Xk3Y*#QfTJREgYb1:j%0QqG[.2WtoR.aaP%.[uIj<BmS_q"6q`APMWcK
%4Rq1>YC&&'8UO`"qXM5%b)4Vnj##bdKrJ\U6VGaYD6.LDa[T8Nbg6s@1NbUYTR+JH3)YSP\$%"&D!u9geb?JGq\-*&a\4AaZumsX
%0'@V,hL,Y"Z1#rBrBBq_qqh'2eKgI-43U?F?Zk?h-gI_BY@G>JXA,0/gmar33NLAb1NlAUl\.4j1\L&9?J,FBAl<(b075E^o\LON
%M@6u`kT+%HFjP8:S&`+JgV/3jCN\m2$G:/mPPkmkf<#;.1!5>_5)2Q+>>>"g*R#Xpn'PZQ1SaE4]\g65J3F(;?%mEN7?1k23bmq-
%:C"=^6Q\J4KTCV5,k"tG2*?>;jM(?,.BAN@D\Qlc?dX#?IVA'MboMZPDKf@A==Xgk7pLUjoIG!5)!E;1c#HV3;%J2'?"=2o]"bP!
%_KXT-BoL9Mm.#Ni?,nGra`kRs:]"PZ/"lR+O2LNO<lL8O4TfAhoh2lf9'`GHj:E'09qQRLjp^r3,4L]JpuoaGo3nCR]RW%cf_0Q_
%"#Iis"F:>!D4H:Jn\KqPc8pC^U@Pt7r'A69\a/Z)!&FW@Im"/FI'F_4Hg@/A4Pt"emYILVZ^BL*($YjISEt/rT=i0'52#DtEQg'S
%k8/IX\ZW:m5`MD<;gto!mIig"a'I*Sg124,AIgZef[b9?iMKTGXh/Z#qsLU-3VWa1UhQHrO7(9e9ojW)D;i=P_:'GJ[0'+7LS]EQ
%qo1h4i6GKmRiWZWSdqJUJPY`0rLisI;?tQG9b*1;TRK>YHWnnoq:IfB5ruX)S(E&N*pdV/Y_iOf,qHB-\*eco*3W?8J2Is/bPP%8
%I+Ls/b%V:1%kgj2/$b&eV@2F*Lrg^drb)11#j8kT]Mn8^:]tp!;ou<8T_C+^6$!8G31%F"_2+^+?\r$E_[)"M6$M$)>RM>BA/.#Z
%iLP%^K=81[9l(h5"p]Rl,'9J4cLrM#ARG2SF#[NnpKo"7%AgBU`UQ&bp\9f'3a[*ZfoOG1eW<m*Cfae$;!AC[F%4@hT!h^7HQHd8
%NbqZS-sNEPlAHRA6\b8#qAWf6H_tNN)t7;NPr\9NWd;/*SAqu'08<Di)RS#oUZ6[e*Q7C_-dQ;i-fUiupSZ;,W^;,R5S.;PkD)0]
%IgU:khOj2?r-l$07,9Hn8A/>+fK-4G[78W*T!eR_@Tae^o=^\<YD6"T?g6($:Bu+aGkF"f?G&V&*Ig8fI"U\BB%;*TFa\Oaq)Z7G
%J'`Dslu(]eKa(lfhu3)n)Ot*+;ucWf5PfTqG@-oU[4hRJqXX%(B,BH4If.S@a0.+&mPZHUg[!\8^]!Q^'7I6;^ZXLLmFg$.+)1aa
%p\j4HRsbNJqWYsp]CX4HK9"QHmDZ-N5AdU-T$mF9kM(p^ogW;iI=H_>PC9dF(%-G+QT_>&h=]%CmdsP><9Keq*iO&IePh5!p3M(#
%#I4*qjhFtDCEE`Rf4X:0De6/b]KY'JAbYDa\$nS<St5=&?JV^SoT/HWK,6^_Eo6fck2k_#g!-"o_o%Z1mjDs$G+IrW0/%^Af5GSV
%fR/$kH+r06Y7P(._<(OEg\bdj=Y&AgJ:77ZmJQeRr;>pSp%I[+Zd\gJ^ZYK:TF\DX&epmOfC'[KmT8^^n$i(7N5J,7Is1A)RXF`#
%luokq\]Zp5\.ibnq-eV=0f;`:C@:u$h\hG<`504ch4rWuhpZ3-n$#4;rc4%toCr9(EV]3[5&L:,X81p4n,LRL2o#CQp<@LH2cf+2
%ZSttK]=$(kq3#*?`r&&>.J_\H4mI.Ic2N)aK5RC_o.PLfHi*,9XmG4F)E(r=rqToUc)Zom9C#Vg]X"Lr$NJkA5MH%lB$)3!Q>OUW
%U)r3_YI<UU4(Vd=="g10mrr%aZibgW2g4Up?])$^mD!<2frS]_FbfV"FaE4YhI!Qiq00\D)Z37KgiW4=olBBbh9lgn&<lN'&Aa`]
%p\S7sh!jk#PjR.1rt5Kbro3N6?G>-Ai9S/6I.EU_k8.1XGBPF=cX+?!h&.C5)c])9^>AiBmH-WIP_4:[5Fe:Z]&$^\Xh=K.B=:h+
%fDN5Y"l,fT5P`&IDSH!^H[YLpFud=B&WB/g;tm3Wq:i;4?eg%%ie?4TW#)eN\bkoHqlRH>]\#AYQd.6[J)%_`dPgcuJ+K^Ci6*o:
%X/2^FdU:'Sr]b-T:KZghp&@^YplB>cH?`A[[M<H0Qfkt.h2J8%o`+B1nCJn=5Q(.qZp<GS#Jd[k;j2V^hu!i.huBSsqM1Olr"_-=
%mbuV<omaroOd"t3CHhc2?0.REJ,U1up\tGbr9!qDo`#mf/jJsbJ%aU.5Hs3USoii(r(8ZO]?o_2=7qoX61M-h<E%15\Cj$VX<2Uu
%YCCd0Z<XI0.Mc-E8\FYZ*aR^MB<Q3&GgcG_k-&6>[]X80QOg4ajlNU!)5$B3^NCXl-S=le7_]jj6AY3%bI?*$4,(3B3Z&4!F2*TX
%]\2+Y?Q#d7T.l\p5<PA6ng`-8:P--0g@#Ghr)lX]<V7POcR,A7G1W4eY'2h:gWb;"=7_gBR/QPfb@Z*LqsncSrG$DR+J6;l\Y!E5
%[F>`=9n-1!lW'T!qRtD6qoUf]?C95jq=]"'g.a$0Y2^l*r*jmA_rg:Pc0arqm,'o<BcdEJE9Ck7D0rn$)=JhE^Oni9rUtPaEHAOq
%6U(Ifk&C$/F*%%n:YrNAbM,hgbI=r^[\QD?rFkZ'YBMM`4hB*tQ.);k&3*qp[+fu?qoeBhdoU1kgQuR9B=GYBV]O[.%of0>04)EL
%^><_@]"C'dT&0FO\_:@-aPEB"H$d7g=Bt^\>W[+VQSOfV\+"/0l92(kZb?2)h::=d?/E;"DgQranaFuRq:4$K;<M)VaC]J+^M(Z[
%D3!N1?EOOAdZRYnZ7_qkc1C>A:YV@W%_uU]:]J3A83GCG&<'EbEkB*(&(LOr-K._]6a.UihldjOm`YFZ`GTa4#PuB=2n.D*5H^gH
%Y]`+,]tLp=gXm9ZHc8cY4\A5^!P8-tpp60nkN@7Lrm;KI#iY1D4g9,iOfJtGQTsl?Y>?k/2jqQ!Vrq\o"u;"WJ$GL:RY\lU62%P%
%[Ee5b5M;pfSTq\.hd2i@nYpC&l/hT=h5bl&E:`rk?JaQ;^*!:9f'.0>n7OE2?feT(\D/`PF*=6;?f&k'o\PnpN<.dT<q\XVp@XuA
%IIb]kls?6rI<0okroLV5&ANO9#h`"#4Q2PGXFL82^+I\!CeLc5R*2Q1h=^Kl)(5K[]OTiC;-+XlC\9\aL9ZnB_DL_h\r2k<rT]l-
%2WF\X?Nqp.EsIp?=6oN#>41G*l[:n&^N[02li5L^k09L%Bodi0*K+62a7&cHkjJu2SaY(Ii>Q1S%P-DkSfbZ:^')TjI\lN%Qg.H:
%J8KS)ma\?s`o<Lq4FIuHY9*)]22;!slQ.-K]Xk[<3[:NukhP[tdq[`GG&gZNH;sIQ[BC)D]Qm1@b9Q[cS9S]oVc<Zko)%loFq;l#
%omV.phL"#RYEpnZ>Aqen?Q;u.r.1:tf9[XS4P6QH?@IBI^3`JkmENh\gGdlf8*YDsl[-.SpSsjW?QYhF?5WOPKcPDO\l;u*oLkqP
%+0'_elKIf-/%p@I#$1>B_dbo9?N45bQk*.0<OgN44m0r&2Tt^Ze^4n'Xn^?Io=K>Ik/S^1/;smapc>CKhku+uI%[V_ea;&WroB,\
%]bft5CKDG8IAeUii+0%XL7DOsJ,*3[lN;e;@s,b:^>*&P4F$b&C&>8aAbYG/>]H\8*a_%'nfbSh6M3FmU4'9FS*fm02t+ug$+9L`
%ImW87R6RDASXJAjmdDe#mENonb@c3MkU(e/EI7?Cr9F.UbDQUDr70%(]U0k*Rn#a)k/bmsN9#]C4XA\K<W1+kdIhjR8M%]+<F7rs
%M-7g5@0[eNIClnjkkt>\I9s\"^3SnqVu+b4of<J/o-"$[F4?WQbM++^f+6*sT^(d2?QR(j:bTjL%fqMe$D-0I2#.^+4A:b'BP'I`
%:<IP*X3Jgp2D;4-/A(l]91@#+2Wb&:I2C^fLjJOXU4`3LP?QC64G]4FSTguS0+ERBH^(a>^O?7WYtCSXUu?sVDGI\(]=#+<.m?AE
%][kX/kq<PJT.6C<gcW*C<pB>EI'47\+Q^,L"7*3a_I/GQT^*?AhD]AnC3NJ:hF]_F?`n/ppLCQ$h+tZSLMkV$0j2R3%jT&Oh<QZh
%M8sS:Z%*XO<'!gJipAeqqnW8#qu\s%FuKpTXXcnE#7,+VO689?Guk=A+e3<6gV`7No'5ijG!n3**ngYFGkLcE@d#l_+1]j\_;ARh
%5):1XCO:&@q7\c_]kWTPAAdj@E;I\KNkRO-r6t)1M=TD*_k6u#PAgHbbHLp.D`9oB%gf'DLdSH+5"W[B+^UaG4EQ^&J'_@jBsk_#
%J%Ou0dE*C&l5PE@Hdkf5YP7t[ln?!BYBJOTmnVc:`-Y4s6Ro17.`Z5NNpfa.DCq*5pJcH7=`hF4A,&m.Dr9_#eg_2)qlYt@TU3\5
%&GO#]?Jmnp#RaMsk/XeY'?2YRHk7jZTnrqB"(+8>BjMbH]=urQ`J8]&_`;lLp#G\Pf6k_/d(F15GP?^Mhd=+9^\eWc+5?"+;;>NP
%!PNCb!0+0gS:'K8$iAY!hJk9t(4C=NI^Z/^pG0:\M&qo0m)A)4([g)NSfTEF%o!#;ek1I:r:4m)4RKD^chDhd5Fc#lH?dR+2Z&!\
%D@_[M%kmYFY.)1D]@VA<nU!oWB[/I5n<>#.pr2@6jlm<-QZ%'EOUq/"HuQJMIUL%QPK(<9JF4-qHfHcUe2jkca4Idb?XEd-q'0qI
%#9,jR<.OsUe#si,GX'jOgBY:&V].]]^a_M'd!.c5HfXHV!N<S<n^n]5QeP_?&bst!35)rN\_Hk]F+8QQNuPYO_KiCgV;VP.mi]6?
%m+M!RMc\?iIJ1hWmd0hWQ/:<"3dBjDhIeD8i62:GTa5m]iWn%kGG4+IQLmuPq&f`Yo:KStGSag!`kWX4*C&Ff\Q/KBpQ,lZn%cEa
%gT.@[-*BGm\(>82^-E_3,a.(FatE/sC9R!R'2In`g[2s1@iM!ni=e9qj/#>Yg!Aa6+)K[iK]M"hYhOgXA9/D51,hGtYe/QCCk(Gl
%[MKl@pU=nhNtF)'CiB)(66]d,XBlN0Rm5`-A,C]7mI#)obN7L'Q15G*".,Q#QDWW3^>>GeCsFZGh<*X#s(5aCY8pl8GeCT#UncDp
%k"KC8mH/f^m=)kP`"(;4fYR.@mHG-Tpp5kpZ<?NUo9!NF"7ioZlc\bk'0<bY]Y4*&R(&h$UDk51omD(6G4kWqe#>kcq>&^_6b9?\
%SAhg)FNo"jrq\?tnD.gFal!E$4DKG@8UYWocQ4r9h5UD@j[2@UYPRq[p#5RjW%)Lm5MPN&+1b6kGQrs*Q@D-QISuYkqYTB8O4cM]
%RG&`)(>PPCea['1i=3ObE*t_+Z$ik42fE'?Vd*Q`Ia'/8809PB]Sf8ZkqQK**nAFj9Uftp5'"1t`6#pRP*,RU\)ss\Im)\=Qi0*]
%o^LXXWSa-!UZ08+j#f:]+MhU.2::qmLnWdGmIn#EqTSgNK84QocMih?R#.a7Q#g9X=1\C6;W:uSV/IuppNVC?Zi+V4Kor;i>PR_M
%U@mF#,M=,+q7[MM8oBR]P$*UgoU+UEVTJgCg5KT!k06F'=('[.rpo*15#L]AqX*G:$VB#0U&0EDrq+kOPIeI$G?3J;omsL*Ip1ZW
%R-8_s'e?lkcTcpWd=6T!j/&@d)#YP;Ue[Do\'P)c#tOZ\2n5pk]fi5R.Af/8q5B<rgpDH.VkIq`=P5MNV.![gFZGm,ZDgXqBMR(b
%lHqHBhW8H6Wc`$FC1$$ND,+fqNlo/o/k8PQZ;m?RL=oaio23f8D5]27UD5WOc;9@$eY@CBFt!$^/B_^lM@DV-RrL9$A$**.mcV\e
%mV!U-ph81nlag4pq5BQHMXkAeQ^NG)PBG?3%8&-$aN8)ICgD+aPRYfDX_Kq$MX&]U-Mq&.L,p98,jX$I7jD55Rc]II!2_[-.VrRr
%9m'CsUGgaSZIR63.@W(5Q+$Hap@iBuQ?JKbZ^sfQ)I'U1[bSa"8teSJ`\=geNL9W#;-)+UM^[g</QFqEbA:[TiMc6kp/TNh0/iXB
%)D+I)i,%t31sIq(68*.6<R;L^OR/o_O49'/ce?/qALc@glS,WfGq"XYb$n#JK<[4JI4X.@_MO:8N1e!7.kiq:q".UhV$<a&]M<FG
%[aJoMC<EQ_/-`rq?Ij;IWbh(GVPU&]">j9730aVOQ8X]%UtU!rdo`n6a6$qj7Q[!kq@4Frc'r<q3nls+c"-V+(jq8WTX4elA[EA>
%GGA3`-9]ri:fSF9CoSqnNEq46%F!2M=_lmH74;klaL1uSD7-YN4RBo"m`&o?X+I10k'sa*>C84,fM'Tqh2N'OWgh8RH7;4&n<t_W
%rs=m"n^FcOP8Dt?Ru^k*b_;MPmb?QgM@/^E:.&JfF7Fg]m7q0'!:^*BcC3np1\]*IK=)T;33(-`A8R?X?.&o8*nWa$`8p:V4;h\`
%:<dL57L&RO$/9pu)?L(0[@:VU-lL[3QW>JWD]Ia@"!DaeXF$IgdV:1AZ)_\&ZRgW`:!i`B2MO(mWd[j2gMB%!^=Bb4:lLg/'TVN.
%Hmb6!Q8dR?V:mT,mGkjIP6(52WD6&AcSjG?)R*%GpNb&1hSI7;HSugJcN\27)$&<4)N^f?ChQH8QgGb$ib)J3^JkpVAJ]3lF(rVf
%fK*@*e=(4c+044sblZH9F)PPMhDS"a4KtW0a,9u^gq4b4"f#+!,F*_hRZ??0gE]ULQ*ep]1CXOk=iegQ2qHYS.YrB8)edSd6T^LB
%3F$56-u$"^Q]j+:;o+iuosBmQ(1kT!R1?bC9e1NKoP=6ATT9td@^efTf5T"h(JT![hsC3jCA0=i#,'M4OR<$"G5\d5]44$4@sW=c
%(W.VnV/.9BRScC%.%hdl=u*t"be=1W:<WpS(CQ&O+GS2HV:s]_Vre05DVG4rBPXB-D<D\(.`dU@QdK^-][0k__,P5^F5tD2.pKbs
%ZH[4<Vi3gU4<#[M7bgFu0GuW%8=Yucl)PG^1AIEg@XD^3C:([00UB!.F+Kp7*r6B#SXar$`f?8+9gPfaAc3+eCDmt^"5ApJO&Xk1
%pNVaG59%_Kep3e6jupS2H4MfNrp`K3@3o6-r/oeD+2thah0@t6D6b=#SUI]#L)[*IE2]$>(^40[*?u97(6U"14b^5%A;/"MJ@]*4
%O9Z%s#'p><)^;5()=?EQ_b%(HFNdR<%8;?@?QCN7BDZkV)-lqRE%Jt?@H:,&0lii#;NtkUd3*Is#<FdPSrtMEBQ0H6o$n:ob6ncc
%_g*9/1BNdlE$j*hIW;Z0PB.SJ$h#p*&m]1_2FfbF^f.Ni'.&0$?G%FODu3T9"d/=]0S0P0$78tCKsh.o*:4MR0/<[R@!7$sS.83Y
%;S^N0jb&Z7/0T,Ab0"P!H5u9t9aa*%L1/^h):MPaLLZ^"=00cY2CjHH6Q'^TNf8il1;bqP6!u%OdBKXb\5Y<0Cqr"]Yi3SpV-Hu/
%AD6`&<F]YAQTR=B=#7lb[d>sYH^U<YM)F$EMqT%V<5\8a))C@rWh&+)b_b$qi_q:o@4.!WJU=/&js&QofN_<tRPn=sBa.gY'b,h)
%_]$@/PX*cY2B(7'9Z4qQM7TE)0*<N(V=ABl,I`s?CLsDF5i[$s-lKOh1b0!`-j3aV-$U>/bjNBG_+7=;Y8r^EPeK7i$Z4"oT6?.q
%/@.X.+^Q,ENk\<hO-LP(6p"m/%,S[g>oq(62#nW7cP79&S)lofVp/^.k/O?VrNX/sAK_fKr/XP6Y[4lAeaOA$'B(Sh.!K._0U16k
%V38?rFuO5D0]Nkafbu)RFC_K<C4IX/@Zt%RU.rdC$8^1J[7kDXJFNp7F,TCnAg12'd@:ZjnLB`k<L5[I@"Y/HABo8E5"pfe)0VAc
%pM,3lR:88\QmIgI^h*kgWYtZ5)NU*+9\jm<Y-rM%LAb";KV!I=?M:p\li<[ZHFN@amQd,,-ks/(#=k87I9?`Z)0E^E[E$f?e`t`"
%1#hnDYDmBKZSp[c`'uSn2#9H&:m[ji>pYu`fO;ePbu$DP8ZFQ<2s7&r/#ILnYG_dj\FH:66;nL\ZNCCu$piND*%r1sB9e_$Gjs1m
%GV_FX,g8),[G&(l=cUR]0^V5%6Du5sjZ_P69\#9qPU9+?R?f=U4\T[+!E\>RFi:K'!f,1u-OM/%QGnCp$ngCuP-tJt?^?4Z,cb*K
%2@N-Yqc\a@)F.7EA_]m1:g.<qB=)-uL,DATIY"uDVHLN=1<Q>'H6u<I<N"Q?bnWpgeXsZ*rH8Lp:'.0"SmY^X8EmAGlcUuu!_C5+
%.4&EVZC%iu&/k4G<?`kJ?u8MeTqe;YDkk+.`D[H"VM2(hZ)p*o"T5AXKcn]oP8f?b,<W"$!)aYmP@JI^@2QU>.5T7IWW>`S"I:a=
%@,XsG8rV0k,=I'LC-DVL/!54i6D*ceU,KrhgPtl<aLSk_&@&6-Z\Y$OGd)OgOp[NboG^i3]j743?oDn=!&rPL&hUXS#*;h2L:p+5
%/d]fX:YXu&<%+#FBT,_#'f#n61Il;tI;Z]p((HT:i(aR0fc*D;D<V+V>aGj'0g*o(#$MmLf0G2B,[dBY2KjR,`bU*a#)>pj&:64E
%'G(0^Ts#Hh%,W[*.U$Bb6P1.dZ_PO#fVTNSN=7j#HQX1BPX*.Q-#h<[og1N:YSe(X@H('#URENJ39:E3UE`KC.]iR[B5_lMbnQVr
%S6OhiPSj!G$C)O;6K0hLm'JUh)e#U5A%74Q"RqVGRDGXq!TD+[_i4[=\ZKW!5hT1fif%Lt:;u9</$Ur>^.2N+1X%R>O#g,?;(sXk
%fZ#!]=C<Qe?Q!sjalikh:[Q";,aT7r//b#_R3n7MC+H#:[aDXEK0%+sAjLpq+P<o`%=p<gWr4!<+hVJ,Fk;R\fM`/+'j&gSBbeq7
%do'.#-!2Wf?dnDF/i<5g"PEcS-?T%>:FIj8MLMKb1-d$qVDA`1l4fGGT)F8&F4"'L80kEl63^GJL?&N9LX^kL0I"^`BT>t0/ZNB;
%\S,BE'maVcX>Qu8C`JXWlAQq69$fh_%7M4O7heC@*g(>TE/=FOFNq9t=u4D?_Isr,<qe5q%,F0WQ!MkWi.Kifc#6/l)*"(5`^ZDt
%8kPL\pIo2a%EDU5O5LG2Yn$8h&E\cYcIQaS@aZPCVBD^kV+hmfE;E9o2<ZZ6+iIV\!sisGM,>2+_@qffj;5%2].Q?b9?g72Jh_fC
%C]qd="<O/7Mh*oa=<:)3RP`J1d,7HBMbs9fm/WGM%\Suc-&g'%R_6GS77XGBaOP0K1:1rWK]"G(Dp'"YI+h:PNctnp:LV[Hg:]:V
%m')peUr*$Vd,X?Z@$C7N1fTUjp]cd&glYm^iQMJLTV5E=;(aA&<40%go\4*PUiAW]ad%=Fab%;[,_nEPgE/JoEJF++s#:$nQ*$K0
%-&ubqbQMSCgoA_e+cdHPp)U*%@<-o2e6+IVe2K3h<.CA4@h(mGHS`KCJX[V1RXo:,Mt$I?FJdIlK&Je^Yqi:0+U,l,/uiJ6cQ[BQ
%b0>=Mrik4h+!<&/m!Q9`+u[*iM+K!k;f`LZ$3m<h+J^o:m2hh1S2MtE+?8Bl"U;*H>p;Y[U$uJ(;"KYpGi7>M&Q1rU$Q,B)1Dn]O
%0#<@ER=XDBmMg"HFQ6t8#!)ut-i[co^08s"XItX0ZrP2jR$'97=E>oDEq"itPO37s#4VBFZ;#I7"1=p[@+1IBo.dnA!*OuUH1('9
%!Ma2"0n\"R'4U`E?Ug8ZPXl.hXdb%\o;o)<5V^ZJe#Zpu3r'S`Ua)rCE!\mim:6]:F^_2U'MsGX"M(jtgbAoiH'"s\\gAlA;u0Sj
%*oesk^MdS6N<PTE)[MT."m/]D6(NDS%>=\LFMCbX,c0(d].!b!(&ThbcEYJf!)%7b0hOtL$\Di$)C39q+YJQ[%K-C1[CC,,-E/q3
%XY\1.71G&md&o2p!+W$F.FgB,(/`JRT_su<`qW&jWuEO\Uk02dF_rggEK/=[/8RC9LiY6[djKjD:J=XJ@`'oe"^5oYP`%=K'q@L(
%4C\I)NG:g:_7l;pQU#PFToGP!!>,o@k*sF5X@RqC5S7NDhC+424@U#_(&QbtOHsM9Nsa<$,"5G9bhPIq@n*%:Q&H[lG:WtcZa(aj
%hK$q3aBF0kKHW4c[)d,t9^[LhUIm0\&;.cV*N#PO(UBrL6&PrkM=`1B$'P!;]%s@OFGrSq_A5P`@*UGMeSJejRCt<bVehgXP*1ED
%b#!<bTS?'W"M%[WJ?ZmXc6bb62:UToJ`XhPaIjZ_U38%"g)WWs-Yef0?l-1FE.#nIo>^So_`Z;8Z1)XT9MQQGI/a1RB]=[Z4j=J0
%j8a*[rec6\o&+7\8u/_+=_dT/L:3@*G5s:,FR+C1LM=&u[<Abd-:od,N5qGr"WP<p%K90SZt2)(`u0<N\i"HIg1;D2?mJ*S*4rci
%Hu2EW)2F;-Ti!#)<5Y$5A-ZC[Xf[J_T)+7$F"=:.P*7eC62!'WgP#YnEZ"IpBH`81jtNu*G.m)tdYm7B4qf>^11A[4':U^[1F(om
%cl"doZ8WZCAkK<+B\)\/TehEM<,@>q#2(%oP+rY9&_2E*U?b_T%N[GoZ*\a3j33l+bk%Q\RIdg*R%+9t[5@S$@p'aV^nbN#-5t'a
%-IkbJe\jM!$JmdMPLp9[l<3uGqb4DP2L/ZH"CTfY)YchooY$tm33c!_ZTfiM'40B4VEOJ7cM?2JSD0c7/:BfaKahRmh0;&U8iO+j
%bb>.7&2r_!AX\JS*"6PW#(O_,%&OB]/7JCX'MPZiZ$+ciVI[Wk6mO"VFuV6`Z,J2d)HNd?%',Q="YC'c`e$`)lma;>KB+>ucH01r
%%%(*E@8^ir(8L\]Jg8sUAkgKAjt`oH-mKs;#]K9gL?E3N\^2RUVSia'-,nE!C5Bi<Jtb+-;Y?)#AjR"@B"Tn?AidIrXdPUl@1\$A
%InBr=1pFf/_^%;1NHQ<&&Z.L/hXfer@Ec!U0QuZllr5GE#Y&[);,4^/h>9o5aWS^;L(m-F1t:/aTr$I98rUJB-_3&W[ut_CQ@cT9
%Hb1K(<\A:6VF2n\+`J,g9VGHC"L<0]BnO8'j]=/HE-+`!Utt;PWJ@f50gQpu]#Lj(V8J956/!0.EAV)Wf5B8l320r*.hoKR'?bYo
%V4Rp;Gmp.M!8mU*EOhf8XBC<.RmBN]'G`u;3&+0)3,/C81f-qI""Z-G8qL%"P:O2'\'(')>?I[TBk<e`N46#c)DPS+2c((+YS>+a
%-E=YLb5s%B'4Q,H,Zp^RBu]op(F-]t#0,q!2DW/N"oZ#e_U@n9:!j*_dEr:R<+WDjXl0Pcei!7+iSPFU#JYp9(6K-(+6I*:h!jq:
%rDOhk)p/j40Mt8=B.,+;`Q3:0iSQ#5"\V)F*B4ug89VhO?p\/d6c%o*XuI$0Pu.hpO*=#Y(PI!d-8VOe+YfYt=_IpX0<-8>NO&le
%22)bVDicfooPfmG+U%fdfWcl9[4M1`pa<T-N!0I6Pt%]-L*gPtN.]1[:Yk*J,*XlLqicBla>:gT@CFG*[>'l-Q#%R"P/Tu;eDq@+
%NOlRFef^\%4Flc^'r[N8ki=N*>,3E;SJ`s4ll%fN4WF_]9)o<@Cs9*uA65)=NJh:=K<r_tftm['W(\T>D>qThW/HboJG0I9bc\^J
%4$8t)@_CFu'I=D"2@1<eXNVZ-hIIFq'B+4U9PjLC/TQ@[IOtjeM/@1"geB%;Jb:$B1ga5h+k\L5jF/>197]/j$TF3$W17.#%13Xu
%R:k\11#QQR82E<^/Dll66kbR\#iW.BO0q4>>/=!C?Z1idj2V5mLPj^Q0a4PfpP\7,>sDO*dY!:;XWX$V0D-&;MJAsc"P9?SQ#_8@
%EP^"nA9X"O.L!0U):0eT(6^^H1t+&PKh>T?dKQ?XDuNmOD/05DJEf!dJTu,dRA,kW*Q/&c=$TQJNo_KpHcj$f*iHN61?kg`Em?JX
%cMZ,U!.tGPe,TQi/QiJBX+=/3]8e0\+m!)oD;W^0_a+^;m#EtNA$mq(!uAGI@'$'e?/->bR>=$H+h*c?k9\;g/YciMB]+K%5kSK=
%UbX)K,fO:r-4)r#r$4)B5I6b)V`ojZ$hoO`jFmTV76@7^2K@Zr%Z:[Q<L`$)Z^+d#+i6(aW1i=&K1cr6SV6T)3%O5!31K:5)T4U@
%QJ^@<S6cR7L]foQLq0b51hs2HK-bE1_b!<2!i[)8QiTn:_oYIp']'0c0B"/HUe<JQg,Pqq#":edHfc.d72dQai8Cel+G+?u4!;!S
%PJ5k)a\<WW<sY]DrfIo;?cWcseqp+6G](-fG'LU.q\thn##EP0IR3"&<5Z+QP_aZ]+E<BgVkICnH1q,=iB\(f3K8L,`L\@=9J-,C
%g0rkrG5.^G9%'D,#<c(/JkUHmh6e`+2TNB7;@tu9R''WNidrPu+':5!5%%W_!H&Cc-P9))aq<k$r'&.__81[dMdL@^`Ir-pIR3+g
%X2Zm4%_BZVObL@9IM)^K?3'sFB#ubear5Y`ODErkAPaMTLsf\LRh+@nG&c+&^F`r8MB];c@q](SK8f$Hh&bBB(%e*f_C1HATo[4V
%-5B9r_lS<B-kIhZ<f;2id>$2jEiQYB60-BhAf:W:VEs/D?,2(jN/K)oF7LcX5Bm;]'>"M`,*sKG9^$ZNAS<;7ZeLAe%cf4A.o-AS
%M3[HoaDDLL<ZLp%Xn1fd2XLku(ZAtc9,RmG%-0];Z%AM%2G?3s4EFDopu*d$NU>%W2QWt/RBR[N0$&iC6^3mW/'c]4^;^i=^*[JK
%r$sUhf]4e+YO(*p=_^K%bW&go9cD=P8'4OBFY4ubR@N=f<AfI.>27kX`&^/?]$:13B'DIB+"i;>(i[='$b!&Xb[ef0r2?*3pJ<!5
%[(*Hp)5%`sVqcDb!.('g[c`$F<ImpZ#F*r?3O<CDb(c6@m;NXPQT9hj2A/TE46GJT.7@V"A].Brm$agr/aVEPX1J4naB/pj*4F6M
%J>uQ;cNZI1P/Fh<#NgglV9-%ajb*G;(]8E_$j6TMCdBI;rSq_/Ojnu<VL)!KVb1\02(U?g,X@M*p[-#:#\._md]M2c6aBWF$F,/u
%qFg$R!Tl53hYk`T3?7)FkR'>X>MNo8cH)'Ja>7FI^JlY#.@K7r3\IJ6=2Ak`?AkA@$%\6pkLhkEFBFdCI-\9HkP3Pp!(/LASq0od
%s!j%45X\2`4G6fZMgmRJ:DnCEQ?9^AK<Raa[eZS,nAp0JW>E^tC@WZs=87<=h.LZe%fgPf&*$=$[n,Ku0`Vcf,*d\Q!lY$#oZ*sn
%^:;`:TP^"=Qa%*pZ&s?2DYME#8UH6r`D3,3J`BL`$P.u&(pJPaZ7nba>IC+Ad=Iun9QTW0PGZ,d&e6m&M&*s=R)X8V75>$q,4>D3
%:s?b`JgZPF+IL(-A0GO7.d2^(hdPD50q`\,H'q)N:AThV$Fu"<9J[69Z>sFB&<F['VLlOF^ZeH\NKOlR-6ik);GnEPK-GZ$9k>>?
%b@Xh8d=5_@d'rq@.$6AaBK3Y/-kqm38=('r8Y]h%MN=/+*0++)9+%O%$+GG#Z)nV>YUnQu(`5-KQO'4eJr_7#!h_*IPU\GNjLiN2
%"k8>#T*qI\?1:uppkrE>0s*:ND*[;k(2)rm&ojFHCSXQ0`$BEujfNj,*LnV&VL+@3O:O+&$cbQo$TUot=!pp+!G2HIg%I+-3'fpk
%)@3n3;'A>D>cJdq2.@"h"#`aQ?4*h]RY/+Hib+FT>Vh+l'_i@U%sG6@K.OQjkSU,JJK%qfGnaa4!R$&D4X@,-*;)5X!08]6bYb0;
%k2INQe^3cZ<F+8;3F!7j%G(a(Y#se;9+eIC?I3]fAO7u56n6+G]h"4bKGJcl0+p.4$?q[K_c^Q>@7K5.CUc>hbXTg'RO;V]ZK9NC
%MK#g(,>8b0Yg49LJh%)$af#\-(ouEZM_nV$j!=HXPW$#[:PiHSQJA,XlI30&"saL&<%s.[!0k!:h%8EujiL/7d2laIU0WK,#^ZW!
%7A3pjiKTlp/.uD>+d$b`U.ncuM!!E(VBo[Y&m6'\KpnOD3_hsJTr/`$Mo6(u"5a]6S!tkXKq@A5aNa'H>PhFTjV0Mg6jrb?cHMhF
%9SB]7V?cTR?INY&XD+qtC\",1?UDK,\7P*3fG#&Oglo%F$6T[u._;.KC+77OIToBe:XIP,H'=^B_6o>Zji'3(pYXVie;.7:U;#;/
%nV>]l;9U-l+9MY94^JXa:6B@E:T?jncFTh`=F;A@?)>M[3Yhj$b_ssZfHOKIE!0usEJe4\-4N)10J86+!%R[gKq#HXMaEm::1a_o
%<L7q1pQ;R/(g2SuqlOha_>t((;=Leu4YtO9ls&QF"jP6O.KIhW][@0OBP<F*Q@Oo<dl1YkL3F2PP[W6(bfGg!Q"4aj9]U+\!SF:]
%V(_m;+HPTX(<<u$fjN"np1ROoR'9O]8h;aA)$=1&]_efQRthms3+sInFZdXY0EIEJ-*':WQ'eGu!#1;IJnG<&N((tjkW>V\MQF)C
%gi99YKeJ:]1U17qR$ZsB''RDCB3Jk<?'M'tblRZS1e'oU/FK!/N)kb=.PP@O%0YiEp-`=+,;a<Gs)$a>,SV;a2!9(/6SFs8Q9+5E
%EM3MSElUDT=2ph,`NLp<%XA$[#fDjaYZOg6&PoK_QO;+@SR7T/7^c#&Y-nCE9jG"<B-p<)f)b%31qLl5)Hq(SYb3gEg557mQR7cV
%AT+B[`C_VX:!M27:rR\i"Yf?n7B/>8dbuF%pF/5iAI]58',AZF&!=.99?s8u,)\EM5&S(s$KSHg@AE`;R2CC8(nn9TpCa(sE262f
%AF?$!g]4emYRqp/J21bJ:Kr%WPS$JH-dXh*)J,9<7DU,VDLIZhHp=?ja@UpBn^n#8K1k*kjC]TrFFm4iOR/PD-"1A_A-o0WrMIGq
%6.<5#n81R-8=lKMG%^Y#>T"Q"'O62k3]fUM-n+9IM9S=r,=eOa=Nm/44*?QhWg%6/Ri=X+,'s-Lk5&[I>RP1GAad7J5!LA!-',hQ
%cP30ll<tcJIL?4oe3-^KaiqK"dZi[8fBl.Gre/cMcb$`q\-[2)`#Js`dX',mOd@ALJ:O,dI/$RXVW+sPN\J!"9sm"sFq4X'I]$T-
%K!O<q-QD*g=5f)ccVeCln6r$OJ<)0.PN9'*nS[I_jBAR)6m%?u&9KIn]Kq2XFdM,8:4bh2Ef#krTDOJCZ29KsMo;J:Xt%N7)cfJ^
%Ebo1PU>KJJIZ<;9U5$b]"JfJXE][oVKdcA2<o;#MYVL*9$81OA"/M!Ai$:epL^PC;IW=q?@.J>HR>[PLJpeDI6T]uFPnq'm@-=%V
%!tPh.LY#EOr9UVE#4+Q@N$tji=BQZug^U7W'4@h"FG<GP_V5OH1G2/$i`5b*R'TZ[PlW]Y#6?),X@&Z[;1>@+i&k#(KO>;)c)J1A
%>[E_?TKFt`)M-e6="D.P0_<7"e&ID)Ao]6BmQlk!&N7K&a4YLk#j:9C\m-"l-u+i!jMj<94"-'*lCOTOikRO`#I1A.^,=,<Y/&Jh
%_b&,@"tSkV^7O*rF%Q6EMJ*i<Y(VID%jqT()8D&.kO)S&-QTUqXrWX;]')6T>&lNSDU"XAlp1`*i"Ua,&V_sBkZZbc-=!K>pU(`+
%,4@fK)bUaMATWWn2cRkr0k58a5hBRfQ:/b"bt&H9=^B\AL):`iN(fC]Cj(8aK#'*;E@*Ao;u"!F<tuK3L'+[8hQh@4Uo=S$pqbnk
%43%*m_%GZVB4f@*i`$]1&)+P./sqs_;1p:#2^HA!VUu'\R_+5j&5Q),I`I7I)7j`ErhcF>`'p^i:7T[*Zo@Qm7UNoh@rEa&)Le>8
%J^X$Tdc2dJ6S>H-`8]\Z\jhdSHpVk?Dl@%_`LLBQOme)CJ;KE&SBs7kc('+DVX3DE@H!;4/!1W"hP+.M3@T?=jZbe[#;Wqkeqg8-
%af[A.2u#\Tk[FiES[Vum6V^r^b#(''8k9+OcG<D967VCUH'k>!BZ0'N4X&e.!+]'PXo\Z<)q(a\51bP2.D3N<.els9A)'[r7RNQ9
%J?X=YmY9"MbP,IDClf'XhFt2X=R3#om1T(+@h]h,%+Ybb7deLR@8t6o`GLI:e/_C3dd/=(=C=g3J]@O$OA["S=qPD^DM7cBD-P35
%7pK6k0IfM*qrM,K@7f`]>IHsnYd2I1B3s]:0Y%Qq&(.D5N3bX2(D#nRV^=tlBM/YlP6A*CR(F%8V_U(4g!rq!(E)-IO3^`?!(t0i
%&_*]aFi5Zd;rYNFFk!Y+4c5?kJfBe^0mWL/f2NG]$N+=(AJ))='`(DN`P#h3&]pt,c[hRimq_Bfed*"YF[*uV=uJIN:EDA]Qk:Gr
%Tkp4]#^R0541)^ZU)GA\\W(909hI5'Qg(2LKG1c/LSB2"*6L&AM-"sQ<,E&W#G)ZNg7FbV<2*qlb[^7!ZuBlUDB;CX$(E3moXI2t
%d0GB!'1MfOd+[;UPVS!IX%DTrm0+<`V<$2R/qn">q)0FU@U't>q#rYKjDqaU-q_'P5>tSEROT,paiU\&KK:dS/mlOnaS%eWp=JH&
%LaHZN,+l+[+cZrQbh3<-ieDG/Su7sUOS14q@i%<OX1B*?F,`jjjps?bIk;?;EW4r9)G%FS5;\$d>`&iWk#b(6nL,Gn.dP&=G\IN6
%-Z&o+Tp$9PkDnJ]/eAh/.='qlMQJT%1M!-5,ujmA%;Wo7_JL!H5srY^j'p)IgqrS@a[n=7G[Zf.G8?@K%uY(8#mr/-%7e9L>[093
%][P6'F).%hTuuD?n8oeNSngX^V+j_4;Hh:^Cgo),$P\kHZ,(6<"M,_`#Grg&V%(B[:F:XmTCksSd+[h%1\kMSnKt_i29:SUX3NQ[
%lCDQr[1\=R(<"D-]$<p[a0BDg*.q=VLTV,!p8BV!fsP6/cet>84dg8r=TP55HC)`.:N?CQH"a;cWfe^(c@bEfJX;*-'TVp.T\j6W
%6?f;H,r*OF`K_L!c==u"T;46mR4$c]^`Nc^AS#M-)pg\]Ohsrk$B7V\H7uNnSDi9j:B_pcITft_,_,2?'[G'Wi3C54Pegitr?RPa
%h0s>[;A5"OLnJu`1:)T!97C2hmOkQ*.C`*>WSko6QsGr=X12_r0ZXjHBXjN<G5t$D=_FPbR3O2$%!c-h.<,#YU&Y?Ke=P$[3Q.V*
%l-?gR3l?^g"\3H^,n![\FMkc3m<bpA0$ZqYH9)'E>iZ,o'hI%&U(%H:#7p8>mt7(HY]/k`Fl!^V/g17BM-OO`W+Zku?F'mVlZShF
%=LfD*fZ@#*Dr7(nn]+<q&FDLq6@nBB":30e&]V<W^G$a#-`RK6S'5<k<7Zgb6CW#gX.WknJW]Qfd%E'rKrUh6lJ'#EfSD8h,K-,g
%Xe4l.=Zj\ChZY<EW6)B06p$G\`RfK.*`F:f]n[`Ab"AO=%jkRcDs(RJ$4WscLpE*L%9HUVKcFhg`IdgYB7)FQrD9<R4@X;3*0I(@
%*F7JZ.Y\JcXuW66$+!JK.Z3f9;i_L\5_8G;UXXW38k[6>/o+^N_mJE(V=Ua]eNorS!<V^+TBP.>QU9:9U,J../sWTi=ZdIX3hcJ>
%=/27*Ydf]!O58kW=@P^^P4-`iPr6F@Z(n^HNQ)fD>=Z6O,u;_DJ_&la:`.j!,^JS#0FI=`f8=lU\EL?[,K_ltOu:J-VCEOe1)H12
%!-(0P34mXkPca#5!3eM>0%I)RL8\K&4@gbr:Fi+EXt6?<c^"A1c742[nRM%oDupnH7jp.\E\Gihea:`6L9iru`/(]%J\q8rU]KEq
%%esBcGMd"[rc8=6IN#$ZC"8uO>bd#eNC*V471jbP7aqo-ZV-S+S=uGS!3.pl6aL6qPq<67+'iJh%`1;#$!9a#TKk'0el%hW'.@%S
%+>p,I9CQe<o3KCfq7=)BJ#JZ)E(!A[BMUB1iGrF=OeGTZ.8ac#lko$Nd@FV9<RZq4`^gAuX67"O65C"l`][!D?DM!^mX2oYBE`.;
%@I5$K(&d&f=O$;s!Zl:qOST9eK,tVkLHm[eOkLp/rc#n[&3No5c:FlDRCMD1)`H"i21#2'8lT-u!L(PlH0t[F/6g%ZMQ7BY7p\E6
%$YF&+TT>ZQ!McLXkAo46KE>uEOBbsG8i^ciX=Q)&J[k.\maM'3Gu/ctM\nRUbgMYpI<f-!1_c[m@'U]B$s\KP62*>u9!;S;GM6I>
%AI>(R))H7W?4e_7<@L82rEYrkXGJsa3@^>\$nUVc(#?'X&_p6f![XElTt1K:g/X2O:bj%m%?En.GSV>r4G)t/70n9HHAI!0bVI8#
%nE!7D+QQ1PZIRIo4&GX.)?H>/>P^b8Y3_;=*f.Ih=G-9Y<blLp1i!H<5b+i.XK2ec\nQ,pG5!ggmlM^X\j<m\:hIQqPTaKWhfth]
%p#SV3bbe!C=!)20hMAs#ngp6cg(WaMjj96m%rNU)$"_s>BRkG(M&^`D`_02?a\e!8;)rMK7h^eP%#]KMZ6DXFhD>,U1,4K];^e?o
%V,pX8>^tPad)O1.SbHj*,hpEJN&WRc/J7dbj>Bmj_FXRTgoI>_?$L6i;(.Z/biQ%h-12Itk_[d&qtYof888\db,tt7>aQeLkK*3^
%M$mq+*_^[!rXkJ!G;5;b06WX$H"%IXLuVjao9t6<O&mMT??.:bL6BO+\.Ka9RmIX>P-Gnb%A!pTB"B$oE2NhYBo'D/EPkplk^HNf
%1Xc;elqSTdj;j?&Qu:^=,n"#sZ8Ih]TSqeuL49Wn6e>6Nfo[$',=OK#!O0^B6^Nm(%s2e]PT4+gGR>0gP`T#0cs`4UEIb;^7H2K;
%Kl`k:[#5mHCu\e\QQ$R;M&QAC;Do[1"*@OX7[.3#FUU#:alk@4/if-Y<B_Ie/-+Y=/bq@632]Rt.2SZsqtKInpFB&?VXiE5bSAKe
%QU$n+.lucOVXQ9pSg_S73X`7m.2r7CPq*h#noKt7B8Z%r>]7.i+?UDo0p$/<+\'V5BS0*iG"oF-T);FTE`IH9Dhic@W9B-e,?16;
%c=3abSY9^g=`peB,Hr;en&3770aQ,mL#U1#Uh?QW5YBR"AnJ<LqiWo@cc?CW+:I_peaM2?Vd_c0QB`('%s`J?T[JX!O?7]Yhp[Ak
%L1eCA8*X]'ZV9JV0p?-+<"EN$=&4(Nb-rMB58qnCA&R'W52-D\\Lk0b66`_[60&>OPnPZKB3@IG>&YM'PFRhp[8iT%?5%,4ll]ij
%6?H-;(&CV*nKRJ.)n9,$'XA,!?b-O<#URjudR<Rd3i$E?`26'o(Rq-d.cQj=lpLLpOe4cN>G8FJ)oKJ$Ata;o+*(DId-M\o\8SIu
%'M==PjFb%Fb/sUpd-Sq)$SRSc&*LnFi^qBN:>SfN`,8Rifc*O*.*[4'#Bf*U6[,798_dJ11EMA%&LX[7=C(@s([95TY)a=+_%Sot
%nTK"<\.9S`pna0$;-n)1m)UD)iCFd0gkucpQsAk;#j@E>\OX+eB:\PWlO;L)q^?Rd-</NJf4rQIHg]%56[\X-S&;35T0_^/<)W3"
%Q3j4ZZ;fq4\9cQF81?Lr'])Z-p6[@8)\k"WH`-."Fl-]c#H)2PbVp!6f_'?okflXg=Hq%-H:_sZe_;;HoB[gD1:[]F$_>1E9Q?c4
%Ep&,4FW0(JV*G:0*-0NL>0daN)rE?:#StmaodKHH/]GWiKbG2Q_Tp5k04&72O%\"0-HHkbin#HR3n@4S`1XX2*;.3qU;=o!%\?"r
%5>7cd'ZAMS\Zi]ig?F#*gd*Dr6r9^%_GO<ZZ8Z3(e!X^En0G!T)$h5`8L@[H<C7I!Aa5"5AVd203/B#rPAo)BGqJ_PFn"X<6<,bE
%!XbD)eWEHprj&d.dW*?BGn)da;bu@L0pYZ"=]k0&Jd//AdPs9&o$458Ls),--26QT*G#hEPg5_cXoab1Z@Rt>l^FiC^]YTS<%'1)
%0agX!OWq-ClS8-b#RiRqS2&-D-^m="<CjWHlqZ!TM/36(937&pQKqNPbT'PWZDhN(RH/Y"CZ@Oj[h)$pau`CUc%b4dVnB)uCpBTA
%M-8ZbH$51Me:eb5PBS?<P^Ph>O'%,`P[GMb;\Xr.'$T]RKi/7>>ia;!F11X*dVB>[h1q(q`mW\4>M#:%Ss:TP44E1,Gsn>+I@Ejn
%RT0)[!r_P;61W0lqL+/Ki-YXA8#E96f#4Z4.K_SpkM/?pFf@d^rEORRgL)j[(Y0bX==Q<XRT]l69\J6ugmp:`2$9.";K+eJk\i+N
%,.D?A1.7"$+e"(t3Tc1mW;IdK$A1)qB$ZeD/M1*<j;:'<PUqr:Qt.@2f+besV"U/c*1W;]:Y@$!-c/JAHg8/'Uuc#g1<(K2.T\<g
%=n+4;Z#[>&![AGmo&8hm$EsS.N_Je/!_So/29)jhVQchLGb)r_?A(>=qguc)MT5e?2$t%o=nQT_Yj6r>\1qG>G:]/&0H.5"a>HTN
%QlqC&7_C"9bE4R>NLg<Q\n%dn27O^L`tD?LHQ'6[`Y<KhS@H(ba<*E2-;FD*#._sTk/P;;:LmKQhg/))M<.Vd3dOB2.fsIPD?_q"
%,'2'Ek"h;FJ.Ho/M*QVkMm?W3gP?=a(gl:X`Q@.*WdL;'4;W]CV:]@LWY?J*m]r`X_Y7f&a;e"$N+\;a;:8uGo0nM[/98Z>jq*k+
%n`U,Ck;%e899!$rjYC%Q7FpNrps7nXWW3&q5aPd4VZ6`DPsj,#8-QYJMsNjMq'nfq%'P`s/-smm!Bl"t*,/$5<.CqOru!Q)>*)].
%=N5nfO18@;NLjZ*p+OM24SM#+pAeGK2cWi;j6TqFgjk1[D2qSi]]gR$3j!,XC+'+IGeCW.):fDX8/d@ac[qJE!M70B4*E\H-)r:^
%4K1X]5Le/[PqYssc(X=*e")8:pN2O6+-INN^5aW\qL5+l("&AOQa@HhMO'Y[fF7jK?`>2pE7d2;4ug`iB]h@4Dj5$=&8oA18rc$c
%b+QQtJo?m%SfK09c(1/`ZMPAJQO75gHs^.F'!FfVgXO>J/UEA.Nn>S^4jVF7;)f5QmOn'&+$R9[<;a]FAY:(*X$0!R,:,5>=ILF'
%H!G3ub&k4>0=!Vep7[1"[m[/1ap?["PgN:S,IK`R5QIoQ&htq3EHXG`+[>`#%Z5EuNl!XdIo%?O&ar^K(tES]BTOAM:/aeH/hAuf
%mjo'.VN@/`_V#P&W!X*`rSEmN1np5HPC)glLXLt,!cb@71qZKV/BI3A&k>QM;4<8b,!_#7jKC#nYCdI0%*;.aN^[RINm\^;qiWb2
%-`,=jd?QF[B^hArgW_oNhZ1H1)82%P*gNW`*GhmS]"hnDdp-2R;omfDnZKBS;u!fHTuA93@t2N!5'!(I@pi3?mM4Eja9],2J^Tlr
%Fl/n>(#HIX8M*%p?5?\DZTFhkob.d%mB&]20WpG;@CLu`PtPpnIMu@W`^hsK8#.EsHT8u&pQHjDb+2/V>^4M#-\urHfih^)_OE"@
%%n_*Ug6@Y=hFGMe4!at[8t19QDLB^#-<'I8XE>!`:G0l<,6U-Z./&J^_#Qr$P&bcD,[5;119,M[01fDoRf1V7AbaO@0Cj;n"TNL"
%#R>.U5&/R;Z;5'!h3[1lCeF>+%m5+h0(Dn$lc>fT(HQG,kT?%eRB2OL;,p,SO7dsWHY]W?KadIX'0(t3Gg=j%&-*=d8i,E'DmrqK
%k4qL*G,OKilKYA[<)MZDMdR5Nj4[>gP01QjkKC86nP$5\O=Fd,`-Da=LN)L'Rt2,1\YWpgjIIU1Uk%nZLBCikmp<;^8n8q7.Zb-:
%029Q9.s&g149SXGO!)eI\L<7**4&"^J.Uf[\!p_hTe[KH3\"(RSC*lM#/(p0k9*8W[j"c('K90X8-r$hBpQ?'K:B>*'DKsR;XQ8A
%bb@V5,!ToU?bMu'*4Sp0r?aH0g"[q#'EDqTb69!PHmc'4Z2t[]0mHNN^PGAS'$bK;FBO24&I]i68l$["(?$<f_E2=LI?k:>!egf1
%mEB(##Pd5prT<G%[M6BcLf0iBdC?Df\Nd_NO@OL!#R`1DbQ^jbh80LKa5IR5>VmT;>?N-j[M&NeAO^j@#^8X,1'U8Fm+"X1@\p3]
%3gBmr\\ZL\Amf-o_iUs5@MK.8S*/1b["ieSY]c00,WcBke<Spn[;.&XjW>J\STu2cmiEKoR?\uA8u2LJaXeD=Upl]P+'D=3/b2A9
%Q:PnbVD-^,O:p?BbR3i5D>$rndP^&1W&PG:*Ltp@:u\,$JLj=#O1:3U/i#,MjNE];J,l_p>P)<Vnk'@q\?D+U*S`#Tm`McMTBB'F
%;%9r1*"58M&^Li$bf,hUU8.2u;E(UD3b`E>-+kJ`+p<\`miT!_6-0ZXRU.b.pq]"m"1esO#-GDaOiJ6C+k$CTd<0AlXGi\iQ6IHK
%.`-tm7AN==W`PL11A/(0.^]P$;6jN)N^.&DWqZB5UK)eC8bOrCXJS-^#e@bqb_UT=cRn4a8']7&WB2=gGq>P1-<*JVV3ur;[VeG<
%B7A^mODR8/GD&R?GD-+/jeg/+$7iHC,4q.gHs\Yt+$/*l:=4LYWO0b5T(Q?VC_?6(N+O,/;8Qt0&nSbs)PQ4.UN4O,[m4p1Z(W5X
%lE<?s%`]IA0NebF1*?-Vnq`m)=rr/I>Z_d&KU*jT,]\nAR&l(.i["jNr=E@),U5J\TL,WX&@VLB$$9pfSu$\F7h'N)AElHu]NO?Z
%Fc&ZrBIJm(%;T":IK*tTjY)5;]VNh5Sk;9B-OF@?a+se-((!m]/NJN[RFl>WB<Z;7dQgE4%Z?"H<f2MO?10((*1*^Q$')9rG#W*U
%V%aB/TEHmiAtP;);A8OZ<N6HGDdJ'jjS)Sog=oQuU6S%i;\-q.eZ0m@rNK?`Ui&t2pCH#l/ASrf?K8%/BFk&YXK`^6\df5k:JSWR
%*]?Kn%XJ'=RDD)F+B5c+L*;_]U""-:/'L[085T*pU?W;UB,$1Dk_H-105TXl.UOj6iDMQlpOH,Y+dBkOU>Upt9?'0Ri7;o_Sim;[
%rKeL\6\U@3>bdf^k_m&5P=-7D,MbFu#`FRfqaWSoq.#P.,\k^&PX)#0\Q>gL3A/].a:hF_L6W#0Nh0;P#g%ZRmpiOMo9TZT6PrcF
%SRVIE;9jpj9a.HhfallJ;"]R4YX.q$qhDuSAfL@P;Y(GT,JIAW*-0n3O`XY3](#^GRqlMI;8E+Jcj8DrfA1_Tq!]e:ia#ADS0P'T
%mW^u[-#Sa`^'`B=Oo.7u*YesXSu`InHf1!NJ35^`oTX'K6R&['q*C9R,F%+;7s'?h<EuG2K$_0mSm.TqNQ?C3GYj7R`3aRCdL7q+
%K*?i`?;,\<#NeEs,,l2*P+\'$ANol>?Ci7XP<LL]85FrNB&:Q1!HWg&U/:]5P2ke`?P73%[@8-T-m)O'VaQp!4F,L1nMsV>c,jg/
%ML6_Q7he?Q'/u!)*p(Mp"WC$%qrfJ-_BO#Y#G8Sr?]j^&:e<16k1>N!UgKNQ)i<QboHr(`>TaAGoOb4pL9nL-&gubi<KAMf=`HcG
%Y=Bm!q%K?GZYL%TJB+@FHW##Xbk1mHR-kEUQ+12GVFX34oln=iBBVTkiiXeOe"Toi(t$$NW`8g\BCrK@3LU&4$3O@@RurT;GkrYm
%Wo8+)0^6^%I7`3*V4Y\,R\l\+X@@(DBtF6X9r6r)$EhJLd&,u=!Jlp!#2V<.YTd=9#CiDqj-WXkid`/trl$aR$9Y%cbDp&Bm,A9B
%:kA6s3V:pV'$,Dd/l%Q+P;"=Dq4O6W":ek:K2e9BfDu*Lj_/XES6jtV;>&Eu#7Sa@O+!oo0f]S;`J^E8=.dEU^)T;F<de.GR8@MY
%=:)d+Tj"Ec,1LnQS/18cMNaa<R9lsk:\"FT9_)WYA7q3IW0G8Q!d>'.<p?`@m-dA.#@t\JZfI/cX<++#Umeu-Wl7=Vgc66=+%@"i
%dBnD?l$B6Aa7V`9X+NJ:=/A3FPnce8c^)9HLr(rnaepV6]=V&."V_=!>DUlMg)N+[7lOYiALL`HP2r]ZErFAmf:KmleDAQoEiuRZ
%d7^[g0h&N7?rXDB@^Sh#Bj=*gEY/6"'!$dNkg9n^=.1>QTg(uE+?e%9%RZQ\WK-IrDOplq&f3nIS]\J1C$FKRH>O>:cl(hN>()Hs
%*cTWHnjDcfm(80DB,#_ompR5RSdClBe4Un_b2*ab1IQ0(.Dl3k]K_"(.L1@:5q^>QZ0kYg4c&#O\gU1T^E^b1,uaJl8DMme4^/j8
%&Vts^XiE$H#C#TC>W\aJH8X/0X9j%A=Kb\JriB#H;2^<l9)g0\]D1\)dNHKoo6&;FJEfE2fV/,m9,"+JW6%oM9ZYBL&5Q%dJu"j$
%V6Iq.K;.tcM%"\r&^mm7GOdKP`BTc<RPNXm1R1fmpIB.WG\0Q$UrOCqjWlti>+)5*6\pnh0dg"e[*Wg%8GEj?f.@'fGUDOr:S)<&
%<_$"r/r^QI;sJ6*E!,O_96u5Vr6\Zha]K_.O$J8##UUoBSKAFtbGD%]N3Z+p39r"U\\nT4;nR=NAs&l`Dh.*:f]!Ehp,u7AZ[<%)
%L5f-pq:oBre?;pb+_oG[E'"ar.t2IFhrM;#6X40$.n@Qr:EdsZV=5+k0EgYp6hnj3K*N!blqc0C".NQ8P6[I*/$lSoo,+LZ)N$[;
%Q._dHQ(rT&KSr(Ug'+lmRFZPq/NEP.I&c>NFCs.\km8V_DhS]pf@dSl#)qq9n:\>&+&R(5++)p!8#K2_Wu\Fo4Q%HUFG(g.*DJ&]
%Z_jn9-9?!I>!E=q+#:(]l7W8j0>-@s(=10]/X5F2a5"S\>onngGf[g.>s;fNhD'6+N"6NdE+_t%+^Rq__T-$PAa;W09GMTr79s."
%f#TBr7hENoGqD/^.Mpa6e\e!DRX8o-HDPEh)[Ld;#IPije`t[WGI_R#?XR]_?8`tsLL<h*e`8SHHGY67_!SG)Unc;-QffOK1(oNm
%-hbu'#Y&kpX=5a>iRuE:"j=a+>r7]\>AT8j4a.k-0J_Tj58CY4\39De6m7;*(`Pga$DX\-*I>m]]+)\+:Ps$HDD_"@XcoZOmfijT
%AY$\(;`53?EI#l<b\l3l^6?=ch/+8i>O(/Y2gFPc"S23kJa5$KjhK:IKu')aO]YN48&`B`mO5gsM*66m`g@IFDsP*8rn<"1bUGlm
%5Gt=,5H0Y4NqMaQk5)\.<IUJ-Rjab=otLVH6,JAm'11pNaD3oGn]jkI1@("9/&cAq'T.75eW^K@pbVS_r9ig1X1Gl\iU]f"TFu=4
%\ks@<+t<K)1He(%GLU4fY+VS+`A**8I?]pgA2:5YTZcH53n.]JMW\rCd0C;Y)\%;!(JdZfm:8m[@2\;dPjfK#A_<_Dd.A$(I<CH0
%RMJ&3XI%68o+Z]+fL^cEmZ_`IJ/]MYP>6,k!!,]f:OrnW:9&=cYUH`L,<#;Wa/"<B]j@mBRNGk6T-C%cE4;548=ZV+D3N!uUff3Q
%+q:6nE]F3bi.pG\&dhBn'fp`8$Q`3(oH:K\>KG(LI9jmmF<LVV:EP)Yq6Q,HqT\PCot+!Q?@BQdAU"*bhc[d6^=p<XI=&Xj45X=n
%r6ai"m8(@=p>Y*&G'gj5ZEH0iYBMq7Qe/jobn$.*;aR7e_/Feol'Eb>J+WaBYO^3i~>
%AI9_PrivateDataEnd
