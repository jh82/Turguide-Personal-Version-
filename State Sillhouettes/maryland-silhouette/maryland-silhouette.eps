%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: maryland-silhouette.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: M
%%CreationDate: 9/23/2015
%%BoundingBox: 0 0 723 356
%%HiResBoundingBox: 0 0 723 355.6353
%%CropBox: 0 0 723 355.6353
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 5372 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45272727F8272727F8272727F8272727F8272727F8272727F8272727
%F8272727F8272727F8272727F8272727F8272727F8272727F8272727F827
%2727F8272727F8272727F8272727F8272727F8272727F8272727F8272727
%F8272727F8272727F8272727F8272727F827F8A8FD15FFFD6AF87DFD15FF
%27FD23F827A8FF5227FD41F87DFD15FFFD14F827FD0EF8277DFFFFFFA8FD
%41F827FD15FF27FD13F87DFD09F8272752FFA8A8FD06FF27F8F8F827FD3B
%F852FD15FFFD13F827A8FD0AF827FD0BFF7DF87D2727FD3AF827FD15FF27
%FD11F82727FFFF27FD08F8FD0EFF7DFD34F827F87DF8F82727F827FD15FF
%FD12F87DFD04FFA87D7D2727F827FD10FFFD33F827A8FFF8F82727F8F827
%FD15FF27FD0FF827A8FD1DFF7D27FD2FF827A8FFFFF87DFF27F8F827FD15
%FFFD0CF85252F8F852FD1FFF7DFD30F87DFF7D27522727F8F8F8FD15FF27
%FD0AF852FFFFA852FD20FF7DFD2BF82752F8F8F8A8FFFF27FD05F827FD15
%FFFD0AF827FD26FF7DFD27F827F8F8F852F82752FFFF27FD07F8FD15FF27
%FD07F8277DFD27FF7DFD27F827FFF8272727A8FF7D7DFD0527F8F8F8FD15
%FFFD07F827A8FD28FF52FD29F827F87D7DFF7DFD0AF8FD15FF27FD05F827
%FD2BFF522727FD21F827F82727275227FFFF5252FD0AF87DFD14FFFD05F8
%A8A8FD2EFFA852FD1FF827F8F87DFD04FF5252FD0BF87DFD14FF27F8F827
%FD33FFA827FD19F8277D52F8F82727A8FD04FF52FD05F82727FD05F87DFD
%14FFF8F827FD36FF7DFD1AF8FFFFF8F8F8FD04FF27FD05F827F827FD05F8
%52FD14FF2752FD37FF27FD1AF827A8A8527DFFFFFFA8FD05F82727FD07F8
%52FD4CFF27FD1DF852FD05FFFD06F82752FD07F827FD4CFF27FD1EF827FD
%04FF52F8275227F827FD08F827FD4CFF52FD1FF852FFFFFFA8F8F8FFFF27
%FD09F827FD4DFF7DFD1CF87D277DFD04FFF852FF7D27FD09F827FD4EFF7D
%522727FD15F85227F8F82752FFFFA87DF82727FD0BF827FD53FF5227FD13
%F827F8F8F8277D5227FFF82727FD0CF8FD54FF27FD14F8FD0427FFF8F827
%FFA827FD0BF827FD54FFA82727F8F8F87DFD0BF8272727F827A8FF52F8F8
%2752FD0EF8FD57FF27F8FFFFA8FD0CF82727F852FF27F8F8527DF827F827
%FD0AF8FD5CFFA8FD0CF827527DFF27F827FFFF277D2752FD0AF8A8FD5BFF
%A827FD0BF827FFFFFFF8F8FFA8FFFFFFA8FD0BF87DFD5AFFA827FD0BF827
%27A8FFFF52FF5227FF7DFD0DF87DFD59FFA827FD0EF852FFFFFF7DF8F827
%27FD0DF852FD59FF52FD0EF827FD04FF27F8F8F8525227F8F8F827F827FD
%05F852FD59FF27FD0DF827FD05FFF827F8F8F827FD0CF827FD59FF27FD0E
%F87DFFFFFF52F852F827F8F827F8F8F827FD07F827FD57FFA87D52FD0EF8
%52FFFFFF27F87DF827F82727F8F8F827FD07F827FD57FF27FD0BF827FD04
%F87DFFFFFF2727FFFF52522727F8F8F82727FD06F852FD55FFA87DFD0CF8
%52FD04F852FFFFFFA87DFD04FFA8A827F8F8F8A8FD07F8FD54FF52FD0EF8
%27FD04F827FD05FFFD0527FFF8F8F82727FD06F827FD54FF7D52FD0EF827
%F8F8F827FD05FF7DFD04F8277D525252FD08F8FD54FF5227FD0DF85227F8
%F8F827FFFFFF5252F8F82727F8F8F8272727FD07F827FD53FFFD10F82727
%F8F8F827FFFFFF27F87D277D52FD0EF8FD52FF52FD06F827FD09F85227FD
%04F8A8FFFF7D522727F82727FD0DF8FD52FF52FD11F87DFD05F8FFFFFFFD
%13F852527D527D527D527D52A87DA87DA87DA8FD41FF7DF8F8F82752F852
%FD0AF8277DFD04F827FFFF7DF827FD0BF827FD15F8FF27FD3FFF7DF8F8F8
%275227FF27FD0AF827FF27F8F8F827FFA8FD0DF852FD15F82727FD40FF27
%F8F827FFFFFF7DF8F8F82727FD07F8527D27F8F87DFF27FD08F827F8F8F8
%52FD13F852A82727FD40FFA82752FD04FFA8F8F8F85252FD08F82727F8F8
%FFFFA8272752FD04F82752F8F827FD15F87DF852FD48FF7D27F82727FD09
%F8A87D7DA8FFFFFF272727F8F8F85227F82752FD17F8A8FD4AFFF8F827FD
%0AF827F827FFFFFF27F87DF8F8F852F8F8A8FD16F827F8FD4BFF52F852F8
%F8522727FD07F827FFFFFF7DF827FFF8F82727F852FD13F827F827F852FD
%4EFF7DF8A852FD08F852FD04FF27F8F827F852A8527DF87D27FD10F827F8
%27F8A8FD52FF5252F8F8F827F8F8F8FD05FF527DA8527DFFFFFF7D52FD10
%F827FFA827F8FD55FFA8F8F8F87DF8F827FD06FF27F852FF27FD13F852FF
%52F827FD56FF52F82752F8F8F87DFD05FF52277DFF27F8F827277DFD0DF8
%27FFFFF827A8FD56FFA827F852F8F8F852FD06FF7DF87D27F8FF27FD10F8
%FF27F827FD5BFF52F8F87DFD06FFA8F8A8A8FF27F8F827FD0BF82752A8FF
%27F8A8FD5CFF27F827FD07FF52A8FFFF7DF87D27FD0BF827FFFF27F827FD
%5DFFA8527DFD06FFA827FFFFFFA827FD0DF852FF52F827A8FD66FF27F827
%FFFFFD0AF827F8272752A8FD6BFF27F827FFA8F8F8F8272727F8527DFD72
%FFA82727FF52F8F852FD7CFF5227A8FD96FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-09-23T22:08:28-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-09-23T22:08:29-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-09-23T22:08:29-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>128</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A8qkkkkmpPU4q1irsVdir&#xA;eKq+oafe6dfT2N9C1veWzmO4gcUeN12ZGHZlOxHY4qh8Vdiq5I5JHVEUs7kBFUEkkmgAAxV9E+X/&#xA;APnDDzXqXlWLU73WoNL1m4iEsOjzW7sE5CqpcTBw0bfzARNTFXiHnLyV5l8m67NofmGzazv4gHUG&#xA;jJJGxIWWJx8Lo1DuO9QdwRiqR4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+jP+cJLxk8969Z&#xA;1+GbS/WIr3huI1G3/PXFX2RirsVdirsVdir8q8VdirsVdirN/wAq/wAqvNv5g6y9voNpBPBYcJb6&#xA;a9eSK0VS3wxyPF+8/eUOyfFSpHSuKvbvz6/5xm846lq1x5r8tSDVWujGJtDQLHJbKkSoBA7FVljU&#xA;rQCisBT7W5xV4Tr/AOUX5neX3C6r5Z1CFSARKkLTxb9vVh9RK+3KuKsq/IP8odT87eZ1a5s7uHRr&#xA;GYLfanG0KpCyKzmJ4rhHE3qcQhUfZ5VYEbYq+6bbyz5btbS1s7XSrOC0sH9Sxt4reJI4HDcw0SKo&#xA;VG5GtV74qmWKsP8AzH/Knyb+YWnxWvmG0Mk1qJPqN7GzRzQNKtCVKkchsDxaq1A2xV8pfm7+VNt+&#xA;UnlixtxpFtr8usxT2155nuvVHoTsweOO1tklCxOkcfISPy5fF0FRirwjFXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYqzfyB+TH5h+fI3uPL2mGSwif05L+d1htw21VDuRzIruEBIxVBXHkaRfMmqaZb3Xr6XoU&#xA;hj1jXAh+rQiNvTlkBr8SmQFYRXlJsAORpir1T/nEG8sYvzm1FLJXjs7vTbuK0juGDyiITwyorMgR&#xA;WcLGKkKB12GKvtbFXYq7FXYq7FX5V4q7FWX/AJX/AJba7+YHmq20XTIn+r80bUr4LVLa3LfHIxJA&#xA;rSvFa/EdsVfRXnn/AJwt0mcWUnkrVHs2Vkjv4NSYyq0dQGmjeNQQ4FTwI4t2K91XvvkfyToPkvy1&#xA;aeX9FhEdraoA8pCiSaSgDzTMoXk703P0DYDFU+xV2KuxV2KuxV2KqF/YWOoWktnf28V3aTqY5red&#xA;FkjdGFGVlYEEEGmKvz3/AD2/L7U/J3ny/jk0ddJ0O9nmbQBE3OGS1iYKpVi8rc6FS6sagnoARirz&#xA;rFXYq7FXYq7FXYq7FXYq7FUb+htX/Rn6V+oz/ozn6f170n9Dn04+pTjX6cVR+r+VLzTbPQJGb1rv&#xA;zBa/XbezjQl0ja4kt4gafaaQwlgAOhGKvs78ntM1nyL/AM49zDzheSaE0MN5cpI6EzafDPUx/uuv&#xA;qeoxkCdatxO+2KvmeX86Rpejz+TfL2kWk3kOQFbmx1KLlc3ztxLXVzNE6ukxZAyemwEdFG/GuKph&#xA;/wA4v3lsv59aQLON4LS6W+SKGRxK6x/VJZFVpAkYYjh1Cr8sVfeWKuxV2KuxV2KvyrxV7F+TX/OO&#xA;vmrznrOn3etWU+meUpIxdyX8i8DcwhhSKDevKUHZ6UC/FvsCq+2/K3lHy35V0iLSfL9hFp9jCABH&#xA;GPiY/wA0jmrux/mYk4qm+KuxV2KuxV2KuxV2KuxV2KvB/wDnIn8hfOP5la3pWoaHqOnW8FjbNbvb&#xA;3vqxOGZy5cSxRzlwwoOJA40rvXFXy95r/I780/K73Z1Py/dPZ2StLNqFqhuLURJuZfVj5BV47/FQ&#xA;gdQMVYJirsVdirsVdirsVbAJNAKn2xVEWenXl4lw9tH6v1WIzzqCOQjUgMwUmrca1bj0G52BxV7f&#xA;+TnkX83NZ8q39rpMkWqeSNd0++tLi2N5C8NterC0lsrQSOHhm+sCKpVPstU4q9b8kflh5d/Lvyxo&#xA;HnXzug/xroem3VrbaYbq3McsoluLmGOAPQSXQgf014uV8ASOWKvnr8xvzy84+Ytc1CfSfMWr2+ia&#xA;gzSDS5ZRCsKvt6AEDcXjUAUJAJ771JVYLceZNUuoViuvQn4molktoDNX3m4eo3yLYqzT/nHS9Fp+&#xA;dflaViRzuXhquxrPBJF7dedDir9DMVdirsVdirsVfM/5Nf8AOJdx5f8AMMWved57PUPqdWstKt+c&#xA;0Rl/ZkmaRIweHVUCnehJ2oVX0wAAKDYDoMVdirsVdirsVdirsVdirsVdirsVdiq2WKKaJ4pUWSKR&#xA;SkkbgMrKwoQQdiCMVfn7/wA5Dw/lja+fp7HyHaG2itOcWrlGb6sbxZCHS3jcVVUpQlTwP7IAFWVe&#xA;X4q7FXYq7FXYqm3lbzRrflfXbTXNFuDbajZvyikG4IOzI6/tI6/Cy9xir6Bv/K/kP83oLHzB+WNx&#xA;p3k3ztHLPHf+X7iVbd7lSgJeJIuQIC1FVi4vyYPSmKvpT8s/Kk/lLyRpujXq2K39vGW1CXToRbW0&#xA;kzGrOFotTSgLUFaV4qPhCr48/wCcgPzl1j8wNe1PS9JZZ/JejyLJbFYI2YmNhAbszFTKqySy8Voy&#xA;gqVqK4qwX8vvJSeY73WluWZE0TS7nVXtwRGZTblFERkb4YxWTkxPYcRuRirH7/U0u41jWytrVEYm&#xA;P0EYMAeql2Z2cf65J9+uKsh/KCcw/mt5Pcd9ZsEPbZ7lFP8AxLFX6S4q7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq+J/zy/5xl8yeXtZOqeT7S817RtRlkc2tvDJcXNo7Ny9NwnN5IzX&#xA;4ZKezb0LKvGdZ8peatEQPrWjX2mIzcFa8tpoAWpXj+8Vd6dsVSnFXYq7FXYqmPl3QrzX9bs9Fsnj&#xA;W+v5BBaCZuCvM+0UXKhAaR6ItdqkVIG+Ksh8s+U4P0pJbXnmaDyl5p0y89OODU47mBUliYUYXUCT&#xA;ek8cinlzVabEE70VfoP5U1O6n8p6Te6ve2VzezQQLc31jKJLOad6JygkooKySH4QO5oMVfMegaL+&#xA;X9h/zk752mu44rfytoNjcajPZtEs1u0iJbmdGh4vVUmkeVFVahkWnTFXk35uecvLura7eDySTZeW&#xA;NTf63dWIikhmkuubM7XbO8vq/GxaMB+CA/Cqtyqq87xVOPJ16LDzdol61ONtf20zV2FEmVjX7sVf&#xA;p5irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQ+oadp+o2ctjqFtFeWU68Z7W4&#xA;RZYnXrR0cFWHzGKvh/8AM7/nGD8wfLtzres6baw3/lq1kmuYnt5V9VLSpcFoW4t+7TZuNelemKpT&#xA;5Z/5xt/MbzD5BuPN9nbqigCXTtLkDC6vIACXliWlPD0wd33p+zyVeWSxSwyvFMjRyxsUkjcFWVlN&#xA;CCDuCDiqzFUXpdtb3N6kM97Hp6sCVuphIY1ZRVQ3pLI45EUqFO/XbcKs88ueU7K/84aV5e8+fXIX&#xA;1qWCLTdesJYrtZVlIijHMerHcJy4oHR6x7qQ1OKqs5/5yImh/Ly08tflj5XubyOx0n/c5NdzzFpX&#xA;upZGEJXiEVPSKMwCACrV+1UlVH/mF5nuPLVlaS3PkpB+Yf5i+X3g1nUhLPQm95WzLFZABVuXVI5H&#xA;AA4seNDU1VfO89leW8VvNPBJFFdoZbWR1KrLGrtEXjJFGUSRstR3BHUYqoYqvid0lR0+2rAr8waj&#xA;FX6nxyJJGskZ5I4DKw6EEVBxVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVc&#xA;QCKHcHqMVSnzT5o0LyroN1rmt3K2mm2acpJDuSeioijdmY7KoxV+e35wef7Hz555vfMNjpcelW0w&#xA;EccaD97MEJAmuCCVMrj7XHYAAb05FVhWKuxV9Qf84gp5K1GafSLu0uNV1qxcazbTXNvEbLT5UKw1&#xA;tnLNIJpKoWYqK8FoP3YYqs1/N3yboWj+f5vzc8+XkNx5f0eK3t/L+gQRkzXV0iM6JOWotRMXcAVB&#xA;UDlspBVSzW/+cgPy21n8vdI/MDWPLSat5k067k0+30kyUFrcTrzdjMymiPDGGRvTY8hQUIYhV8y+&#xA;f/OH+JdRsjBpcWiaVpdpHZaTpULO6w24Zpfikk+ORneVnLnrXFWOQWtzcep6ETSCFDJKVBIRF6s1&#xA;Og364qpYq/T3ydem/wDKGh3xPI3Wn2s5PSvqQq3t44qm+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KvnT/AJzHv5tR8lWWk6XCt/8AUL8X2sPbSrJJZLHC8cfrwLydUk9Zvjag&#xA;BX3xV8bYq7FXYq+7f+cT5vKt1+VsN1oukLpt7FMbPWZ6Ve5uYUV/V9QksyFZgQvRSWAGKsP/AOck&#xA;7u482fmT5f8Ay+gglvLbT7C81y6sYCxa6nitppYbYKnxcmW24KV3/e7Yq+ffKo89eV7zTI9It4bj&#xA;U/MdWtNFurRbpuUMzwwXBguY2iWRZBKI3+0oDVorbqpD5vtrqPXJJNR1aDVtVuiZ9UubeT6wiXEj&#xA;nmhnX93KwFCWiLJvQE4qred4JNM1u70O3bjpFpIDp/CgW4t2Be2u3K/3jTRSCQOezUAVaKFWOYq/&#xA;Sf8AKO4Fx+VflCQVJ/Q1gjE92S3RGO3iVxVluKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV5B+dH5w+fPJFzJHoXk6XU9Ot7UXV1r85cWcZJIKH0x+zQVq4JrQDxVfCN7e3d9eT3t&#xA;3K093dSPNcTOas8kjFnZiepLGuKqGKuxVkHnmKFfMLzwWsdnb31taXsVvCKRILq1jmKoOlAzkbdD&#xA;tir6t/5wq1uW68gaxpLjbTdR9SJ9vsXMSnj9DRsfpxV6j5p8p+XdM1+5/NBdPmvfMWkaXPBFbxyp&#xA;GkqKC3+7CFDheS8q/ZJ2Jpir581b/nJb8rPM2rWt1q/kuSK/v7dtI1TWHuf3lpp9xySVrd4kLswW&#xA;Z+iq1Kiu+KsG/Nb8o3n8ym9/K7Szrvk6WGBbWXRXbUmjkEaiVbkRtNLHIXq3xgbfI0VY3+Z6WOma&#xA;b5Y8qOEm8x+XrSeHX7uN+YWW4uGnjseQ+FjaK5ViCRyZl/ZxVgOKv0O/5x2uzd/kr5VlJJ42rw7/&#xA;APFM8kX/ABpir0bFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUs8z6w2ieWtW1lY&#xA;frDaZZXF4tuDT1DbxNJwrvTlxpir85POn5i+dPO2ovd+YdTnvOTl4bPkwt4a/swwg8E222FT3JxV&#xA;IYbG7mjupI4yUs4xLck7cEMiRAmv+XIoxVD4q7FXov5uabp8Wm+Q9U0usun3/lu0jkugCEa+tZJI&#xA;ruIV/aibiD8xir1X/nCzzrpljqut+VL2WOC41MRXWnM7BTLJCGSSJa/abiwZVHYNirJf+ckE0bRf&#xA;OkOr+c7/AFG78r67praZb6BpdI+TW8iyvJPK7KiiOWRJY6BizCjfCDVV4fqfmX8uIrG98lzeXZdI&#xA;srK6PpeYYore71uUwNIGjujL6KKspYbQuvDiB+8HVV53aapfafcyT6XdT2LOGj5Qysknpt1RnThU&#xA;EdfHFUKSSSSak7knFW2R0NHUqSAQCKbMKg/SMVfcP/ONXnzyXp/5NaDp2pa9p9jf2pu1mtrm7gil&#xA;HO8mkU8HcMAVkHUYq9Si/MHyDMSsXmXSpGG5CXtsxp9D4qrL518mswVde05mPQC7gJ/4niqp/izy&#xA;r/1ebH/pJh/5qxVHWV/Y30PrWVzFdQglfVhdZF5DqOSkiu+Kq+KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KoPWtOOp6Nf6cJPRN7by24mADcPVQpyodjTlWmKvg3y1+Qf5vJ+YkWj22mXNhc6ZeRu&#xA;2vcGW0hEcistzHO3BX2+NVU8j4Vrir6W8wf847eWV0f8wdRNxcajrfmqG5mSa4ZQIHWQ3cMcfED4&#xA;fWSPlX9lQBTeqr4p8q+XpvMfmKw0G3uIrW71KZba1luOYiM8h4xIxRXYc3IUHj1O+2+KoXWNI1HR&#xA;9Vu9K1KE2+oWMrwXUBIJSSNirLVSQaEdjirL/Iv5mw6JpM3lnzHo0HmTyhczG4fTZj6U0E7KEM9p&#xA;cKOcT8QK9j7VJxVrzDoej6Xa6f538gahfNpUd6IAbxEivtPvogJog7wlo3DqOcbrT7JBAI3VfS+p&#xA;DXfzn/5xja/vtN5+ZYw1xYmJN557KUoZYEHeaMOnEftE0FKYq+U9W8m+ek0ufXdW069S2s3htLqW&#xA;7SRZIgI1S35rIAwj4KEU/ZGy7VWqrHYYZZ5o4YUMk0rBI41FWZmNAAPEnFU01Hyl5k03zM/le90+&#xA;aLX451tTp/HlIZXI4KvHkH58gVK1DAgjbFUZ5+1Szv8AzJItiyyWGnQW2m2cyCglisYEtxN4kymM&#xA;vU+P0YqxzFXYq7FVyFA6lwWSo5AGhI70NDT7sVe1WGk3eheWtCsfIvmuaST8x76zgexgZVmsXtmU&#xA;yQzywu3xq91F8XFCyVqoBpir7oxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvAf+ch&#xA;fyM1jX5dC1z8vNNtrXXtMlPryW8i2UvEN6sMke8cXKOXkxaoapHXsq8M87fk35rb85NK0bU7OW2b&#xA;zdcQXEtxCplgSW5Cy6gsMgDArbO0mxqQoBJI+IqvNvNvlmXy1rVxo9xe215e2kkkN2tozyJFLG5Q&#xA;xs7JGrN8NfgqPetQFUx8ifmd5t8kPefoOeP0b+PhcWlzGtxAXXeOb0nqnqRndWp942xV9c/84leZ&#xA;PNvmHyHqF5ruoJe20F99U02IKivCkUKF0pGFVY/jXgtNt+xGKsN/5yN0IaB+aWmeddaN3deTtbsZ&#xA;9F1X6sAZLQS28kB9PkOAqJvWjDVq6tiryHSvLln5c/OTyxH5Svote0zVbiCTQNTu4ZLdWW4la29S&#xA;jAES20ytxbjs6V47ccVT3VPy/wDPvkby/wCd9e1OymuvMf6SttHtddk9SWQW14krXN3byPz5NOGh&#xA;iEn2l5stQ1cVeU+avJ3mHyrdwWWv2psdQnhS5FlIQZUik+w0gFQpah+EnkO4GKpJirsVdiqLtNK1&#xA;K8t7i5tbWWeC0EZuZUUssfquI4+RHd3aijvir6D/AOcZPIXqfmuDOrMnk6yaW+BJKrqt4DGYijD4&#xA;WhUvG1P24qjrir7GxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVoqpIJAJU1Unsa&#xA;UqPoOKsT85flP+X3nC2uYtc0S1lubkUbUY4kjvFalFdbhRzqvgSR4gjFXxHD+V0vl/8AM7VPK3mm&#xA;ymls9PsNXvEdCYzNDa6fcz21zCw6gyRIw6ivwsOoxVOP+cY/zO1Xyn+YNjog5T6L5kuYbG6tBvwn&#xA;lYRwTp4FWej+K17gUVfdV9YWOoWktlf20V3Zzrxmtp0WWJ18GRwVYfMYq8F/NvTNc8reefL3mi5v&#xA;NH0f8sfLzW5trI2cUkiTci0kNvbiN2M8tCUeMqEA5bcSSqxf81/zG/O7zD+ad35L/Lm5mXTTZ211&#xA;aC0SKFpIJraOdrl7qYK0Q5TcK81HQfaxV4P5sgNz9YvPM3nT9O6/DGsVvDC9xqTEhv7uS8mMcKoo&#xA;YkGJ5BirDMVdirsVfU/ky6H5S/8AOMdx5klRDr/mu4WXS0dQ3B5BS0Y1DA+lHE1ytR1IGKvQf+cT&#xA;PJFxoH5bnW79CNS8zzfXmZ68/qqjjb8q9eVXlB8HxV7ZirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdiqx4YZCDJGrkAqCwBoG+0N/HvirwjzJ/zjXJF+bWgedvJUllpGn2t3bXGq&#xA;aXwMSKIHHqNbJEpT95GKFPh33rvsq96xV5Z/zkhqX5e2n5d+h55gurjTb28hhthp4i+tx3ADSCWI&#xA;yngvFEcEnsePfFUy8za/5Ak/Ju8157yW18q3mkrbrqNmv+lLbTgQRRpUEh+cnDi3RjvTfFXw5q/m&#xA;HyNbeX59E8s6LLLNeGM3ev6uYpLsCMhuFpDEOFsrMPiPN2I25UxVh+Kouw0nVNRlEOn2c95MTQR2&#xA;8bytXwogJxV9Bf8AOMH5MazN5yutS85+U3/QcFi/1f8ATFqRG1y8kfpmOKcDn+75nlxKj5kYqzHz&#xA;/wDlV+aP5qfmDY2Wp6Wnln8udBcwWC+rbF2gUqrvHFA8h5yqgCAgIi+9eSr6Stba3tLaG1to1ht4&#xA;EWKGJBRURBxVVHYACmKqmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVhf5rflVoX5k+XotG1aee1+rTi5tbm2K8klCMnxKwZWUhzUfjirz/APMf8l/NA/JPQ/y18mSi&#xA;9WC9jGoXl3IsANvymuHdhv8AD9YdDxXkQKbHriqO/Lj/AJxa/LryzpkZ1yzi8xa261ubu6BaBSRu&#xA;kMBPAKP5mBY+3QKsw8u/kp+Vnl3UrjUtJ8uWkN5cEMZJA04jINf3KzGQRbn9imKs1RERFRFCooAV&#xA;QKAAbAADFW8VdirsVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.1.0.843</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">pattern</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>792.000000</stDim:w>
            <stDim:h>612.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:312029FB6062E511BF3BCEBF3C6C05A1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:312029FB6062E511BF3BCEBF3C6C05A1</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1390bc34-a60a-4aba-b6e5-aeed45bf5075</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:42159b3f-a78c-4b34-a59e-802446e35713</stRef:instanceID>
            <stRef:documentID>uuid:1390bc34-a60a-4aba-b6e5-aeed45bf5075</stRef:documentID>
            <stRef:originalDocumentID>uuid:1390bc34-a60a-4aba-b6e5-aeed45bf5075</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:312029FB6062E511BF3BCEBF3C6C05A1</stEvt:instanceID>
                  <stEvt:when>2015-09-23T22:08:29-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -355.635 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 355.635 li
723 355.635 li
723 0 li
cp
clp
[1 0 0 1 0 0 ]ct
515.419 135.488 mo
514.741 134.958 513.827 136.52 512.633 139.012 cv
511.438 141.503 509.964 144.924 508.638 147.563 cv
507.311 150.202 506.131 152.06 506.014 154.684 cv
505.896 157.309 506.839 160.699 506.677 163.191 cv
506.515 165.683 505.246 167.275 504.553 168.484 cv
503.86 169.693 503.743 170.519 504.893 170.533 cv
506.043 170.548 508.461 169.752 510.362 167.865 cv
512.265 165.978 513.65 162.999 514.756 161.201 cv
515.861 159.402 516.688 158.783 517.72 157.559 cv
518.751 156.335 519.99 154.507 521.229 152.679 cv
522.467 150.851 523.705 149.022 523.734 147.799 cv
523.764 146.575 522.585 145.956 521.258 144.968 cv
519.932 143.98 518.457 142.624 517.498 140.634 cv
516.54 138.643 516.098 136.019 515.419 135.488 cv
cp
507.751 228.106 mo
507.014 228.667 506.247 230.613 505.775 232.765 cv
505.304 234.917 505.127 237.277 506.011 237.792 cv
506.896 238.309 508.842 236.982 510.287 235.846 cv
511.731 234.711 512.675 233.768 512.527 232.692 cv
512.381 231.615 511.143 230.406 510.169 229.389 cv
509.195 228.372 508.488 227.546 507.751 228.106 cv
507.751 228.106 li
cp
528.419 274.15 mo
527.711 275.432 527.21 276.995 527.785 278.646 cv
528.36 280.297 530.011 282.038 531.014 283.969 cv
532.017 285.9 532.37 288.023 533.756 289.969 cv
535.143 291.916 537.561 293.685 539.979 294.496 cv
542.396 295.306 544.813 295.159 545.846 294.068 cv
546.878 292.977 546.524 290.943 545.757 290.175 cv
544.99 289.409 543.812 289.911 542.116 289.379 cv
540.42 288.849 538.209 287.287 536.853 285.237 cv
535.496 283.188 534.994 280.652 534.832 278.381 cv
534.67 276.111 534.847 274.105 534.257 272.896 cv
533.668 271.688 532.312 271.275 531.176 271.569 cv
530.041 271.865 529.127 272.868 528.419 274.15 cv
528.419 274.15 li
cp
557.888 299.527 mo
556.27 298.926 554.441 298.926 552.797 299.84 cv
551.152 300.753 549.691 302.582 549.795 304.33 cv
549.899 306.079 551.57 307.75 553.397 308.115 cv
555.225 308.481 557.209 307.541 558.723 306.392 cv
560.236 305.244 561.281 303.886 561.098 302.607 cv
560.916 301.329 559.506 300.127 557.888 299.527 cv
557.888 299.527 li
cp
563.064 310.756 mo
560.706 312.408 558.347 314.059 558.022 316.182 cv
557.698 318.305 559.408 320.9 560.912 322.315 cv
562.416 323.731 563.713 323.966 564.332 322.551 cv
564.952 321.136 564.894 318.069 564.922 315.887 cv
564.952 313.705 565.069 312.408 564.774 311.7 cv
564.48 310.993 563.772 310.875 563.064 310.756 cv
563.064 310.756 li
cp
565.306 333.402 mo
563.654 331.574 561.236 330.1 559.556 331.633 cv
557.875 333.167 556.932 337.708 556.901 340.656 cv
556.873 343.605 557.757 344.961 560.027 346.229 cv
562.298 347.498 565.955 348.676 567.636 347.556 cv
569.316 346.436 569.021 343.015 568.432 340.213 cv
567.842 337.413 566.957 335.231 565.306 333.402 cv
565.306 333.402 li
cp
720.501 251.532 mo
719.94 251.076 719.259 250.486 717.975 253.198 cv
716.69 255.912 714.804 261.926 713.447 266.821 cv
712.091 271.716 711.265 275.49 709.791 279.913 cv
708.316 284.336 706.193 289.408 703.834 294.008 cv
701.476 298.608 698.881 302.736 696.934 306.452 cv
694.988 310.167 693.691 313.469 692.688 316.064 cv
691.686 318.659 690.979 320.546 689.563 322.61 cv
688.147 324.674 686.024 326.916 684.019 328.625 cv
682.014 330.335 680.127 331.515 680.657 332.105 cv
681.188 332.695 684.138 332.695 687.204 331.987 cv
690.271 331.279 693.455 329.864 695.755 327.033 cv
698.055 324.203 699.47 319.957 701.357 315.651 cv
703.244 311.346 705.604 306.982 707.234 302.667 cv
708.866 298.352 709.771 294.085 711.88 287.392 cv
713.99 280.699 717.306 271.578 719.184 265.38 cv
721.062 259.184 721.5 255.911 721.5 254.112 cv
721.5 252.314 721.062 251.989 720.501 251.532 cv
720.501 251.532 li
cp
14.5151 96.7236 mo
15.6523 94.8745 17.481 92.3975 19.1616 91.1885 cv
20.8423 89.9795 22.3755 90.0386 23.5845 89.0356 cv
24.7935 88.0332 25.6782 85.9692 26.9756 84.9961 cv
28.2729 84.0229 29.9829 84.1411 31.3101 84.4653 cv
32.6367 84.7896 33.5801 85.3208 34.3174 84.5244 cv
35.0547 83.7285 35.5854 81.605 36.647 80.3374 cv
37.7085 79.0698 39.3013 78.6567 40.0381 77.5952 cv
40.7754 76.5337 40.6572 74.8228 41.8662 73.9683 cv
43.0752 73.1128 45.6113 73.1128 47.1743 72.0518 cv
48.7368 70.9897 49.3262 68.8667 50.5059 68.1299 cv
51.6855 67.3926 53.4546 68.0415 54.6636 67.3633 cv
55.8726 66.6846 56.5215 64.6797 57.6714 63.5889 cv
58.8213 62.498 60.4722 62.3208 61.6812 61.1709 cv
62.8901 60.021 63.6572 57.8979 64.3057 56.1284 cv
64.9546 54.3594 65.4854 52.9438 67.1069 51.9414 cv
68.7285 50.939 71.4414 50.3491 73.1514 50.2607 cv
74.8618 50.1724 75.5698 50.5854 77.0146 51.6763 cv
78.4595 52.7671 80.6411 54.5361 82.4995 56.0405 cv
84.3569 57.5444 85.8901 58.7822 86.8042 58.2515 cv
87.7183 57.7207 88.0132 55.4209 88.957 54.1235 cv
89.8999 52.8262 91.4927 52.5313 92.2891 52.0298 cv
93.085 51.5288 93.085 50.8213 93.085 50.0547 cv
93.085 49.2876 93.085 48.4624 93.9399 47.6362 cv
94.7954 46.811 96.5054 45.9854 98.0684 44.7173 cv
99.6309 43.4497 101.046 41.7388 102.152 40.1909 cv
103.258 38.6426 104.054 37.2568 105.027 36.6675 cv
106 36.0776 107.15 36.2837 108.654 36.1953 cv
110.158 36.1069 112.016 35.7236 112.576 34.9863 cv
113.136 34.2495 112.399 33.1582 111.278 32.3618 cv
110.158 31.5659 108.654 31.0645 108.374 30.4014 cv
108.094 29.7378 109.038 28.9121 110.306 27.9541 cv
111.573 26.9956 113.166 25.9043 113.092 24.5039 cv
113.018 23.103 111.278 21.3936 110.895 20.2432 cv
110.511 19.0933 111.485 18.5039 113.003 17.7666 cv
114.522 17.0293 116.586 16.1445 117.854 16.4395 cv
119.122 16.7344 119.594 18.2085 119.21 19.2256 cv
118.827 20.2432 117.589 20.8027 117.5 21.5107 cv
117.412 22.2183 118.474 23.0737 119.682 23.2358 cv
120.891 23.3979 122.248 22.8672 123.413 23.0884 cv
124.577 23.3096 125.55 24.2822 125.285 25.0786 cv
125.02 25.8745 123.516 26.4941 121.923 26.8037 cv
120.331 27.1133 118.65 27.1133 118.238 28.0425 cv
117.825 28.9707 118.68 30.8286 119.667 31.6841 cv
120.655 32.5391 121.776 32.3916 122.941 32.5977 cv
124.105 32.8047 125.314 33.3643 126.7 34.4556 cv
128.086 35.5464 129.649 37.1685 130.519 38.0972 cv
131.389 39.0259 131.566 39.2617 132.627 39.2915 cv
133.688 39.3208 135.635 39.144 137.522 39.0259 cv
139.409 38.9082 141.237 38.8486 143.021 39.2915 cv
144.805 39.7339 146.545 40.6772 148.27 41.2964 cv
149.995 41.916 151.705 42.2104 153.475 42.2183 cv
155.244 42.2251 157.072 41.9448 158.546 42.2183 cv
160.02 42.4907 161.141 43.3164 162.63 43.626 cv
164.119 43.9351 165.977 43.729 166.743 42.5645 cv
167.51 41.3994 167.186 39.2764 168.085 38.6577 cv
168.984 38.0381 171.107 38.9229 172.552 38.7163 cv
173.997 38.5098 174.764 37.2129 173.835 36.1069 cv
172.906 35.001 170.282 34.0869 168.616 33.04 cv
166.95 31.9932 166.242 30.814 166.065 30.0327 cv
165.888 29.251 166.242 28.8677 167.363 28.8823 cv
168.483 28.897 170.37 29.3101 171.978 29.9146 cv
173.584 30.519 174.911 31.3149 176.224 31.3301 cv
177.536 31.3452 178.833 30.5776 178.98 29.6494 cv
179.128 28.7202 178.125 27.6294 177.108 26.8335 cv
176.091 26.0371 175.059 25.5356 174.012 24.8872 cv
172.965 24.2383 171.904 23.4424 171.948 22.6753 cv
171.992 21.9092 173.142 21.1719 174.675 21.4375 cv
176.209 21.7026 178.125 22.9702 179.776 23.6782 cv
181.428 24.3857 182.813 24.5332 183.89 23.7227 cv
184.966 22.9116 185.733 21.1421 186.986 20.6118 cv
188.239 20.0811 189.979 20.7886 192.25 21.5698 cv
194.52 22.3511 197.321 23.2061 198.751 23.0591 cv
200.182 22.9116 200.24 21.7612 200.639 20.8032 cv
201.037 19.8452 201.774 19.0781 202.821 18.2378 cv
203.868 17.3975 205.224 16.4829 205.77 15.333 cv
206.315 14.1831 206.05 12.7969 206.566 12.2368 cv
207.082 11.6763 208.379 11.9419 209.721 11.5146 cv
211.063 11.0869 212.448 9.96631 214.66 9.6123 cv
216.872 9.2583 219.909 9.67139 223.786 11.5732 cv
227.664 13.4751 232.382 16.8662 235.286 19.7559 cv
238.19 22.6455 239.281 25.0337 240.461 26.3311 cv
241.641 27.6289 242.908 27.835 244.265 27.4077 cv
245.622 26.98 247.066 25.9185 247.597 26.2725 cv
248.128 26.6265 247.744 28.3955 247.906 29.8701 cv
248.068 31.3442 248.776 32.5234 249.794 33.084 cv
250.811 33.644 252.138 33.585 252.964 32.6118 cv
253.789 31.6387 254.113 29.752 254.762 28.646 cv
255.411 27.5405 256.384 27.2163 257.637 27.3047 cv
258.891 27.3931 260.423 27.894 261.102 27.3047 cv
261.78 26.7148 261.603 25.0342 262.797 24.5181 cv
263.991 24.002 266.557 24.6509 268.09 25.7271 cv
269.623 26.8032 270.125 28.3071 269.771 29.6636 cv
269.417 31.02 268.208 32.229 266.527 32.686 cv
264.846 33.1431 262.694 32.8477 261.367 33.1284 cv
260.04 33.4082 259.539 34.2637 259.273 35.1777 cv
259.008 36.0918 258.978 37.0649 259.745 37.728 cv
260.512 38.3916 262.075 38.7456 262.62 39.9692 cv
263.165 41.1929 262.694 43.2866 263.549 43.9502 cv
264.404 44.6133 266.586 43.8467 267.854 44.1416 cv
269.122 44.4365 269.476 45.793 270.257 46.8398 cv
271.039 47.8862 272.248 48.6235 273.898 48.7124 cv
275.55 48.8003 277.644 48.2402 278.897 48.417 cv
280.15 48.5942 280.563 49.5083 280.136 50.3926 cv
279.708 51.2773 278.44 52.1323 277.467 52.8403 cv
276.494 53.5483 275.815 54.1079 275.727 54.978 cv
275.638 55.8477 276.14 57.0273 276.081 57.9854 cv
276.022 58.9438 275.402 59.6812 276.11 60.2417 cv
276.818 60.8013 278.853 61.1851 280.474 61.8042 cv
282.096 62.4233 283.305 63.2778 283.835 64.3247 cv
284.366 65.3716 284.219 66.6104 283.703 67.4067 cv
283.187 68.2026 282.302 68.5566 282.229 69.2935 cv
282.155 70.0303 282.892 71.1509 283.216 72.0356 cv
283.541 72.9199 283.452 73.5688 283.231 74.0552 cv
283.01 74.542 282.656 74.8662 281.963 75.4116 cv
281.27 75.957 280.238 76.7241 280.71 77.7417 cv
281.182 78.7588 283.157 80.0264 285.413 80.4688 cv
287.668 80.9111 290.205 80.5278 291.915 80.4395 cv
293.625 80.3511 294.51 80.5571 296.146 81.5156 cv
297.783 82.4741 300.171 84.1846 302.884 84.8628 cv
305.597 85.5405 308.634 85.187 310.462 85.1572 cv
312.29 85.1279 312.91 85.4224 313.337 85.939 cv
313.765 86.4546 314 87.1919 314.517 88.2979 cv
315.033 89.4038 315.829 90.8784 317.008 91.8662 cv
318.188 92.854 319.75 93.355 321.947 94.3135 cv
324.144 95.272 326.975 96.687 328.331 97.7632 cv
329.688 98.8394 329.569 99.5767 329.054 100.284 cv
328.537 100.992 327.624 101.67 327.151 102.688 cv
326.68 103.705 326.65 105.061 325.559 106.138 cv
324.468 107.214 322.315 108.01 321.151 109.219 cv
319.986 110.428 319.809 112.05 319.293 113.451 cv
318.777 114.851 317.922 116.031 318.232 117.417 cv
318.541 118.802 320.016 120.395 321.46 121.161 cv
322.905 121.928 324.32 121.869 325.751 123.387 cv
327.181 124.906 328.625 128.002 330.66 129.609 cv
332.695 131.216 335.319 131.334 339.388 131.467 cv
343.458 131.599 348.971 131.747 352.599 132.764 cv
356.225 133.781 357.965 135.668 359.513 136.435 cv
361.061 137.202 362.417 136.848 363.287 137.645 cv
364.157 138.44 364.541 140.386 364.629 141.949 cv
364.717 143.512 364.511 144.691 364.982 146.048 cv
365.455 147.404 366.604 148.938 368.742 149.498 cv
370.881 150.058 374.006 149.645 376.188 149.763 cv
378.37 149.881 379.608 150.53 380.788 151.945 cv
381.967 153.36 383.088 155.542 383.648 156.634 cv
384.208 157.725 384.208 157.725 386.154 155.661 cv
388.101 153.597 391.993 149.468 394.234 147.316 cv
396.476 145.163 397.064 144.986 398.687 146.166 cv
400.309 147.345 402.962 149.881 406.501 153.154 cv
410.039 156.427 414.462 160.438 416.556 162.531 cv
418.649 164.625 418.413 164.801 415.347 167.455 cv
412.279 170.109 406.383 175.24 403.316 178.277 cv
400.249 181.314 400.014 182.257 399.719 183.584 cv
399.424 184.912 399.069 186.622 399.512 188.008 cv
399.954 189.394 401.193 190.455 400.751 191.281 cv
400.309 192.107 398.186 192.696 397.39 193.935 cv
396.593 195.173 397.124 197.06 398.495 197.959 cv
399.866 198.859 402.078 198.77 403.522 199.744 cv
404.967 200.716 405.646 202.75 404.437 203.753 cv
403.228 204.756 400.132 204.726 398.097 204.299 cv
396.063 203.872 395.089 203.046 393.541 202.869 cv
391.993 202.692 389.87 203.164 388.455 204.21 cv
387.039 205.257 386.332 206.879 386.184 208.826 cv
386.037 210.771 386.449 213.042 384.164 214 cv
381.879 214.958 376.896 214.605 373.873 215.696 cv
370.851 216.787 369.789 219.322 370.246 220.458 cv
370.703 221.593 372.679 221.328 374.713 221.003 cv
376.748 220.679 378.842 220.295 380.419 220.325 cv
381.996 220.355 383.058 220.796 383.309 221.829 cv
383.559 222.861 382.999 224.483 381.053 225.869 cv
379.106 227.254 375.774 228.404 372.767 229.525 cv
369.76 230.645 367.076 231.737 365.086 233.196 cv
363.095 234.656 361.798 236.484 361.061 238.341 cv
360.323 240.199 360.146 242.085 360.5 244.09 cv
360.854 246.095 361.739 248.218 361.709 250.578 cv
361.679 252.936 360.736 255.531 361.237 257.772 cv
361.739 260.013 363.685 261.9 365.041 263.581 cv
366.397 265.261 367.164 266.736 368.314 267.355 cv
369.464 267.975 370.997 267.739 373.062 266.913 cv
375.126 266.087 377.721 264.672 379.519 263.109 cv
381.317 261.546 382.32 259.836 382.557 257.949 cv
382.792 256.062 382.261 253.998 381.199 252.553 cv
380.139 251.108 378.546 250.283 378.369 249.338 cv
378.192 248.395 379.431 247.333 381.524 246.714 cv
383.617 246.095 386.566 245.918 388.336 246.479 cv
390.105 247.039 390.694 248.336 390.341 249.575 cv
389.986 250.813 388.689 251.993 388.041 253.437 cv
387.393 254.882 387.393 256.592 388.453 257.094 cv
389.515 257.595 391.639 256.887 393.23 255.737 cv
394.822 254.587 395.885 252.996 396.179 251.491 cv
396.474 249.988 396.002 248.573 396.297 247.009 cv
396.592 245.447 397.653 243.737 398.449 242.35 cv
399.245 240.964 399.776 239.903 400.425 239.284 cv
401.074 238.665 401.841 238.488 402.313 239.225 cv
402.784 239.962 402.961 241.613 402.578 243.265 cv
402.194 244.916 401.251 246.567 401.221 247.983 cv
401.191 249.398 402.076 250.578 402.872 251.993 cv
403.669 253.409 404.377 255.059 404.996 256.77 cv
405.615 258.48 406.146 260.25 406.529 261.9 cv
406.912 263.552 407.148 265.084 407.178 266.588 cv
407.207 268.092 407.03 269.567 407.591 270.51 cv
408.15 271.454 409.448 271.867 410.568 271.483 cv
411.689 271.1 412.633 269.92 413.459 269.802 cv
414.284 269.685 414.992 270.628 415.61 271.778 cv
416.23 272.928 416.761 274.285 417.675 275.14 cv
418.59 275.995 419.887 276.349 420.653 277.16 cv
421.42 277.97 421.655 279.239 421.228 280.241 cv
420.801 281.244 419.709 281.981 419.68 282.954 cv
419.65 283.927 420.683 285.136 422.85 285.77 cv
425.018 286.404 428.319 286.462 430.045 285.829 cv
431.77 285.195 431.917 283.868 431.283 282.924 cv
430.648 281.981 429.234 281.42 428.644 280.255 cv
428.055 279.091 428.29 277.322 427.538 276.04 cv
426.786 274.756 425.047 273.96 424.634 272.737 cv
424.221 271.513 425.135 269.862 425.164 268.535 cv
425.194 267.208 424.339 266.206 423.056 265.232 cv
421.773 264.259 420.063 263.316 419.709 262.402 cv
419.355 261.488 420.358 260.603 422.216 260.278 cv
424.074 259.955 426.786 260.19 428.57 261.414 cv
430.354 262.637 431.209 264.849 432.521 265.866 cv
433.834 266.883 435.603 266.707 436.531 267.06 cv
437.461 267.415 437.549 268.299 436.679 268.977 cv
435.81 269.656 433.981 270.127 433.185 271.218 cv
432.389 272.309 432.625 274.019 432.935 275.419 cv
433.244 276.821 433.627 277.912 434.1 278.457 cv
434.571 279.002 435.131 279.002 435.662 279.533 cv
436.192 280.064 436.693 281.125 437.033 281.966 cv
437.372 282.806 437.549 283.425 437.431 284.148 cv
437.313 284.871 436.9 285.696 437.003 286.477 cv
437.106 287.259 437.726 287.996 438.64 288.66 cv
439.555 289.323 440.764 289.913 441.824 290.916 cv
442.886 291.918 443.801 293.333 444.641 293.141 cv
445.48 292.95 446.247 291.151 446.63 289.307 cv
447.014 287.464 447.014 285.578 447.396 283.307 cv
447.78 281.037 448.547 278.383 449.667 277.528 cv
450.788 276.672 452.262 277.617 452.704 279.121 cv
453.146 280.624 452.557 282.688 452.793 284.015 cv
453.028 285.342 454.09 285.931 455.859 285.283 cv
457.629 284.634 460.105 282.747 461.639 282.393 cv
463.172 282.04 463.762 283.219 463.614 284.693 cv
463.467 286.167 462.583 287.937 461.462 288.91 cv
460.342 289.882 458.985 290.06 457.688 290.326 cv
456.391 290.59 455.151 290.945 455.122 291.623 cv
455.093 292.3 456.272 293.303 457.953 293.775 cv
459.634 294.247 461.816 294.188 464.086 294.63 cv
466.356 295.073 468.716 296.016 470.927 297.254 cv
473.139 298.493 475.203 300.026 476.353 302.208 cv
477.503 304.39 477.738 307.221 479.861 310.051 cv
481.984 312.882 485.995 315.713 487.853 315.861 cv
489.711 316.008 489.415 313.472 489.533 311.32 cv
489.651 309.167 490.182 307.398 490.212 305.393 cv
490.241 303.387 489.77 301.147 489.445 299.466 cv
489.121 297.786 488.943 296.665 490.123 296.635 cv
491.303 296.606 493.839 297.667 495.489 299.141 cv
497.141 300.616 497.908 302.503 497.79 304.037 cv
497.672 305.57 496.669 306.75 496.197 308.371 cv
495.726 309.993 495.785 312.057 495.902 313.325 cv
496.021 314.592 496.197 315.065 496.551 315.801 cv
496.905 316.539 497.436 317.542 498.675 317.778 cv
499.912 318.013 501.859 317.482 503.304 318.75 cv
504.749 320.018 505.691 323.085 506.43 324.795 cv
507.166 326.505 507.697 326.859 509.083 327.714 cv
510.469 328.57 512.71 329.926 514.154 329.779 cv
515.6 329.631 516.249 327.98 515.747 325.709 cv
515.246 323.439 513.595 320.549 513.565 318.367 cv
513.536 316.185 515.128 314.71 515.423 312.824 cv
515.718 310.936 514.715 308.636 512.504 305.481 cv
510.292 302.327 506.871 298.316 504.926 295.073 cv
502.979 291.829 502.508 289.352 503.127 287.258 cv
503.746 285.165 505.456 283.455 505.957 281.714 cv
506.459 279.975 505.751 278.206 504.336 277.262 cv
502.921 276.319 500.797 276.201 499.146 276.967 cv
497.495 277.734 496.315 279.385 494.664 280.152 cv
493.013 280.918 490.89 280.801 489.533 279.946 cv
488.177 279.09 487.587 277.499 486.113 275.935 cv
484.639 274.373 482.279 272.839 481.926 271.66 cv
481.572 270.481 483.223 269.655 483.194 268.446 cv
483.164 267.237 481.454 265.645 479.566 264.76 cv
477.68 263.875 475.615 263.699 473.227 262.814 cv
470.839 261.929 468.126 260.337 465.708 258.892 cv
463.29 257.448 461.167 256.149 459.781 254.173 cv
458.396 252.198 457.746 249.544 456.449 247.481 cv
455.151 245.417 453.206 243.942 452.822 241.524 cv
452.439 239.106 453.618 235.745 454.179 232.354 cv
454.739 228.962 454.68 225.542 454.119 222.181 cv
453.559 218.819 452.498 215.517 451.849 212.833 cv
451.2 210.15 450.965 208.086 451.761 206.199 cv
452.557 204.312 454.385 202.601 455.594 202.985 cv
456.803 203.369 457.393 205.845 457.54 208.587 cv
457.688 211.33 457.393 214.337 457.835 217.08 cv
458.277 219.822 459.457 222.298 459.958 224.126 cv
460.459 225.955 460.282 227.134 460.488 228.933 cv
460.695 230.732 461.285 233.15 461.462 235.302 cv
461.639 237.455 461.402 239.342 461.815 241.406 cv
462.229 243.47 463.29 245.711 464.528 247.303 cv
465.768 248.896 467.182 249.839 468.716 250.547 cv
470.249 251.254 471.9 251.726 473.227 252.67 cv
474.554 253.614 475.557 255.029 477.148 255.914 cv
478.741 256.798 480.923 257.152 482.722 257.948 cv
484.521 258.745 485.936 259.983 486.938 261.811 cv
487.941 263.639 488.53 266.057 489.268 267.915 cv
490.005 269.773 490.89 271.07 491.745 271.128 cv
492.6 271.188 493.426 270.008 494.605 270.068 cv
495.785 270.126 497.317 271.424 498.526 271.512 cv
499.735 271.601 500.62 270.48 501.476 268.799 cv
502.331 267.119 503.156 264.877 502.979 263.138 cv
502.803 261.399 501.623 260.16 499.677 258.419 cv
497.73 256.68 495.018 254.44 493.573 252.463 cv
492.128 250.488 491.951 248.778 490.948 247.746 cv
489.946 246.714 488.118 246.36 487.057 244.827 cv
485.995 243.293 485.7 240.581 484.992 238.545 cv
484.285 236.511 483.164 235.155 482.811 233.327 cv
482.456 231.499 482.869 229.199 483.075 226.309 cv
483.282 223.419 483.282 219.94 482.929 217.375 cv
482.574 214.809 481.867 213.158 481.129 211.506 cv
480.393 209.855 479.626 208.204 479.803 205.875 cv
479.979 203.544 481.101 200.537 481.425 198.679 cv
481.749 196.822 481.277 196.114 480.48 195.701 cv
479.685 195.289 478.564 195.17 477.856 194.167 cv
477.149 193.165 476.854 191.278 476.205 189.803 cv
475.557 188.33 474.554 187.268 474.495 186.471 cv
474.436 185.675 475.321 185.145 476.028 185.233 cv
476.736 185.322 477.267 186.029 478.151 185.617 cv
479.036 185.204 480.274 183.67 481.425 182.904 cv
482.574 182.137 483.636 182.137 484.992 180.663 cv
486.349 179.189 488 176.24 487.793 174.588 cv
487.587 172.937 485.523 172.583 483.813 173.025 cv
482.103 173.468 480.746 174.706 479.331 175.031 cv
477.916 175.355 476.441 174.765 476.234 173.704 cv
476.028 172.642 477.09 171.109 478.357 169.871 cv
479.626 168.632 481.101 167.688 482.368 167.04 cv
483.636 166.391 484.697 166.037 484.551 164.828 cv
484.402 163.619 483.047 161.556 481.277 159.845 cv
479.508 158.135 477.326 156.778 474.938 155.835 cv
472.549 154.892 469.954 154.36 468.008 152.474 cv
466.062 150.586 464.765 147.343 464.971 146.075 cv
465.177 144.807 466.888 145.515 468.628 146.487 cv
470.367 147.46 472.136 148.699 474.26 149.583 cv
476.383 150.468 478.859 151 480.864 152.09 cv
482.869 153.181 484.402 154.833 485.729 156.484 cv
487.057 158.135 488.177 159.786 489.269 160.494 cv
490.359 161.202 491.421 160.965 492.217 159.551 cv
493.013 158.135 493.544 155.54 493.308 153.83 cv
493.072 152.12 492.069 151.294 490.595 150.35 cv
489.121 149.407 487.175 148.345 485.523 146.93 cv
483.872 145.515 482.516 143.746 481.365 142.242 cv
480.216 140.738 479.272 139.499 477.975 138.762 cv
476.677 138.025 475.026 137.789 473.552 137.671 cv
472.077 137.553 470.779 137.553 470.396 137.052 cv
470.013 136.551 470.544 135.548 470.16 134.074 cv
469.777 132.599 468.48 130.653 467.742 128.943 cv
467.006 127.232 466.828 125.758 467.713 125.375 cv
468.598 124.992 470.544 125.699 472.401 126.672 cv
474.26 127.645 476.028 128.884 477.503 130.889 cv
478.978 132.894 480.156 135.666 481.926 137.671 cv
483.695 139.676 486.054 140.915 487.499 142.005 cv
488.943 143.097 489.475 144.041 491.509 144.129 cv
493.543 144.217 497.082 143.45 499.588 142.654 cv
502.095 141.858 503.569 141.032 503.451 139.676 cv
503.334 138.32 501.623 136.433 499.559 135.135 cv
497.495 133.838 495.077 133.13 492.865 132.57 cv
490.654 132.01 488.648 131.597 486.762 130.978 cv
484.875 130.358 483.105 129.533 481.926 128.294 cv
480.746 127.056 480.156 125.404 480.717 124.491 cv
481.277 123.576 482.987 123.399 485.052 123.635 cv
487.115 123.871 489.533 124.52 491.804 124.903 cv
494.074 125.287 496.197 125.404 497.761 125.788 cv
499.323 126.171 500.326 126.82 499.647 125.169 cv
498.97 123.518 496.61 119.567 494.34 116.765 cv
492.069 113.964 489.887 112.313 487.971 111.812 cv
486.054 111.31 484.402 111.959 483.135 111.104 cv
481.867 110.249 480.981 107.89 480.127 106.357 cv
479.271 104.824 478.446 104.116 477.119 104.116 cv
475.792 104.116 473.964 104.824 473.315 104.204 cv
472.667 103.585 473.197 101.639 473.08 99.958 cv
472.962 98.2773 472.195 96.8618 470.455 96.0952 cv
468.716 95.3286 466.003 95.2104 465.266 94.2373 cv
464.528 93.2642 465.768 91.436 467.006 89.9619 cv
468.244 88.4878 469.482 87.3667 471.546 87.9868 cv
473.61 88.6055 476.5 90.9644 479.33 92.2915 cv
482.161 93.6182 484.934 93.9131 486.143 95.0337 cv
487.351 96.1543 486.997 98.1001 487.587 99.6338 cv
488.177 101.167 489.71 102.288 491.715 102.966 cv
493.721 103.644 496.197 103.88 498.173 103.143 cv
500.148 102.406 501.623 100.695 501.445 99.7222 cv
501.269 98.749 499.44 98.5132 497.406 97.5107 cv
495.371 96.5083 493.131 94.7388 491.45 92.9697 cv
489.77 91.2007 488.648 89.4312 487.086 87.4849 cv
485.522 85.5391 483.518 83.416 483.577 82.5903 cv
483.636 81.7646 485.759 82.2363 487.646 82.8262 cv
489.533 83.416 491.185 84.1235 492.275 85.0674 cv
493.366 86.0107 493.897 87.1904 494.723 88.6646 cv
495.549 90.1387 496.669 91.9082 498.113 92.6157 cv
499.559 93.3237 501.328 92.9697 502.507 92.0557 cv
503.688 91.1416 504.276 89.667 503.657 88.7534 cv
503.038 87.8394 501.21 87.4849 500.001 86.6006 cv
498.792 85.7158 498.202 84.3008 498.792 83.1509 cv
499.382 82.0005 501.15 81.1157 503.127 81.2339 cv
505.103 81.3516 507.284 82.4727 509.26 83.0913 cv
511.234 83.7104 513.003 83.8281 513.356 82.5308 cv
513.71 81.2329 512.649 78.52 511.41 76.3086 cv
510.172 74.0972 508.757 72.3867 506.103 71.4434 cv
503.449 70.4995 499.557 70.3228 498.996 69.1138 cv
498.437 67.9048 501.208 65.6636 504.422 64.6313 cv
507.636 63.5996 511.293 63.7769 513.651 65.2803 cv
516.011 66.7842 517.072 69.6147 517.515 73.0649 cv
517.957 76.5151 517.779 80.584 518.87 82.2646 cv
519.962 83.9453 522.32 83.2378 523.382 81.7632 cv
524.443 80.2891 524.207 78.0479 523.677 75.4829 cv
523.146 72.9175 522.32 70.0278 522.262 67.1968 cv
522.202 64.3657 522.91 61.5947 523.824 59.354 cv
524.738 57.1128 525.859 55.4019 527.245 54.8716 cv
528.631 54.3408 530.282 54.9897 530.813 56.7588 cv
531.344 58.5278 530.754 61.4175 529.986 63.8945 cv
529.221 66.3711 528.277 68.4355 528.188 70.2637 cv
528.1 72.0918 528.867 73.6846 529.78 74.4805 cv
530.695 75.2764 531.756 75.2764 532.552 74.4214 cv
533.349 73.5664 533.879 71.8555 534.793 70.1753 cv
535.707 68.4946 537.005 66.8433 538.921 65.5459 cv
540.838 64.248 543.374 63.3047 544.996 61.9482 cv
546.617 60.5918 547.325 58.8228 547.797 57.3486 cv
548.27 55.874 548.505 54.6948 548.476 53.397 cv
548.446 52.0996 548.15 50.6841 547.354 49.416 cv
546.559 48.1479 545.262 47.0278 545.645 45.583 cv
546.028 44.1382 548.092 42.3687 550.333 40.7769 cv
552.574 39.1841 554.992 37.7686 557.145 37.2676 cv
559.297 36.7661 561.185 37.1792 562.541 36.8252 cv
563.897 36.4712 564.723 35.3506 566.02 34.0537 cv
567.317 32.7559 569.087 31.2817 570.649 30.043 cv
572.212 28.8047 573.569 27.8022 573.746 28.7163 cv
573.923 29.6304 572.92 32.4614 571.858 34.7612 cv
570.797 37.061 569.677 38.8301 568.939 40.688 cv
568.202 42.5459 567.849 44.4917 567.052 46.4673 cv
566.256 48.4434 565.018 50.4482 564.369 52.0405 cv
563.721 53.6328 563.661 54.812 564.457 54.5762 cv
565.254 54.3403 566.904 52.6895 568.35 50.6548 cv
569.795 48.6196 571.033 46.2017 572.625 44.6392 cv
574.218 43.0762 576.164 42.3687 577.785 41.5728 cv
579.407 40.7764 580.705 39.8916 582.238 37.7095 cv
583.771 35.5273 585.54 32.0483 587.251 30.1611 cv
588.961 28.2739 590.612 27.979 591.556 28.9229 cv
592.499 29.8662 592.735 32.0483 591.497 34.3774 cv
590.259 36.707 587.545 39.1841 585.658 41.0713 cv
583.771 42.9585 582.71 44.2559 582.621 45.3765 cv
582.532 46.4971 583.418 47.4404 585.216 48.6494 cv
587.015 49.8584 589.728 51.333 591.556 53.2788 cv
593.384 55.2251 594.327 57.6431 593.473 58.4097 cv
592.617 59.1763 589.964 58.2915 587.516 57.1123 cv
585.068 55.9331 582.828 54.4585 580.498 53.6914 cv
578.169 52.9253 575.751 52.8657 573.923 54.0454 cv
572.095 55.2251 570.856 57.6431 569.027 59.5303 cv
567.199 61.4175 564.782 62.7734 563.042 64.1299 cv
561.303 65.4863 560.241 66.8428 562.217 67.4619 cv
564.191 68.0815 569.205 67.9634 572.566 68.4644 cv
575.928 68.9658 577.638 70.0864 580.94 70.4697 cv
584.243 70.853 589.138 70.4995 591.556 70.7056 cv
593.974 70.9121 593.915 71.6787 592.264 72.5044 cv
590.612 73.3296 587.369 74.2148 583.27 74.3623 cv
579.171 74.5093 574.218 73.9194 570.531 73.3594 cv
566.846 72.7993 564.428 72.2681 561.774 72.3276 cv
559.12 72.3862 556.23 73.0352 553.9 73.1528 cv
551.571 73.271 549.803 72.8579 548.476 73.1528 cv
547.148 73.4478 546.264 74.4507 546.559 75.394 cv
546.854 76.3374 548.328 77.2222 550.362 78.4312 cv
552.397 79.6401 554.992 81.1733 555.287 82.0283 cv
555.582 82.8838 553.576 83.061 551.276 82.9429 cv
548.977 82.8247 546.382 82.4121 544.229 82.0581 cv
542.076 81.7046 540.366 81.4092 540.396 82.5005 cv
540.426 83.5913 542.194 86.0684 542.695 87.9556 cv
543.197 89.8428 542.431 91.1396 541.428 91.4937 cv
540.426 91.8477 539.187 91.2578 538.096 90.4917 cv
537.005 89.7246 536.062 88.7813 535.206 88.7515 cv
534.351 88.7217 533.584 89.6069 533.997 90.7568 cv
534.41 91.9067 536.002 93.3218 536.976 94.5308 cv
537.948 95.7397 538.302 96.7427 537.329 97.0967 cv
536.356 97.4502 534.057 97.1553 532.287 97.126 cv
530.518 97.0967 529.279 97.3325 528.1 99.1899 cv
526.92 101.048 525.8 104.527 524.178 107.004 cv
522.557 109.481 520.434 110.956 520.463 112.135 cv
520.492 113.314 522.674 114.199 524.267 116.116 cv
525.858 118.032 526.861 120.981 526.714 124.608 cv
526.566 128.235 525.27 132.54 525.181 135.371 cv
525.092 138.201 526.213 139.558 527.863 140.147 cv
529.515 140.737 531.697 140.56 532.582 139.322 cv
533.467 138.083 533.054 135.783 532.817 133.631 cv
532.582 131.478 532.522 129.473 532.316 127.852 cv
532.109 126.229 531.756 124.991 532.316 123.782 cv
532.876 122.573 534.351 121.394 534.646 119.713 cv
534.94 118.032 534.056 115.85 533.378 113.963 cv
532.699 112.076 532.229 110.483 533.112 109.039 cv
533.997 107.593 536.238 106.296 537.329 106.414 cv
538.42 106.532 538.361 108.065 538.184 109.953 cv
538.007 111.84 537.713 114.081 538.332 114.523 cv
538.951 114.965 540.484 113.609 541.958 111.869 cv
543.433 110.13 544.849 108.006 546.116 107.535 cv
547.384 107.063 548.505 108.242 548.269 109.717 cv
548.033 111.191 546.44 112.96 545.645 114.317 cv
544.849 115.673 544.849 116.617 545.762 116.912 cv
546.676 117.207 548.505 116.853 550.186 115.703 cv
551.866 114.553 553.399 112.606 554.461 111.397 cv
555.522 110.188 556.112 109.717 555.611 108.685 cv
555.109 107.653 553.518 106.061 553.871 104.351 cv
554.225 102.64 556.525 100.812 558.913 98.9834 cv
561.302 97.1553 563.779 95.3271 566.786 94.2661 cv
569.794 93.2041 573.332 92.9092 575.986 93.3516 cv
578.64 93.7939 580.409 94.9731 581.234 96.2119 cv
582.061 97.4502 581.942 98.7476 580.527 99.0132 cv
579.112 99.2783 576.399 98.5117 573.922 98.2461 cv
571.445 97.981 569.204 98.2168 567.259 98.9541 cv
565.313 99.6909 563.661 100.93 562.718 102.581 cv
561.774 104.232 561.538 106.296 562.806 107.27 cv
564.073 108.242 566.846 108.125 567.465 108.626 cv
568.084 109.127 566.551 110.248 564.752 111.575 cv
562.953 112.902 560.889 114.435 558.618 116.027 cv
556.349 117.62 553.871 119.271 551.896 120.539 cv
549.92 121.806 548.445 122.691 548.682 123.311 cv
548.917 123.93 550.863 124.283 552.279 125.729 cv
553.694 127.173 554.579 129.709 554.343 130.8 cv
554.107 131.891 552.751 131.537 551.011 130.83 cv
549.271 130.122 547.148 129.06 544.996 129.09 cv
542.843 129.119 540.661 130.24 540.101 132.039 cv
539.541 133.837 540.603 136.314 541.015 139.056 cv
541.428 141.798 541.191 144.806 540.514 145.986 cv
539.836 147.165 538.715 146.516 536.533 146.605 cv
534.351 146.693 531.107 147.519 530.046 149.023 cv
528.984 150.526 530.104 152.708 530.782 155.245 cv
531.461 157.78 531.697 160.67 532.788 161.613 cv
533.879 162.557 535.825 161.554 536.769 159.785 cv
537.712 158.016 537.653 155.48 538.773 154.301 cv
539.895 153.121 542.194 153.298 542.902 154.714 cv
543.609 156.129 542.725 158.783 542.519 160.257 cv
542.313 161.731 542.783 162.026 543.344 162.233 cv
543.904 162.439 544.553 162.557 545.113 161.024 cv
545.674 159.491 546.146 156.306 546.617 154.713 cv
547.089 153.121 547.561 153.121 548.651 153.239 cv
549.743 153.357 551.453 153.593 552.367 155.067 cv
553.281 156.542 553.399 159.255 553.134 161.23 cv
552.868 163.206 552.22 164.444 551.306 165.978 cv
550.392 167.511 549.212 169.339 547 170.018 cv
544.789 170.696 541.545 170.224 539.127 170.873 cv
536.709 171.521 535.117 173.29 534.469 174.971 cv
533.819 176.652 534.114 178.244 534.38 179.63 cv
534.646 181.016 534.882 182.196 536.061 182.254 cv
537.24 182.313 539.363 181.251 541.191 180.19 cv
543.02 179.128 544.553 178.067 546.086 177.654 cv
547.62 177.241 549.152 177.477 549.241 178.892 cv
549.33 180.308 547.974 182.903 546.264 184.937 cv
544.553 186.972 542.489 188.447 540.483 189.213 cv
538.479 189.98 536.532 190.039 534.852 189.125 cv
533.171 188.21 531.756 186.324 530.694 184.436 cv
529.633 182.549 528.925 180.662 527.922 179.01 cv
526.92 177.359 525.622 175.944 524.59 174.086 cv
523.559 172.229 522.791 169.928 522.055 169.604 cv
521.317 169.28 520.609 170.931 519.105 172.523 cv
517.602 174.116 515.302 175.649 513.945 177.654 cv
512.589 179.66 512.177 182.136 511.41 184.672 cv
510.644 187.208 509.522 189.803 508.49 192.338 cv
507.459 194.875 506.515 197.351 506.043 200.064 cv
505.571 202.777 505.571 205.726 506.367 207.613 cv
507.164 209.5 508.756 210.326 509.699 210.089 cv
510.643 209.854 510.938 208.556 511.174 207.112 cv
511.41 205.667 511.587 204.075 511.675 202.866 cv
511.764 201.657 511.764 200.831 511.882 199.592 cv
512 198.354 512.235 196.703 512.678 194.58 cv
513.12 192.457 513.769 189.862 514.83 187.797 cv
515.892 185.733 517.366 184.201 518.604 184.348 cv
519.843 184.495 520.846 186.324 520.846 188.003 cv
520.846 189.685 519.843 191.218 519.017 193.017 cv
518.191 194.815 517.543 196.879 518.397 198.56 cv
519.253 200.242 521.612 201.539 522.939 201.568 cv
524.266 201.598 524.561 200.359 524.768 199.062 cv
524.974 197.764 525.092 196.408 525.682 194.904 cv
526.271 193.4 527.332 191.749 528.748 191.719 cv
530.163 191.69 531.933 193.283 532.227 194.756 cv
532.522 196.231 531.343 197.587 530.399 199.002 cv
529.455 200.417 528.748 201.892 528.659 203.514 cv
528.571 205.136 529.102 206.905 530.37 207.052 cv
531.638 207.2 533.643 205.726 534.822 204.428 cv
536.002 203.131 536.355 202.01 536.887 200.831 cv
537.417 199.652 538.125 198.413 539.628 197.587 cv
541.132 196.762 543.433 196.349 545.408 194.904 cv
547.384 193.458 549.035 190.982 550.598 190.894 cv
552.16 190.805 553.635 193.105 553.517 194.875 cv
553.399 196.644 551.688 197.882 549.684 199.033 cv
547.679 200.182 545.378 201.244 543.521 202.748 cv
541.663 204.251 540.248 206.198 540.041 207.465 cv
539.835 208.733 540.838 209.323 541.604 209.293 cv
542.371 209.264 542.901 208.615 544.258 207.642 cv
545.614 206.669 547.796 205.372 549.123 205.549 cv
550.45 205.726 550.922 207.376 550.834 209.028 cv
550.745 210.679 550.097 212.331 549.86 213.982 cv
549.625 215.633 549.802 217.285 551.069 218.523 cv
552.338 219.761 554.696 220.587 556.229 220.941 cv
557.764 221.294 558.471 221.177 559.65 221.339 cv
560.829 221.501 562.479 221.944 564.013 220.985 cv
565.546 220.027 566.961 217.667 568.141 215.575 cv
569.32 213.481 570.264 211.653 570.087 209.559 cv
569.91 207.465 568.612 205.107 566.961 203.072 cv
565.31 201.038 563.305 199.327 562.627 197.263 cv
561.948 195.199 562.597 192.781 563.747 190.51 cv
564.897 188.24 566.548 186.117 568.465 184.613 cv
570.382 183.109 572.563 182.224 575.04 180.603 cv
577.518 178.981 580.289 176.622 582.796 175.708 cv
585.302 174.794 587.543 175.325 587.632 176.475 cv
587.72 177.625 585.655 179.394 583.355 180.869 cv
581.056 182.342 578.521 183.522 575.925 185.026 cv
573.33 186.53 570.677 188.358 569.291 190.069 cv
567.904 191.779 567.787 193.371 568.642 195.494 cv
569.497 197.617 571.325 200.271 573.006 202.542 cv
574.687 204.812 576.22 206.699 577.075 208.468 cv
577.931 210.238 578.107 211.888 577.192 214.129 cv
576.279 216.371 574.274 219.202 572.387 221.767 cv
570.5 224.333 568.73 226.632 566.548 228.106 cv
564.366 229.581 561.771 230.229 559.059 229.64 cv
556.346 229.05 553.516 227.222 551.127 226.161 cv
548.738 225.099 546.792 224.804 544.492 224.156 cv
542.192 223.506 539.538 222.503 538.684 221.265 cv
537.828 220.027 538.771 218.552 538.684 217.374 cv
538.595 216.194 537.475 215.309 536.029 215.544 cv
534.584 215.781 532.815 217.137 531.193 217.756 cv
529.572 218.375 528.098 218.257 526.004 217.756 cv
523.91 217.255 521.197 216.371 519.34 216.547 cv
517.482 216.724 516.479 217.963 516.98 218.848 cv
517.482 219.732 519.487 220.263 520.431 221.443 cv
521.374 222.622 521.257 224.45 520.106 225.394 cv
518.956 226.337 516.774 226.396 515.831 227.222 cv
514.887 228.047 515.182 229.64 516.008 230.495 cv
516.834 231.35 518.189 231.468 519.192 232.205 cv
520.194 232.942 520.844 234.298 521.699 233.561 cv
522.554 232.825 523.615 229.994 525.709 228.667 cv
527.803 227.339 530.928 227.517 533.582 227.576 cv
536.235 227.634 538.418 227.576 539.185 227.958 cv
539.951 228.342 539.303 229.167 538.211 229.935 cv
537.12 230.702 535.587 231.409 535.101 232.603 cv
534.613 233.797 535.174 235.478 537.062 235.419 cv
538.948 235.36 542.162 233.561 543.917 233.606 cv
545.672 233.65 545.967 235.538 545.362 237.173 cv
544.758 238.81 543.254 240.196 541.47 240.978 cv
539.686 241.759 537.622 241.936 536.059 241.406 cv
534.496 240.875 533.435 239.636 532.402 238.545 cv
531.371 237.454 530.368 236.51 528.864 236.481 cv
527.36 236.452 525.355 237.336 523.999 238.397 cv
522.643 239.458 521.935 240.698 522.053 242.29 cv
522.171 243.882 523.114 245.829 524.411 247.244 cv
525.709 248.659 527.36 249.543 527.625 250.458 cv
527.891 251.372 526.771 252.316 525.591 252.906 cv
524.411 253.495 523.173 253.731 522.053 252.964 cv
520.933 252.198 519.93 250.428 519.398 248.365 cv
518.868 246.3 518.81 243.941 518.661 242.349 cv
518.515 240.756 518.278 239.931 517.335 239.96 cv
516.392 239.99 514.74 240.875 513.354 241.317 cv
511.969 241.759 510.848 241.759 510.11 242.32 cv
509.373 242.879 509.02 244 509.786 245.563 cv
510.553 247.125 512.44 249.13 513.797 251.519 cv
515.153 253.908 515.979 256.679 516.479 259.097 cv
516.981 261.515 517.158 263.58 517.659 264.995 cv
518.161 266.411 518.986 267.177 520.549 267.501 cv
522.112 267.826 524.411 267.708 526.004 268.002 cv
527.597 268.297 528.48 269.004 528.511 268.238 cv
528.54 267.472 527.714 265.231 527.508 263.609 cv
527.302 261.987 527.714 260.984 528.156 260.719 cv
528.599 260.454 529.07 260.925 530.19 261.928 cv
531.312 262.931 533.081 264.464 534.997 266.085 cv
536.914 267.708 538.979 269.417 539.892 271.04 cv
540.807 272.662 540.57 274.195 540.423 275.492 cv
540.275 276.79 540.216 277.851 541.101 278.381 cv
541.985 278.913 543.813 278.913 545.966 279.797 cv
548.118 280.682 550.596 282.451 551.244 284.043 cv
551.893 285.636 550.713 287.051 550.609 288.599 cv
550.506 290.147 551.479 291.828 553.543 293.213 cv
555.606 294.599 558.763 295.69 559.898 295.263 cv
561.034 294.835 560.148 292.889 559.707 291.15 cv
559.265 289.41 559.265 287.876 560.031 286.549 cv
560.798 285.223 562.331 284.102 562.508 283.129 cv
562.685 282.156 561.506 281.331 560.061 280.624 cv
558.616 279.916 556.905 279.326 556.699 278.293 cv
556.493 277.261 557.79 275.788 559.088 274.077 cv
560.386 272.367 561.683 270.42 562.36 268.327 cv
563.038 266.233 563.098 263.993 563.775 263.196 cv
564.454 262.4 565.752 263.049 567.344 264.199 cv
568.937 265.349 570.823 267 571.737 268.563 cv
572.651 270.125 572.593 271.6 571.147 272.72 cv
569.703 273.84 566.872 274.608 565.574 275.787 cv
564.277 276.966 564.514 278.559 565.545 280.358 cv
566.577 282.157 568.405 284.162 569.644 286.285 cv
570.882 288.408 571.531 290.649 572.209 290.236 cv
572.888 289.823 573.595 286.756 573.949 284.073 cv
574.303 281.389 574.303 279.089 575.452 277.114 cv
576.603 275.138 578.903 273.487 581.055 271.482 cv
583.208 269.477 585.213 267.118 586.245 264.7 cv
587.277 262.282 587.336 259.805 587.689 257.8 cv
588.044 255.794 588.692 254.262 589.193 252.167 cv
589.695 250.075 590.049 247.42 590.668 245.445 cv
591.287 243.469 592.172 242.172 592.644 242.32 cv
593.115 242.466 593.174 244.059 593.734 245.681 cv
594.295 247.303 595.356 248.954 595.828 250.576 cv
596.3 252.198 596.182 253.79 595.504 255.117 cv
594.825 256.444 593.587 257.505 593.174 258.891 cv
592.762 260.277 593.175 261.987 592.791 263.226 cv
592.407 264.464 591.229 265.231 590.402 266.735 cv
589.577 268.238 589.105 270.479 588.162 272.337 cv
587.218 274.195 585.803 275.669 584.27 277.468 cv
582.736 279.267 581.085 281.389 580.701 283.866 cv
580.318 286.343 581.203 289.174 581.939 290.795 cv
582.677 292.417 583.267 292.831 584.313 292.093 cv
585.359 291.356 586.862 289.468 588.557 288.17 cv
590.252 286.873 592.139 286.166 594.498 285.634 cv
596.856 285.104 599.688 284.75 601.279 285.015 cv
602.872 285.281 603.226 286.166 602.459 286.991 cv
601.692 287.816 599.806 288.583 598.597 288.996 cv
597.388 289.409 596.856 289.468 596.414 289.762 cv
595.972 290.057 595.618 290.588 596.208 291.649 cv
596.798 292.71 598.331 294.303 598.508 295.394 cv
598.685 296.486 597.506 297.076 595.824 297.34 cv
594.144 297.606 591.962 297.547 589.337 298.048 cv
586.713 298.549 583.646 299.611 581.258 300.201 cv
578.87 300.791 577.159 300.909 575.686 301.173 cv
574.211 301.439 572.973 301.852 572.383 304.417 cv
571.793 306.983 571.852 311.701 572.56 314.148 cv
573.268 316.595 574.624 316.773 576.187 315.504 cv
577.749 314.237 579.519 311.524 581.494 310.108 cv
583.47 308.693 585.651 308.576 588.246 308.132 cv
590.842 307.691 593.849 306.923 596.65 305.921 cv
599.451 304.918 602.047 303.68 604.17 303.562 cv
606.293 303.444 607.943 304.447 608.091 305.833 cv
608.238 307.219 606.883 308.988 604.671 310.02 cv
602.459 311.052 599.393 311.347 596.65 311.73 cv
593.908 312.114 591.49 312.585 589.309 314.502 cv
587.126 316.418 585.18 319.78 584.885 322.021 cv
584.59 324.262 585.946 325.382 588.217 325.294 cv
590.487 325.206 593.672 323.909 595.677 322.257 cv
597.683 320.606 598.508 318.601 600.336 317.922 cv
602.164 317.245 604.995 317.893 606.233 319.043 cv
607.472 320.193 607.118 321.844 605.201 323.878 cv
603.285 325.914 599.806 328.332 596.769 329.57 cv
593.731 330.808 591.136 330.867 588.836 331.487 cv
586.536 332.106 584.531 333.286 583.617 335.083 cv
582.703 336.882 582.88 339.3 582.496 341.748 cv
582.113 344.195 581.17 346.671 580.462 348.936 cv
579.754 351.202 579.283 353.254 580.167 353.904 cv
581.052 354.552 583.293 353.796 585.651 352.18 cv
588.011 350.564 590.487 348.086 593.318 346.023 cv
596.148 343.958 599.334 342.307 602.576 341.482 cv
605.82 340.656 609.123 340.656 611.836 341.422 cv
614.549 342.19 616.672 343.722 618.264 343.722 cv
619.856 343.722 620.918 342.19 622.156 341.069 cv
623.395 339.949 624.811 339.241 631.828 338.238 cv
638.846 337.236 651.466 335.938 658.366 334.936 cv
665.266 333.933 666.445 333.225 667.33 331.574 cv
668.215 329.923 668.805 327.329 668.332 325.5 cv
667.861 323.671 666.327 322.611 667.035 321.195 cv
667.743 319.78 670.691 318.01 673.168 317.479 cv
675.646 316.949 677.65 317.657 678.653 316.89 cv
679.655 316.124 679.655 313.882 680.717 310.756 cv
681.778 307.631 683.901 303.621 684.963 300.495 cv
686.024 297.37 686.024 295.128 687.027 293.242 cv
688.03 291.354 690.035 289.821 691.627 288.111 cv
693.22 286.4 694.398 284.513 694.812 285.103 cv
695.225 285.693 694.871 288.759 694.871 290.882 cv
694.871 293.005 695.225 294.185 696.286 293.772 cv
697.348 293.36 699.116 291.354 700.532 288.996 cv
701.947 286.636 703.009 283.923 704.188 281.447 cv
705.368 278.969 706.665 276.729 707.432 274.665 cv
708.198 272.601 708.435 270.713 707.373 269.888 cv
706.312 269.062 703.953 269.298 703.068 268.532 cv
702.184 267.765 702.773 265.996 702.891 264.581 cv
703.009 263.165 702.655 262.103 700.945 260.983 cv
699.235 259.862 696.168 258.683 695.549 257.415 cv
694.93 256.147 696.758 254.791 699.234 255.115 cv
701.712 255.439 704.838 257.444 707.078 258.565 cv
709.319 259.685 710.676 259.921 711.324 258.565 cv
711.974 257.208 711.914 254.26 711.118 252.314 cv
710.322 250.368 708.789 249.424 707.845 249.041 cv
706.901 248.658 706.548 248.834 691.155 248.716 cv
675.764 248.598 645.333 248.185 630.088 247.95 cv
614.844 247.713 614.785 247.655 614.755 247.094 cv
614.726 246.535 614.726 245.473 614.726 243.674 cv
614.726 241.875 614.726 239.339 612.013 198.854 cv
609.3 158.369 603.874 79.9346 601.161 40.7173 cv
598.448 1.5 598.448 1.5 598.123 1.5 cv
597.799 1.5 597.15 1.5 596.825 1.5 cv
596.501 1.5 596.501 1.5 595.971 1.5 cv
595.439 1.5 594.378 1.5 495.211 1.5 cv
396.044 1.5 198.772 1.5 100.136 1.5 cv
1.5 1.5 1.5 1.5 1.5 1.86816 cv
1.5 2.23633 1.5 2.97314 1.5 4.40283 cv
1.5 5.83252 1.5 7.95557 1.5 24.7041 cv
1.5 41.4526 1.5 72.8267 1.5 88.5137 cv
1.5 104.201 1.5 104.201 1.9458 104.112 cv
2.39063 104.023 3.28076 103.847 5.1123 103.316 cv
6.94336 102.785 9.71533 101.9 11.3242 100.847 cv
12.9326 99.7944 13.3784 98.5723 14.5151 96.7236 cv
14.5151 96.7236 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
ef
2.9999 lw
1 lc
1 lj
22.9256 ml
[] 0 dsh
true sadj
515.419 135.488 mo
514.741 134.958 513.827 136.52 512.633 139.012 cv
511.438 141.503 509.964 144.924 508.638 147.563 cv
507.311 150.202 506.131 152.06 506.014 154.684 cv
505.896 157.309 506.839 160.699 506.677 163.191 cv
506.515 165.683 505.246 167.275 504.553 168.484 cv
503.86 169.693 503.743 170.519 504.893 170.533 cv
506.043 170.548 508.461 169.752 510.362 167.865 cv
512.265 165.978 513.65 162.999 514.756 161.201 cv
515.861 159.402 516.688 158.783 517.72 157.559 cv
518.751 156.335 519.99 154.507 521.229 152.679 cv
522.467 150.851 523.705 149.022 523.734 147.799 cv
523.764 146.575 522.585 145.956 521.258 144.968 cv
519.932 143.98 518.457 142.624 517.498 140.634 cv
516.54 138.643 516.098 136.019 515.419 135.488 cv
cp
507.751 228.106 mo
507.014 228.667 506.247 230.613 505.775 232.765 cv
505.304 234.917 505.127 237.277 506.011 237.792 cv
506.896 238.309 508.842 236.982 510.287 235.846 cv
511.731 234.711 512.675 233.768 512.527 232.692 cv
512.381 231.615 511.143 230.406 510.169 229.389 cv
509.195 228.372 508.488 227.546 507.751 228.106 cv
507.751 228.106 li
cp
528.419 274.15 mo
527.711 275.432 527.21 276.995 527.785 278.646 cv
528.36 280.297 530.011 282.038 531.014 283.969 cv
532.017 285.9 532.37 288.023 533.756 289.969 cv
535.143 291.916 537.561 293.685 539.979 294.496 cv
542.396 295.306 544.813 295.159 545.846 294.068 cv
546.878 292.977 546.524 290.943 545.757 290.175 cv
544.99 289.409 543.812 289.911 542.116 289.379 cv
540.42 288.849 538.209 287.287 536.853 285.237 cv
535.496 283.188 534.994 280.652 534.832 278.381 cv
534.67 276.111 534.847 274.105 534.257 272.896 cv
533.668 271.688 532.312 271.275 531.176 271.569 cv
530.041 271.865 529.127 272.868 528.419 274.15 cv
528.419 274.15 li
cp
557.888 299.527 mo
556.27 298.926 554.441 298.926 552.797 299.84 cv
551.152 300.753 549.691 302.582 549.795 304.33 cv
549.899 306.079 551.57 307.75 553.397 308.115 cv
555.225 308.481 557.209 307.541 558.723 306.392 cv
560.236 305.244 561.281 303.886 561.098 302.607 cv
560.916 301.329 559.506 300.127 557.888 299.527 cv
557.888 299.527 li
cp
563.064 310.756 mo
560.706 312.408 558.347 314.059 558.022 316.182 cv
557.698 318.305 559.408 320.9 560.912 322.315 cv
562.416 323.731 563.713 323.966 564.332 322.551 cv
564.952 321.136 564.894 318.069 564.922 315.887 cv
564.952 313.705 565.069 312.408 564.774 311.7 cv
564.48 310.993 563.772 310.875 563.064 310.756 cv
563.064 310.756 li
cp
565.306 333.402 mo
563.654 331.574 561.236 330.1 559.556 331.633 cv
557.875 333.167 556.932 337.708 556.901 340.656 cv
556.873 343.605 557.757 344.961 560.027 346.229 cv
562.298 347.498 565.955 348.676 567.636 347.556 cv
569.316 346.436 569.021 343.015 568.432 340.213 cv
567.842 337.413 566.957 335.231 565.306 333.402 cv
565.306 333.402 li
cp
720.501 251.532 mo
719.94 251.076 719.259 250.486 717.975 253.198 cv
716.69 255.912 714.804 261.926 713.447 266.821 cv
712.091 271.716 711.265 275.49 709.791 279.913 cv
708.316 284.336 706.193 289.408 703.834 294.008 cv
701.476 298.608 698.881 302.736 696.934 306.452 cv
694.988 310.167 693.691 313.469 692.688 316.064 cv
691.686 318.659 690.979 320.546 689.563 322.61 cv
688.147 324.674 686.024 326.916 684.019 328.625 cv
682.014 330.335 680.127 331.515 680.657 332.105 cv
681.188 332.695 684.138 332.695 687.204 331.987 cv
690.271 331.279 693.455 329.864 695.755 327.033 cv
698.055 324.203 699.47 319.957 701.357 315.651 cv
703.244 311.346 705.604 306.982 707.234 302.667 cv
708.866 298.352 709.771 294.085 711.88 287.392 cv
713.99 280.699 717.306 271.578 719.184 265.38 cv
721.062 259.184 721.5 255.911 721.5 254.112 cv
721.5 252.314 721.062 251.989 720.501 251.532 cv
720.501 251.532 li
cp
14.5151 96.7236 mo
15.6523 94.8745 17.481 92.3975 19.1616 91.1885 cv
20.8423 89.9795 22.3755 90.0386 23.5845 89.0356 cv
24.7935 88.0332 25.6782 85.9692 26.9756 84.9961 cv
28.2729 84.0229 29.9829 84.1411 31.3101 84.4653 cv
32.6367 84.7896 33.5801 85.3208 34.3174 84.5244 cv
35.0547 83.7285 35.5854 81.605 36.647 80.3374 cv
37.7085 79.0698 39.3013 78.6567 40.0381 77.5952 cv
40.7754 76.5337 40.6572 74.8228 41.8662 73.9683 cv
43.0752 73.1128 45.6113 73.1128 47.1743 72.0518 cv
48.7368 70.9897 49.3262 68.8667 50.5059 68.1299 cv
51.6855 67.3926 53.4546 68.0415 54.6636 67.3633 cv
55.8726 66.6846 56.5215 64.6797 57.6714 63.5889 cv
58.8213 62.498 60.4722 62.3208 61.6812 61.1709 cv
62.8901 60.021 63.6572 57.8979 64.3057 56.1284 cv
64.9546 54.3594 65.4854 52.9438 67.1069 51.9414 cv
68.7285 50.939 71.4414 50.3491 73.1514 50.2607 cv
74.8618 50.1724 75.5698 50.5854 77.0146 51.6763 cv
78.4595 52.7671 80.6411 54.5361 82.4995 56.0405 cv
84.3569 57.5444 85.8901 58.7822 86.8042 58.2515 cv
87.7183 57.7207 88.0132 55.4209 88.957 54.1235 cv
89.8999 52.8262 91.4927 52.5313 92.2891 52.0298 cv
93.085 51.5288 93.085 50.8213 93.085 50.0547 cv
93.085 49.2876 93.085 48.4624 93.9399 47.6362 cv
94.7954 46.811 96.5054 45.9854 98.0684 44.7173 cv
99.6309 43.4497 101.046 41.7388 102.152 40.1909 cv
103.258 38.6426 104.054 37.2568 105.027 36.6675 cv
106 36.0776 107.15 36.2837 108.654 36.1953 cv
110.158 36.1069 112.016 35.7236 112.576 34.9863 cv
113.136 34.2495 112.399 33.1582 111.278 32.3618 cv
110.158 31.5659 108.654 31.0645 108.374 30.4014 cv
108.094 29.7378 109.038 28.9121 110.306 27.9541 cv
111.573 26.9956 113.166 25.9043 113.092 24.5039 cv
113.018 23.103 111.278 21.3936 110.895 20.2432 cv
110.511 19.0933 111.485 18.5039 113.003 17.7666 cv
114.522 17.0293 116.586 16.1445 117.854 16.4395 cv
119.122 16.7344 119.594 18.2085 119.21 19.2256 cv
118.827 20.2432 117.589 20.8027 117.5 21.5107 cv
117.412 22.2183 118.474 23.0737 119.682 23.2358 cv
120.891 23.3979 122.248 22.8672 123.413 23.0884 cv
124.577 23.3096 125.55 24.2822 125.285 25.0786 cv
125.02 25.8745 123.516 26.4941 121.923 26.8037 cv
120.331 27.1133 118.65 27.1133 118.238 28.0425 cv
117.825 28.9707 118.68 30.8286 119.667 31.6841 cv
120.655 32.5391 121.776 32.3916 122.941 32.5977 cv
124.105 32.8047 125.314 33.3643 126.7 34.4556 cv
128.086 35.5464 129.649 37.1685 130.519 38.0972 cv
131.389 39.0259 131.566 39.2617 132.627 39.2915 cv
133.688 39.3208 135.635 39.144 137.522 39.0259 cv
139.409 38.9082 141.237 38.8486 143.021 39.2915 cv
144.805 39.7339 146.545 40.6772 148.27 41.2964 cv
149.995 41.916 151.705 42.2104 153.475 42.2183 cv
155.244 42.2251 157.072 41.9448 158.546 42.2183 cv
160.02 42.4907 161.141 43.3164 162.63 43.626 cv
164.119 43.9351 165.977 43.729 166.743 42.5645 cv
167.51 41.3994 167.186 39.2764 168.085 38.6577 cv
168.984 38.0381 171.107 38.9229 172.552 38.7163 cv
173.997 38.5098 174.764 37.2129 173.835 36.1069 cv
172.906 35.001 170.282 34.0869 168.616 33.04 cv
166.95 31.9932 166.242 30.814 166.065 30.0327 cv
165.888 29.251 166.242 28.8677 167.363 28.8823 cv
168.483 28.897 170.37 29.3101 171.978 29.9146 cv
173.584 30.519 174.911 31.3149 176.224 31.3301 cv
177.536 31.3452 178.833 30.5776 178.98 29.6494 cv
179.128 28.7202 178.125 27.6294 177.108 26.8335 cv
176.091 26.0371 175.059 25.5356 174.012 24.8872 cv
172.965 24.2383 171.904 23.4424 171.948 22.6753 cv
171.992 21.9092 173.142 21.1719 174.675 21.4375 cv
176.209 21.7026 178.125 22.9702 179.776 23.6782 cv
181.428 24.3857 182.813 24.5332 183.89 23.7227 cv
184.966 22.9116 185.733 21.1421 186.986 20.6118 cv
188.239 20.0811 189.979 20.7886 192.25 21.5698 cv
194.52 22.3511 197.321 23.2061 198.751 23.0591 cv
200.182 22.9116 200.24 21.7612 200.639 20.8032 cv
201.037 19.8452 201.774 19.0781 202.821 18.2378 cv
203.868 17.3975 205.224 16.4829 205.77 15.333 cv
206.315 14.1831 206.05 12.7969 206.566 12.2368 cv
207.082 11.6763 208.379 11.9419 209.721 11.5146 cv
211.063 11.0869 212.448 9.96631 214.66 9.6123 cv
216.872 9.2583 219.909 9.67139 223.786 11.5732 cv
227.664 13.4751 232.382 16.8662 235.286 19.7559 cv
238.19 22.6455 239.281 25.0337 240.461 26.3311 cv
241.641 27.6289 242.908 27.835 244.265 27.4077 cv
245.622 26.98 247.066 25.9185 247.597 26.2725 cv
248.128 26.6265 247.744 28.3955 247.906 29.8701 cv
248.068 31.3442 248.776 32.5234 249.794 33.084 cv
250.811 33.644 252.138 33.585 252.964 32.6118 cv
253.789 31.6387 254.113 29.752 254.762 28.646 cv
255.411 27.5405 256.384 27.2163 257.637 27.3047 cv
258.891 27.3931 260.423 27.894 261.102 27.3047 cv
261.78 26.7148 261.603 25.0342 262.797 24.5181 cv
263.991 24.002 266.557 24.6509 268.09 25.7271 cv
269.623 26.8032 270.125 28.3071 269.771 29.6636 cv
269.417 31.02 268.208 32.229 266.527 32.686 cv
264.846 33.1431 262.694 32.8477 261.367 33.1284 cv
260.04 33.4082 259.539 34.2637 259.273 35.1777 cv
259.008 36.0918 258.978 37.0649 259.745 37.728 cv
260.512 38.3916 262.075 38.7456 262.62 39.9692 cv
263.165 41.1929 262.694 43.2866 263.549 43.9502 cv
264.404 44.6133 266.586 43.8467 267.854 44.1416 cv
269.122 44.4365 269.476 45.793 270.257 46.8398 cv
271.039 47.8862 272.248 48.6235 273.898 48.7124 cv
275.55 48.8003 277.644 48.2402 278.897 48.417 cv
280.15 48.5942 280.563 49.5083 280.136 50.3926 cv
279.708 51.2773 278.44 52.1323 277.467 52.8403 cv
276.494 53.5483 275.815 54.1079 275.727 54.978 cv
275.638 55.8477 276.14 57.0273 276.081 57.9854 cv
276.022 58.9438 275.402 59.6812 276.11 60.2417 cv
276.818 60.8013 278.853 61.1851 280.474 61.8042 cv
282.096 62.4233 283.305 63.2778 283.835 64.3247 cv
284.366 65.3716 284.219 66.6104 283.703 67.4067 cv
283.187 68.2026 282.302 68.5566 282.229 69.2935 cv
282.155 70.0303 282.892 71.1509 283.216 72.0356 cv
283.541 72.9199 283.452 73.5688 283.231 74.0552 cv
283.01 74.542 282.656 74.8662 281.963 75.4116 cv
281.27 75.957 280.238 76.7241 280.71 77.7417 cv
281.182 78.7588 283.157 80.0264 285.413 80.4688 cv
287.668 80.9111 290.205 80.5278 291.915 80.4395 cv
293.625 80.3511 294.51 80.5571 296.146 81.5156 cv
297.783 82.4741 300.171 84.1846 302.884 84.8628 cv
305.597 85.5405 308.634 85.187 310.462 85.1572 cv
312.29 85.1279 312.91 85.4224 313.337 85.939 cv
313.765 86.4546 314 87.1919 314.517 88.2979 cv
315.033 89.4038 315.829 90.8784 317.008 91.8662 cv
318.188 92.854 319.75 93.355 321.947 94.3135 cv
324.144 95.272 326.975 96.687 328.331 97.7632 cv
329.688 98.8394 329.569 99.5767 329.054 100.284 cv
328.537 100.992 327.624 101.67 327.151 102.688 cv
326.68 103.705 326.65 105.061 325.559 106.138 cv
324.468 107.214 322.315 108.01 321.151 109.219 cv
319.986 110.428 319.809 112.05 319.293 113.451 cv
318.777 114.851 317.922 116.031 318.232 117.417 cv
318.541 118.802 320.016 120.395 321.46 121.161 cv
322.905 121.928 324.32 121.869 325.751 123.387 cv
327.181 124.906 328.625 128.002 330.66 129.609 cv
332.695 131.216 335.319 131.334 339.388 131.467 cv
343.458 131.599 348.971 131.747 352.599 132.764 cv
356.225 133.781 357.965 135.668 359.513 136.435 cv
361.061 137.202 362.417 136.848 363.287 137.645 cv
364.157 138.44 364.541 140.386 364.629 141.949 cv
364.717 143.512 364.511 144.691 364.982 146.048 cv
365.455 147.404 366.604 148.938 368.742 149.498 cv
370.881 150.058 374.006 149.645 376.188 149.763 cv
378.37 149.881 379.608 150.53 380.788 151.945 cv
381.967 153.36 383.088 155.542 383.648 156.634 cv
384.208 157.725 384.208 157.725 386.154 155.661 cv
388.101 153.597 391.993 149.468 394.234 147.316 cv
396.476 145.163 397.064 144.986 398.687 146.166 cv
400.309 147.345 402.962 149.881 406.501 153.154 cv
410.039 156.427 414.462 160.438 416.556 162.531 cv
418.649 164.625 418.413 164.801 415.347 167.455 cv
412.279 170.109 406.383 175.24 403.316 178.277 cv
400.249 181.314 400.014 182.257 399.719 183.584 cv
399.424 184.912 399.069 186.622 399.512 188.008 cv
399.954 189.394 401.193 190.455 400.751 191.281 cv
400.309 192.107 398.186 192.696 397.39 193.935 cv
396.593 195.173 397.124 197.06 398.495 197.959 cv
399.866 198.859 402.078 198.77 403.522 199.744 cv
404.967 200.716 405.646 202.75 404.437 203.753 cv
403.228 204.756 400.132 204.726 398.097 204.299 cv
396.063 203.872 395.089 203.046 393.541 202.869 cv
391.993 202.692 389.87 203.164 388.455 204.21 cv
387.039 205.257 386.332 206.879 386.184 208.826 cv
386.037 210.771 386.449 213.042 384.164 214 cv
381.879 214.958 376.896 214.605 373.873 215.696 cv
370.851 216.787 369.789 219.322 370.246 220.458 cv
370.703 221.593 372.679 221.328 374.713 221.003 cv
376.748 220.679 378.842 220.295 380.419 220.325 cv
381.996 220.355 383.058 220.796 383.309 221.829 cv
383.559 222.861 382.999 224.483 381.053 225.869 cv
379.106 227.254 375.774 228.404 372.767 229.525 cv
369.76 230.645 367.076 231.737 365.086 233.196 cv
363.095 234.656 361.798 236.484 361.061 238.341 cv
360.323 240.199 360.146 242.085 360.5 244.09 cv
360.854 246.095 361.739 248.218 361.709 250.578 cv
361.679 252.936 360.736 255.531 361.237 257.772 cv
361.739 260.013 363.685 261.9 365.041 263.581 cv
366.397 265.261 367.164 266.736 368.314 267.355 cv
369.464 267.975 370.997 267.739 373.062 266.913 cv
375.126 266.087 377.721 264.672 379.519 263.109 cv
381.317 261.546 382.32 259.836 382.557 257.949 cv
382.792 256.062 382.261 253.998 381.199 252.553 cv
380.139 251.108 378.546 250.283 378.369 249.338 cv
378.192 248.395 379.431 247.333 381.524 246.714 cv
383.617 246.095 386.566 245.918 388.336 246.479 cv
390.105 247.039 390.694 248.336 390.341 249.575 cv
389.986 250.813 388.689 251.993 388.041 253.437 cv
387.393 254.882 387.393 256.592 388.453 257.094 cv
389.515 257.595 391.639 256.887 393.23 255.737 cv
394.822 254.587 395.885 252.996 396.179 251.491 cv
396.474 249.988 396.002 248.573 396.297 247.009 cv
396.592 245.447 397.653 243.737 398.449 242.35 cv
399.245 240.964 399.776 239.903 400.425 239.284 cv
401.074 238.665 401.841 238.488 402.313 239.225 cv
402.784 239.962 402.961 241.613 402.578 243.265 cv
402.194 244.916 401.251 246.567 401.221 247.983 cv
401.191 249.398 402.076 250.578 402.872 251.993 cv
403.669 253.409 404.377 255.059 404.996 256.77 cv
405.615 258.48 406.146 260.25 406.529 261.9 cv
406.912 263.552 407.148 265.084 407.178 266.588 cv
407.207 268.092 407.03 269.567 407.591 270.51 cv
408.15 271.454 409.448 271.867 410.568 271.483 cv
411.689 271.1 412.633 269.92 413.459 269.802 cv
414.284 269.685 414.992 270.628 415.61 271.778 cv
416.23 272.928 416.761 274.285 417.675 275.14 cv
418.59 275.995 419.887 276.349 420.653 277.16 cv
421.42 277.97 421.655 279.239 421.228 280.241 cv
420.801 281.244 419.709 281.981 419.68 282.954 cv
419.65 283.927 420.683 285.136 422.85 285.77 cv
425.018 286.404 428.319 286.462 430.045 285.829 cv
431.77 285.195 431.917 283.868 431.283 282.924 cv
430.648 281.981 429.234 281.42 428.644 280.255 cv
428.055 279.091 428.29 277.322 427.538 276.04 cv
426.786 274.756 425.047 273.96 424.634 272.737 cv
424.221 271.513 425.135 269.862 425.164 268.535 cv
425.194 267.208 424.339 266.206 423.056 265.232 cv
421.773 264.259 420.063 263.316 419.709 262.402 cv
419.355 261.488 420.358 260.603 422.216 260.278 cv
424.074 259.955 426.786 260.19 428.57 261.414 cv
430.354 262.637 431.209 264.849 432.521 265.866 cv
433.834 266.883 435.603 266.707 436.531 267.06 cv
437.461 267.415 437.549 268.299 436.679 268.977 cv
435.81 269.656 433.981 270.127 433.185 271.218 cv
432.389 272.309 432.625 274.019 432.935 275.419 cv
433.244 276.821 433.627 277.912 434.1 278.457 cv
434.571 279.002 435.131 279.002 435.662 279.533 cv
436.192 280.064 436.693 281.125 437.033 281.966 cv
437.372 282.806 437.549 283.425 437.431 284.148 cv
437.313 284.871 436.9 285.696 437.003 286.477 cv
437.106 287.259 437.726 287.996 438.64 288.66 cv
439.555 289.323 440.764 289.913 441.824 290.916 cv
442.886 291.918 443.801 293.333 444.641 293.141 cv
445.48 292.95 446.247 291.151 446.63 289.307 cv
447.014 287.464 447.014 285.578 447.396 283.307 cv
447.78 281.037 448.547 278.383 449.667 277.528 cv
450.788 276.672 452.262 277.617 452.704 279.121 cv
453.146 280.624 452.557 282.688 452.793 284.015 cv
453.028 285.342 454.09 285.931 455.859 285.283 cv
457.629 284.634 460.105 282.747 461.639 282.393 cv
463.172 282.04 463.762 283.219 463.614 284.693 cv
463.467 286.167 462.583 287.937 461.462 288.91 cv
460.342 289.882 458.985 290.06 457.688 290.326 cv
456.391 290.59 455.151 290.945 455.122 291.623 cv
455.093 292.3 456.272 293.303 457.953 293.775 cv
459.634 294.247 461.816 294.188 464.086 294.63 cv
466.356 295.073 468.716 296.016 470.927 297.254 cv
473.139 298.493 475.203 300.026 476.353 302.208 cv
477.503 304.39 477.738 307.221 479.861 310.051 cv
481.984 312.882 485.995 315.713 487.853 315.861 cv
489.711 316.008 489.415 313.472 489.533 311.32 cv
489.651 309.167 490.182 307.398 490.212 305.393 cv
490.241 303.387 489.77 301.147 489.445 299.466 cv
489.121 297.786 488.943 296.665 490.123 296.635 cv
491.303 296.606 493.839 297.667 495.489 299.141 cv
497.141 300.616 497.908 302.503 497.79 304.037 cv
497.672 305.57 496.669 306.75 496.197 308.371 cv
495.726 309.993 495.785 312.057 495.902 313.325 cv
496.021 314.592 496.197 315.065 496.551 315.801 cv
496.905 316.539 497.436 317.542 498.675 317.778 cv
499.912 318.013 501.859 317.482 503.304 318.75 cv
504.749 320.018 505.691 323.085 506.43 324.795 cv
507.166 326.505 507.697 326.859 509.083 327.714 cv
510.469 328.57 512.71 329.926 514.154 329.779 cv
515.6 329.631 516.249 327.98 515.747 325.709 cv
515.246 323.439 513.595 320.549 513.565 318.367 cv
513.536 316.185 515.128 314.71 515.423 312.824 cv
515.718 310.936 514.715 308.636 512.504 305.481 cv
510.292 302.327 506.871 298.316 504.926 295.073 cv
502.979 291.829 502.508 289.352 503.127 287.258 cv
503.746 285.165 505.456 283.455 505.957 281.714 cv
506.459 279.975 505.751 278.206 504.336 277.262 cv
502.921 276.319 500.797 276.201 499.146 276.967 cv
497.495 277.734 496.315 279.385 494.664 280.152 cv
493.013 280.918 490.89 280.801 489.533 279.946 cv
488.177 279.09 487.587 277.499 486.113 275.935 cv
484.639 274.373 482.279 272.839 481.926 271.66 cv
481.572 270.481 483.223 269.655 483.194 268.446 cv
483.164 267.237 481.454 265.645 479.566 264.76 cv
477.68 263.875 475.615 263.699 473.227 262.814 cv
470.839 261.929 468.126 260.337 465.708 258.892 cv
463.29 257.448 461.167 256.149 459.781 254.173 cv
458.396 252.198 457.746 249.544 456.449 247.481 cv
455.151 245.417 453.206 243.942 452.822 241.524 cv
452.439 239.106 453.618 235.745 454.179 232.354 cv
454.739 228.962 454.68 225.542 454.119 222.181 cv
453.559 218.819 452.498 215.517 451.849 212.833 cv
451.2 210.15 450.965 208.086 451.761 206.199 cv
452.557 204.312 454.385 202.601 455.594 202.985 cv
456.803 203.369 457.393 205.845 457.54 208.587 cv
457.688 211.33 457.393 214.337 457.835 217.08 cv
458.277 219.822 459.457 222.298 459.958 224.126 cv
460.459 225.955 460.282 227.134 460.488 228.933 cv
460.695 230.732 461.285 233.15 461.462 235.302 cv
461.639 237.455 461.402 239.342 461.815 241.406 cv
462.229 243.47 463.29 245.711 464.528 247.303 cv
465.768 248.896 467.182 249.839 468.716 250.547 cv
470.249 251.254 471.9 251.726 473.227 252.67 cv
474.554 253.614 475.557 255.029 477.148 255.914 cv
478.741 256.798 480.923 257.152 482.722 257.948 cv
484.521 258.745 485.936 259.983 486.938 261.811 cv
487.941 263.639 488.53 266.057 489.268 267.915 cv
490.005 269.773 490.89 271.07 491.745 271.128 cv
492.6 271.188 493.426 270.008 494.605 270.068 cv
495.785 270.126 497.317 271.424 498.526 271.512 cv
499.735 271.601 500.62 270.48 501.476 268.799 cv
502.331 267.119 503.156 264.877 502.979 263.138 cv
502.803 261.399 501.623 260.16 499.677 258.419 cv
497.73 256.68 495.018 254.44 493.573 252.463 cv
492.128 250.488 491.951 248.778 490.948 247.746 cv
489.946 246.714 488.118 246.36 487.057 244.827 cv
485.995 243.293 485.7 240.581 484.992 238.545 cv
484.285 236.511 483.164 235.155 482.811 233.327 cv
482.456 231.499 482.869 229.199 483.075 226.309 cv
483.282 223.419 483.282 219.94 482.929 217.375 cv
482.574 214.809 481.867 213.158 481.129 211.506 cv
480.393 209.855 479.626 208.204 479.803 205.875 cv
479.979 203.544 481.101 200.537 481.425 198.679 cv
481.749 196.822 481.277 196.114 480.48 195.701 cv
479.685 195.289 478.564 195.17 477.856 194.167 cv
477.149 193.165 476.854 191.278 476.205 189.803 cv
475.557 188.33 474.554 187.268 474.495 186.471 cv
474.436 185.675 475.321 185.145 476.028 185.233 cv
476.736 185.322 477.267 186.029 478.151 185.617 cv
479.036 185.204 480.274 183.67 481.425 182.904 cv
482.574 182.137 483.636 182.137 484.992 180.663 cv
486.349 179.189 488 176.24 487.793 174.588 cv
487.587 172.937 485.523 172.583 483.813 173.025 cv
482.103 173.468 480.746 174.706 479.331 175.031 cv
477.916 175.355 476.441 174.765 476.234 173.704 cv
476.028 172.642 477.09 171.109 478.357 169.871 cv
479.626 168.632 481.101 167.688 482.368 167.04 cv
483.636 166.391 484.697 166.037 484.551 164.828 cv
484.402 163.619 483.047 161.556 481.277 159.845 cv
479.508 158.135 477.326 156.778 474.938 155.835 cv
472.549 154.892 469.954 154.36 468.008 152.474 cv
466.062 150.586 464.765 147.343 464.971 146.075 cv
465.177 144.807 466.888 145.515 468.628 146.487 cv
470.367 147.46 472.136 148.699 474.26 149.583 cv
476.383 150.468 478.859 151 480.864 152.09 cv
482.869 153.181 484.402 154.833 485.729 156.484 cv
487.057 158.135 488.177 159.786 489.269 160.494 cv
490.359 161.202 491.421 160.965 492.217 159.551 cv
493.013 158.135 493.544 155.54 493.308 153.83 cv
493.072 152.12 492.069 151.294 490.595 150.35 cv
489.121 149.407 487.175 148.345 485.523 146.93 cv
483.872 145.515 482.516 143.746 481.365 142.242 cv
480.216 140.738 479.272 139.499 477.975 138.762 cv
476.677 138.025 475.026 137.789 473.552 137.671 cv
472.077 137.553 470.779 137.553 470.396 137.052 cv
470.013 136.551 470.544 135.548 470.16 134.074 cv
469.777 132.599 468.48 130.653 467.742 128.943 cv
467.006 127.232 466.828 125.758 467.713 125.375 cv
468.598 124.992 470.544 125.699 472.401 126.672 cv
474.26 127.645 476.028 128.884 477.503 130.889 cv
478.978 132.894 480.156 135.666 481.926 137.671 cv
483.695 139.676 486.054 140.915 487.499 142.005 cv
488.943 143.097 489.475 144.041 491.509 144.129 cv
493.543 144.217 497.082 143.45 499.588 142.654 cv
502.095 141.858 503.569 141.032 503.451 139.676 cv
503.334 138.32 501.623 136.433 499.559 135.135 cv
497.495 133.838 495.077 133.13 492.865 132.57 cv
490.654 132.01 488.648 131.597 486.762 130.978 cv
484.875 130.358 483.105 129.533 481.926 128.294 cv
480.746 127.056 480.156 125.404 480.717 124.491 cv
481.277 123.576 482.987 123.399 485.052 123.635 cv
487.115 123.871 489.533 124.52 491.804 124.903 cv
494.074 125.287 496.197 125.404 497.761 125.788 cv
499.323 126.171 500.326 126.82 499.647 125.169 cv
498.97 123.518 496.61 119.567 494.34 116.765 cv
492.069 113.964 489.887 112.313 487.971 111.812 cv
486.054 111.31 484.402 111.959 483.135 111.104 cv
481.867 110.249 480.981 107.89 480.127 106.357 cv
479.271 104.824 478.446 104.116 477.119 104.116 cv
475.792 104.116 473.964 104.824 473.315 104.204 cv
472.667 103.585 473.197 101.639 473.08 99.958 cv
472.962 98.2773 472.195 96.8618 470.455 96.0952 cv
468.716 95.3286 466.003 95.2104 465.266 94.2373 cv
464.528 93.2642 465.768 91.436 467.006 89.9619 cv
468.244 88.4878 469.482 87.3667 471.546 87.9868 cv
473.61 88.6055 476.5 90.9644 479.33 92.2915 cv
482.161 93.6182 484.934 93.9131 486.143 95.0337 cv
487.351 96.1543 486.997 98.1001 487.587 99.6338 cv
488.177 101.167 489.71 102.288 491.715 102.966 cv
493.721 103.644 496.197 103.88 498.173 103.143 cv
500.148 102.406 501.623 100.695 501.445 99.7222 cv
501.269 98.749 499.44 98.5132 497.406 97.5107 cv
495.371 96.5083 493.131 94.7388 491.45 92.9697 cv
489.77 91.2007 488.648 89.4312 487.086 87.4849 cv
485.522 85.5391 483.518 83.416 483.577 82.5903 cv
483.636 81.7646 485.759 82.2363 487.646 82.8262 cv
489.533 83.416 491.185 84.1235 492.275 85.0674 cv
493.366 86.0107 493.897 87.1904 494.723 88.6646 cv
495.549 90.1387 496.669 91.9082 498.113 92.6157 cv
499.559 93.3237 501.328 92.9697 502.507 92.0557 cv
503.688 91.1416 504.276 89.667 503.657 88.7534 cv
503.038 87.8394 501.21 87.4849 500.001 86.6006 cv
498.792 85.7158 498.202 84.3008 498.792 83.1509 cv
499.382 82.0005 501.15 81.1157 503.127 81.2339 cv
505.103 81.3516 507.284 82.4727 509.26 83.0913 cv
511.234 83.7104 513.003 83.8281 513.356 82.5308 cv
513.71 81.2329 512.649 78.52 511.41 76.3086 cv
510.172 74.0972 508.757 72.3867 506.103 71.4434 cv
503.449 70.4995 499.557 70.3228 498.996 69.1138 cv
498.437 67.9048 501.208 65.6636 504.422 64.6313 cv
507.636 63.5996 511.293 63.7769 513.651 65.2803 cv
516.011 66.7842 517.072 69.6147 517.515 73.0649 cv
517.957 76.5151 517.779 80.584 518.87 82.2646 cv
519.962 83.9453 522.32 83.2378 523.382 81.7632 cv
524.443 80.2891 524.207 78.0479 523.677 75.4829 cv
523.146 72.9175 522.32 70.0278 522.262 67.1968 cv
522.202 64.3657 522.91 61.5947 523.824 59.354 cv
524.738 57.1128 525.859 55.4019 527.245 54.8716 cv
528.631 54.3408 530.282 54.9897 530.813 56.7588 cv
531.344 58.5278 530.754 61.4175 529.986 63.8945 cv
529.221 66.3711 528.277 68.4355 528.188 70.2637 cv
528.1 72.0918 528.867 73.6846 529.78 74.4805 cv
530.695 75.2764 531.756 75.2764 532.552 74.4214 cv
533.349 73.5664 533.879 71.8555 534.793 70.1753 cv
535.707 68.4946 537.005 66.8433 538.921 65.5459 cv
540.838 64.248 543.374 63.3047 544.996 61.9482 cv
546.617 60.5918 547.325 58.8228 547.797 57.3486 cv
548.27 55.874 548.505 54.6948 548.476 53.397 cv
548.446 52.0996 548.15 50.6841 547.354 49.416 cv
546.559 48.1479 545.262 47.0278 545.645 45.583 cv
546.028 44.1382 548.092 42.3687 550.333 40.7769 cv
552.574 39.1841 554.992 37.7686 557.145 37.2676 cv
559.297 36.7661 561.185 37.1792 562.541 36.8252 cv
563.897 36.4712 564.723 35.3506 566.02 34.0537 cv
567.317 32.7559 569.087 31.2817 570.649 30.043 cv
572.212 28.8047 573.569 27.8022 573.746 28.7163 cv
573.923 29.6304 572.92 32.4614 571.858 34.7612 cv
570.797 37.061 569.677 38.8301 568.939 40.688 cv
568.202 42.5459 567.849 44.4917 567.052 46.4673 cv
566.256 48.4434 565.018 50.4482 564.369 52.0405 cv
563.721 53.6328 563.661 54.812 564.457 54.5762 cv
565.254 54.3403 566.904 52.6895 568.35 50.6548 cv
569.795 48.6196 571.033 46.2017 572.625 44.6392 cv
574.218 43.0762 576.164 42.3687 577.785 41.5728 cv
579.407 40.7764 580.705 39.8916 582.238 37.7095 cv
583.771 35.5273 585.54 32.0483 587.251 30.1611 cv
588.961 28.2739 590.612 27.979 591.556 28.9229 cv
592.499 29.8662 592.735 32.0483 591.497 34.3774 cv
590.259 36.707 587.545 39.1841 585.658 41.0713 cv
583.771 42.9585 582.71 44.2559 582.621 45.3765 cv
582.532 46.4971 583.418 47.4404 585.216 48.6494 cv
587.015 49.8584 589.728 51.333 591.556 53.2788 cv
593.384 55.2251 594.327 57.6431 593.473 58.4097 cv
592.617 59.1763 589.964 58.2915 587.516 57.1123 cv
585.068 55.9331 582.828 54.4585 580.498 53.6914 cv
578.169 52.9253 575.751 52.8657 573.923 54.0454 cv
572.095 55.2251 570.856 57.6431 569.027 59.5303 cv
567.199 61.4175 564.782 62.7734 563.042 64.1299 cv
561.303 65.4863 560.241 66.8428 562.217 67.4619 cv
564.191 68.0815 569.205 67.9634 572.566 68.4644 cv
575.928 68.9658 577.638 70.0864 580.94 70.4697 cv
584.243 70.853 589.138 70.4995 591.556 70.7056 cv
593.974 70.9121 593.915 71.6787 592.264 72.5044 cv
590.612 73.3296 587.369 74.2148 583.27 74.3623 cv
579.171 74.5093 574.218 73.9194 570.531 73.3594 cv
566.846 72.7993 564.428 72.2681 561.774 72.3276 cv
559.12 72.3862 556.23 73.0352 553.9 73.1528 cv
551.571 73.271 549.803 72.8579 548.476 73.1528 cv
547.148 73.4478 546.264 74.4507 546.559 75.394 cv
546.854 76.3374 548.328 77.2222 550.362 78.4312 cv
552.397 79.6401 554.992 81.1733 555.287 82.0283 cv
555.582 82.8838 553.576 83.061 551.276 82.9429 cv
548.977 82.8247 546.382 82.4121 544.229 82.0581 cv
542.076 81.7046 540.366 81.4092 540.396 82.5005 cv
540.426 83.5913 542.194 86.0684 542.695 87.9556 cv
543.197 89.8428 542.431 91.1396 541.428 91.4937 cv
540.426 91.8477 539.187 91.2578 538.096 90.4917 cv
537.005 89.7246 536.062 88.7813 535.206 88.7515 cv
534.351 88.7217 533.584 89.6069 533.997 90.7568 cv
534.41 91.9067 536.002 93.3218 536.976 94.5308 cv
537.948 95.7397 538.302 96.7427 537.329 97.0967 cv
536.356 97.4502 534.057 97.1553 532.287 97.126 cv
530.518 97.0967 529.279 97.3325 528.1 99.1899 cv
526.92 101.048 525.8 104.527 524.178 107.004 cv
522.557 109.481 520.434 110.956 520.463 112.135 cv
520.492 113.314 522.674 114.199 524.267 116.116 cv
525.858 118.032 526.861 120.981 526.714 124.608 cv
526.566 128.235 525.27 132.54 525.181 135.371 cv
525.092 138.201 526.213 139.558 527.863 140.147 cv
529.515 140.737 531.697 140.56 532.582 139.322 cv
533.467 138.083 533.054 135.783 532.817 133.631 cv
532.582 131.478 532.522 129.473 532.316 127.852 cv
532.109 126.229 531.756 124.991 532.316 123.782 cv
532.876 122.573 534.351 121.394 534.646 119.713 cv
534.94 118.032 534.056 115.85 533.378 113.963 cv
532.699 112.076 532.229 110.483 533.112 109.039 cv
533.997 107.593 536.238 106.296 537.329 106.414 cv
538.42 106.532 538.361 108.065 538.184 109.953 cv
538.007 111.84 537.713 114.081 538.332 114.523 cv
538.951 114.965 540.484 113.609 541.958 111.869 cv
543.433 110.13 544.849 108.006 546.116 107.535 cv
547.384 107.063 548.505 108.242 548.269 109.717 cv
548.033 111.191 546.44 112.96 545.645 114.317 cv
544.849 115.673 544.849 116.617 545.762 116.912 cv
546.676 117.207 548.505 116.853 550.186 115.703 cv
551.866 114.553 553.399 112.606 554.461 111.397 cv
555.522 110.188 556.112 109.717 555.611 108.685 cv
555.109 107.653 553.518 106.061 553.871 104.351 cv
554.225 102.64 556.525 100.812 558.913 98.9834 cv
561.302 97.1553 563.779 95.3271 566.786 94.2661 cv
569.794 93.2041 573.332 92.9092 575.986 93.3516 cv
578.64 93.7939 580.409 94.9731 581.234 96.2119 cv
582.061 97.4502 581.942 98.7476 580.527 99.0132 cv
579.112 99.2783 576.399 98.5117 573.922 98.2461 cv
571.445 97.981 569.204 98.2168 567.259 98.9541 cv
565.313 99.6909 563.661 100.93 562.718 102.581 cv
561.774 104.232 561.538 106.296 562.806 107.27 cv
564.073 108.242 566.846 108.125 567.465 108.626 cv
568.084 109.127 566.551 110.248 564.752 111.575 cv
562.953 112.902 560.889 114.435 558.618 116.027 cv
556.349 117.62 553.871 119.271 551.896 120.539 cv
549.92 121.806 548.445 122.691 548.682 123.311 cv
548.917 123.93 550.863 124.283 552.279 125.729 cv
553.694 127.173 554.579 129.709 554.343 130.8 cv
554.107 131.891 552.751 131.537 551.011 130.83 cv
549.271 130.122 547.148 129.06 544.996 129.09 cv
542.843 129.119 540.661 130.24 540.101 132.039 cv
539.541 133.837 540.603 136.314 541.015 139.056 cv
541.428 141.798 541.191 144.806 540.514 145.986 cv
539.836 147.165 538.715 146.516 536.533 146.605 cv
534.351 146.693 531.107 147.519 530.046 149.023 cv
528.984 150.526 530.104 152.708 530.782 155.245 cv
531.461 157.78 531.697 160.67 532.788 161.613 cv
533.879 162.557 535.825 161.554 536.769 159.785 cv
537.712 158.016 537.653 155.48 538.773 154.301 cv
539.895 153.121 542.194 153.298 542.902 154.714 cv
543.609 156.129 542.725 158.783 542.519 160.257 cv
542.313 161.731 542.783 162.026 543.344 162.233 cv
543.904 162.439 544.553 162.557 545.113 161.024 cv
545.674 159.491 546.146 156.306 546.617 154.713 cv
547.089 153.121 547.561 153.121 548.651 153.239 cv
549.743 153.357 551.453 153.593 552.367 155.067 cv
553.281 156.542 553.399 159.255 553.134 161.23 cv
552.868 163.206 552.22 164.444 551.306 165.978 cv
550.392 167.511 549.212 169.339 547 170.018 cv
544.789 170.696 541.545 170.224 539.127 170.873 cv
536.709 171.521 535.117 173.29 534.469 174.971 cv
533.819 176.652 534.114 178.244 534.38 179.63 cv
534.646 181.016 534.882 182.196 536.061 182.254 cv
537.24 182.313 539.363 181.251 541.191 180.19 cv
543.02 179.128 544.553 178.067 546.086 177.654 cv
547.62 177.241 549.152 177.477 549.241 178.892 cv
549.33 180.308 547.974 182.903 546.264 184.937 cv
544.553 186.972 542.489 188.447 540.483 189.213 cv
538.479 189.98 536.532 190.039 534.852 189.125 cv
533.171 188.21 531.756 186.324 530.694 184.436 cv
529.633 182.549 528.925 180.662 527.922 179.01 cv
526.92 177.359 525.622 175.944 524.59 174.086 cv
523.559 172.229 522.791 169.928 522.055 169.604 cv
521.317 169.28 520.609 170.931 519.105 172.523 cv
517.602 174.116 515.302 175.649 513.945 177.654 cv
512.589 179.66 512.177 182.136 511.41 184.672 cv
510.644 187.208 509.522 189.803 508.49 192.338 cv
507.459 194.875 506.515 197.351 506.043 200.064 cv
505.571 202.777 505.571 205.726 506.367 207.613 cv
507.164 209.5 508.756 210.326 509.699 210.089 cv
510.643 209.854 510.938 208.556 511.174 207.112 cv
511.41 205.667 511.587 204.075 511.675 202.866 cv
511.764 201.657 511.764 200.831 511.882 199.592 cv
512 198.354 512.235 196.703 512.678 194.58 cv
513.12 192.457 513.769 189.862 514.83 187.797 cv
515.892 185.733 517.366 184.201 518.604 184.348 cv
519.843 184.495 520.846 186.324 520.846 188.003 cv
520.846 189.685 519.843 191.218 519.017 193.017 cv
518.191 194.815 517.543 196.879 518.397 198.56 cv
519.253 200.242 521.612 201.539 522.939 201.568 cv
524.266 201.598 524.561 200.359 524.768 199.062 cv
524.974 197.764 525.092 196.408 525.682 194.904 cv
526.271 193.4 527.332 191.749 528.748 191.719 cv
530.163 191.69 531.933 193.283 532.227 194.756 cv
532.522 196.231 531.343 197.587 530.399 199.002 cv
529.455 200.417 528.748 201.892 528.659 203.514 cv
528.571 205.136 529.102 206.905 530.37 207.052 cv
531.638 207.2 533.643 205.726 534.822 204.428 cv
536.002 203.131 536.355 202.01 536.887 200.831 cv
537.417 199.652 538.125 198.413 539.628 197.587 cv
541.132 196.762 543.433 196.349 545.408 194.904 cv
547.384 193.458 549.035 190.982 550.598 190.894 cv
552.16 190.805 553.635 193.105 553.517 194.875 cv
553.399 196.644 551.688 197.882 549.684 199.033 cv
547.679 200.182 545.378 201.244 543.521 202.748 cv
541.663 204.251 540.248 206.198 540.041 207.465 cv
539.835 208.733 540.838 209.323 541.604 209.293 cv
542.371 209.264 542.901 208.615 544.258 207.642 cv
545.614 206.669 547.796 205.372 549.123 205.549 cv
550.45 205.726 550.922 207.376 550.834 209.028 cv
550.745 210.679 550.097 212.331 549.86 213.982 cv
549.625 215.633 549.802 217.285 551.069 218.523 cv
552.338 219.761 554.696 220.587 556.229 220.941 cv
557.764 221.294 558.471 221.177 559.65 221.339 cv
560.829 221.501 562.479 221.944 564.013 220.985 cv
565.546 220.027 566.961 217.667 568.141 215.575 cv
569.32 213.481 570.264 211.653 570.087 209.559 cv
569.91 207.465 568.612 205.107 566.961 203.072 cv
565.31 201.038 563.305 199.327 562.627 197.263 cv
561.948 195.199 562.597 192.781 563.747 190.51 cv
564.897 188.24 566.548 186.117 568.465 184.613 cv
570.382 183.109 572.563 182.224 575.04 180.603 cv
577.518 178.981 580.289 176.622 582.796 175.708 cv
585.302 174.794 587.543 175.325 587.632 176.475 cv
587.72 177.625 585.655 179.394 583.355 180.869 cv
581.056 182.342 578.521 183.522 575.925 185.026 cv
573.33 186.53 570.677 188.358 569.291 190.069 cv
567.904 191.779 567.787 193.371 568.642 195.494 cv
569.497 197.617 571.325 200.271 573.006 202.542 cv
574.687 204.812 576.22 206.699 577.075 208.468 cv
577.931 210.238 578.107 211.888 577.192 214.129 cv
576.279 216.371 574.274 219.202 572.387 221.767 cv
570.5 224.333 568.73 226.632 566.548 228.106 cv
564.366 229.581 561.771 230.229 559.059 229.64 cv
556.346 229.05 553.516 227.222 551.127 226.161 cv
548.738 225.099 546.792 224.804 544.492 224.156 cv
542.192 223.506 539.538 222.503 538.684 221.265 cv
537.828 220.027 538.771 218.552 538.684 217.374 cv
538.595 216.194 537.475 215.309 536.029 215.544 cv
534.584 215.781 532.815 217.137 531.193 217.756 cv
529.572 218.375 528.098 218.257 526.004 217.756 cv
523.91 217.255 521.197 216.371 519.34 216.547 cv
517.482 216.724 516.479 217.963 516.98 218.848 cv
517.482 219.732 519.487 220.263 520.431 221.443 cv
521.374 222.622 521.257 224.45 520.106 225.394 cv
518.956 226.337 516.774 226.396 515.831 227.222 cv
514.887 228.047 515.182 229.64 516.008 230.495 cv
516.834 231.35 518.189 231.468 519.192 232.205 cv
520.194 232.942 520.844 234.298 521.699 233.561 cv
522.554 232.825 523.615 229.994 525.709 228.667 cv
527.803 227.339 530.928 227.517 533.582 227.576 cv
536.235 227.634 538.418 227.576 539.185 227.958 cv
539.951 228.342 539.303 229.167 538.211 229.935 cv
537.12 230.702 535.587 231.409 535.101 232.603 cv
534.613 233.797 535.174 235.478 537.062 235.419 cv
538.948 235.36 542.162 233.561 543.917 233.606 cv
545.672 233.65 545.967 235.538 545.362 237.173 cv
544.758 238.81 543.254 240.196 541.47 240.978 cv
539.686 241.759 537.622 241.936 536.059 241.406 cv
534.496 240.875 533.435 239.636 532.402 238.545 cv
531.371 237.454 530.368 236.51 528.864 236.481 cv
527.36 236.452 525.355 237.336 523.999 238.397 cv
522.643 239.458 521.935 240.698 522.053 242.29 cv
522.171 243.882 523.114 245.829 524.411 247.244 cv
525.709 248.659 527.36 249.543 527.625 250.458 cv
527.891 251.372 526.771 252.316 525.591 252.906 cv
524.411 253.495 523.173 253.731 522.053 252.964 cv
520.933 252.198 519.93 250.428 519.398 248.365 cv
518.868 246.3 518.81 243.941 518.661 242.349 cv
518.515 240.756 518.278 239.931 517.335 239.96 cv
516.392 239.99 514.74 240.875 513.354 241.317 cv
511.969 241.759 510.848 241.759 510.11 242.32 cv
509.373 242.879 509.02 244 509.786 245.563 cv
510.553 247.125 512.44 249.13 513.797 251.519 cv
515.153 253.908 515.979 256.679 516.479 259.097 cv
516.981 261.515 517.158 263.58 517.659 264.995 cv
518.161 266.411 518.986 267.177 520.549 267.501 cv
522.112 267.826 524.411 267.708 526.004 268.002 cv
527.597 268.297 528.48 269.004 528.511 268.238 cv
528.54 267.472 527.714 265.231 527.508 263.609 cv
527.302 261.987 527.714 260.984 528.156 260.719 cv
528.599 260.454 529.07 260.925 530.19 261.928 cv
531.312 262.931 533.081 264.464 534.997 266.085 cv
536.914 267.708 538.979 269.417 539.892 271.04 cv
540.807 272.662 540.57 274.195 540.423 275.492 cv
540.275 276.79 540.216 277.851 541.101 278.381 cv
541.985 278.913 543.813 278.913 545.966 279.797 cv
548.118 280.682 550.596 282.451 551.244 284.043 cv
551.893 285.636 550.713 287.051 550.609 288.599 cv
550.506 290.147 551.479 291.828 553.543 293.213 cv
555.606 294.599 558.763 295.69 559.898 295.263 cv
561.034 294.835 560.148 292.889 559.707 291.15 cv
559.265 289.41 559.265 287.876 560.031 286.549 cv
560.798 285.223 562.331 284.102 562.508 283.129 cv
562.685 282.156 561.506 281.331 560.061 280.624 cv
558.616 279.916 556.905 279.326 556.699 278.293 cv
556.493 277.261 557.79 275.788 559.088 274.077 cv
560.386 272.367 561.683 270.42 562.36 268.327 cv
563.038 266.233 563.098 263.993 563.775 263.196 cv
564.454 262.4 565.752 263.049 567.344 264.199 cv
568.937 265.349 570.823 267 571.737 268.563 cv
572.651 270.125 572.593 271.6 571.147 272.72 cv
569.703 273.84 566.872 274.608 565.574 275.787 cv
564.277 276.966 564.514 278.559 565.545 280.358 cv
566.577 282.157 568.405 284.162 569.644 286.285 cv
570.882 288.408 571.531 290.649 572.209 290.236 cv
572.888 289.823 573.595 286.756 573.949 284.073 cv
574.303 281.389 574.303 279.089 575.452 277.114 cv
576.603 275.138 578.903 273.487 581.055 271.482 cv
583.208 269.477 585.213 267.118 586.245 264.7 cv
587.277 262.282 587.336 259.805 587.689 257.8 cv
588.044 255.794 588.692 254.262 589.193 252.167 cv
589.695 250.075 590.049 247.42 590.668 245.445 cv
591.287 243.469 592.172 242.172 592.644 242.32 cv
593.115 242.466 593.174 244.059 593.734 245.681 cv
594.295 247.303 595.356 248.954 595.828 250.576 cv
596.3 252.198 596.182 253.79 595.504 255.117 cv
594.825 256.444 593.587 257.505 593.174 258.891 cv
592.762 260.277 593.175 261.987 592.791 263.226 cv
592.407 264.464 591.229 265.231 590.402 266.735 cv
589.577 268.238 589.105 270.479 588.162 272.337 cv
587.218 274.195 585.803 275.669 584.27 277.468 cv
582.736 279.267 581.085 281.389 580.701 283.866 cv
580.318 286.343 581.203 289.174 581.939 290.795 cv
582.677 292.417 583.267 292.831 584.313 292.093 cv
585.359 291.356 586.862 289.468 588.557 288.17 cv
590.252 286.873 592.139 286.166 594.498 285.634 cv
596.856 285.104 599.688 284.75 601.279 285.015 cv
602.872 285.281 603.226 286.166 602.459 286.991 cv
601.692 287.816 599.806 288.583 598.597 288.996 cv
597.388 289.409 596.856 289.468 596.414 289.762 cv
595.972 290.057 595.618 290.588 596.208 291.649 cv
596.798 292.71 598.331 294.303 598.508 295.394 cv
598.685 296.486 597.506 297.076 595.824 297.34 cv
594.144 297.606 591.962 297.547 589.337 298.048 cv
586.713 298.549 583.646 299.611 581.258 300.201 cv
578.87 300.791 577.159 300.909 575.686 301.173 cv
574.211 301.439 572.973 301.852 572.383 304.417 cv
571.793 306.983 571.852 311.701 572.56 314.148 cv
573.268 316.595 574.624 316.773 576.187 315.504 cv
577.749 314.237 579.519 311.524 581.494 310.108 cv
583.47 308.693 585.651 308.576 588.246 308.132 cv
590.842 307.691 593.849 306.923 596.65 305.921 cv
599.451 304.918 602.047 303.68 604.17 303.562 cv
606.293 303.444 607.943 304.447 608.091 305.833 cv
608.238 307.219 606.883 308.988 604.671 310.02 cv
602.459 311.052 599.393 311.347 596.65 311.73 cv
593.908 312.114 591.49 312.585 589.309 314.502 cv
587.126 316.418 585.18 319.78 584.885 322.021 cv
584.59 324.262 585.946 325.382 588.217 325.294 cv
590.487 325.206 593.672 323.909 595.677 322.257 cv
597.683 320.606 598.508 318.601 600.336 317.922 cv
602.164 317.245 604.995 317.893 606.233 319.043 cv
607.472 320.193 607.118 321.844 605.201 323.878 cv
603.285 325.914 599.806 328.332 596.769 329.57 cv
593.731 330.808 591.136 330.867 588.836 331.487 cv
586.536 332.106 584.531 333.286 583.617 335.083 cv
582.703 336.882 582.88 339.3 582.496 341.748 cv
582.113 344.195 581.17 346.671 580.462 348.936 cv
579.754 351.202 579.283 353.254 580.167 353.904 cv
581.052 354.552 583.293 353.796 585.651 352.18 cv
588.011 350.564 590.487 348.086 593.318 346.023 cv
596.148 343.958 599.334 342.307 602.576 341.482 cv
605.82 340.656 609.123 340.656 611.836 341.422 cv
614.549 342.19 616.672 343.722 618.264 343.722 cv
619.856 343.722 620.918 342.19 622.156 341.069 cv
623.395 339.949 624.811 339.241 631.828 338.238 cv
638.846 337.236 651.466 335.938 658.366 334.936 cv
665.266 333.933 666.445 333.225 667.33 331.574 cv
668.215 329.923 668.805 327.329 668.332 325.5 cv
667.861 323.671 666.327 322.611 667.035 321.195 cv
667.743 319.78 670.691 318.01 673.168 317.479 cv
675.646 316.949 677.65 317.657 678.653 316.89 cv
679.655 316.124 679.655 313.882 680.717 310.756 cv
681.778 307.631 683.901 303.621 684.963 300.495 cv
686.024 297.37 686.024 295.128 687.027 293.242 cv
688.03 291.354 690.035 289.821 691.627 288.111 cv
693.22 286.4 694.398 284.513 694.812 285.103 cv
695.225 285.693 694.871 288.759 694.871 290.882 cv
694.871 293.005 695.225 294.185 696.286 293.772 cv
697.348 293.36 699.116 291.354 700.532 288.996 cv
701.947 286.636 703.009 283.923 704.188 281.447 cv
705.368 278.969 706.665 276.729 707.432 274.665 cv
708.198 272.601 708.435 270.713 707.373 269.888 cv
706.312 269.062 703.953 269.298 703.068 268.532 cv
702.184 267.765 702.773 265.996 702.891 264.581 cv
703.009 263.165 702.655 262.103 700.945 260.983 cv
699.235 259.862 696.168 258.683 695.549 257.415 cv
694.93 256.147 696.758 254.791 699.234 255.115 cv
701.712 255.439 704.838 257.444 707.078 258.565 cv
709.319 259.685 710.676 259.921 711.324 258.565 cv
711.974 257.208 711.914 254.26 711.118 252.314 cv
710.322 250.368 708.789 249.424 707.845 249.041 cv
706.901 248.658 706.548 248.834 691.155 248.716 cv
675.764 248.598 645.333 248.185 630.088 247.95 cv
614.844 247.713 614.785 247.655 614.755 247.094 cv
614.726 246.535 614.726 245.473 614.726 243.674 cv
614.726 241.875 614.726 239.339 612.013 198.854 cv
609.3 158.369 603.874 79.9346 601.161 40.7173 cv
598.448 1.5 598.448 1.5 598.123 1.5 cv
597.799 1.5 597.15 1.5 596.825 1.5 cv
596.501 1.5 596.501 1.5 595.971 1.5 cv
595.439 1.5 594.378 1.5 495.211 1.5 cv
396.044 1.5 198.772 1.5 100.136 1.5 cv
1.5 1.5 1.5 1.5 1.5 1.86816 cv
1.5 2.23633 1.5 2.97314 1.5 4.40283 cv
1.5 5.83252 1.5 7.95557 1.5 24.7041 cv
1.5 41.4526 1.5 72.8267 1.5 88.5137 cv
1.5 104.201 1.5 104.201 1.9458 104.112 cv
2.39063 104.023 3.28076 103.847 5.1123 103.316 cv
6.94336 102.785 9.71533 101.9 11.3242 100.847 cv
12.9326 99.7944 13.3784 98.5723 14.5151 96.7236 cv
14.5151 96.7236 li
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (M) ()
%%Title: (maryland-silhouette.eps)
%%CreationDate: 9/23/2015 10:08 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!U'CNEfPEp(!:'qt*c6u;LMHIe'><HY>,SG"I>"C&=aX_k')T("]R+:(QC5_&lc;Tk\]oCpS4o/n-]&8cc,2']_),#M@</m3JG
%XC(qkl.)9HQfj^m4h^^8mri:!V7c/@?$>fpJ,I]tIeEHuIlt>gX3FM<ePTLjZ_lQ-S<n9'UqY:;q:4`!=(dl/?X@*1T&&0a]=PM`
%^A6UQg!;%4].ZpnZeq;>rqkBf`RRbrV\^_Y5?OO*T@Ik?cS*S(YHD6'h!WnD,[gF;Sc<eA]kd]J*UqB-:G:S;4T!S'T=t0hQ2U\O
%^ZjY>LTf!@Df*)Ze\mE<IIZ4pnSgD$gJ(2O:-%"bXflRjqT"hA[XYAWC@gkWJ,/-XGNUoof-e&j=-rs`CW:Yj=n<MZFnY[MIpl]i
%O4aJ\@_^\]5Pt08c,He\Fgl:#s1J='NZnDjh&fr*\P]Q=S(-+<'*%,ZV.Bafs8,OMs7adpr>5LZ]<[q)4(!I4S8VqVd&,W(mFO?Z
%Uj#!&j:b7N%K?4jea&-WgG;(a[I),d`o!PJ*LM;hp7nIcMp3p"7s!Fm[2c#$j^$3gIZEQ;ZoIsQr9U?=mJd+OjQ5';SGn`<gTSp&
%h+kMaH.Pq(n/pOmS6c0Zo).)4b6M5L"MVBlH$8/e)r6Q.:,qa\?.#:lip2fon'5e[Q`i$uDudZ-/^sLNn)(eSr8d%Il^KWeqTU*g
%T3ZnoohV%?DcfilXf:$H'?EE2^?]XhjehLrDVkM>p;\$q1CSnpiB(]DV.&R0Y0XjE^\loT?iT9WY0UJCdC/5oidYVN8'AaKf($MB
%W\+/Bp?ZhD4lpURIBal.RZ>,W._bHGpMXBO\3)caj6W'NQ7pJFW?M-"o97pmhsG0`O8f+2?Zo4p^=AL;m(ZHnZSh_e=8mU@Cd:YP
%mo&pt.K$Ugs6]?]\pLp;B\"(d[77LRB\(o-nJH@RBsXtL=m\Fr?WW\u/'[i*J(!]:1R^IR7b;;!ps$-XZoL>4\&ZOkWVc3?%??L_
%P>Bo1lne3NqJYUZIU@tTk:`:/0)hXalPchshm"U/U^`7A:T]%]LNd?9r5h_cME`!$2p6tg;>dE$o+/X<Mm)uKq@%&WdeK"aa2c!8
%.;A@ee%V0_<W))eIJ(;ST>&Xs^TYb?UDcl)5FSiHra[EA87/q-/e3nkd#9iBPP2-KcE*-mq2#89*q3f9*Y<hLN&C1(+/YfkDm%E:
%D[p%!j9I#kU[or2hUB\-DsWIehA;j,qpbPe55$roD_h<e%1=.8ao^,L=73h8NVl@(a*#tsqr41BP;Xu=\dp>62p&PT^YtPDd!6bY
%^cP9I;9"`->`s*8^AC)Yhg>C/Dk8:?%VDfgVbaYhI37;NnDF+m0mUO4NnJmT^-Os$Z2SfDhVWeNA)52mh;>QD=o3R(Qp0rR*Y[(P
%O%nZsmn\;sp&6e8e(@E<hf$W(m[3S?Z4H;-;k!>#Ig;rHnR'T@X8UrTh`Ue^qnN(olX$WEp4)sh^&-.Q^\toYnXl.Zqt^s*4aH&%
%gAgR?4alT[n,N+]XS_VP%bgsMs*aaCs1JBds-pIsK$JFlr9<D15EDH7Dq:<=B62=gs#XQd]"^7u^Tu&Ahq%`jg@_ZEqXO,e3I[R"
%/baO;EkM&-rfb'Fr&bc6=d.m7q0>a4-MHW(+eDK%o!cI.*s5\jRds+?lL3_<Vq&Oh1JMRG276Q]5?aANR_1Kph\ibF5!=`U5!;*<
%_/)@gjEZ#kpbB?E:W^AhPgkEWR495L(S<`E>,'h2J9T<oh3i!NkOBj:"G/`hgYV:PLkFHcg02MGdrW7)9g.>o*pY&kUFZ:bYH?h@
%G/3fZM4HVdM,2u^TfA7@EHg!Z2R1"jS^)NOcM8nrnNh<g@rLYe?]Y00/NO*A`,'g_dCI$jocE<^\&7XS"7u:C>KW9C(GNS[a/3EV
%T)H?_j79VT$kKeWDEDcP4H>DHSfJ'rX$YcTI`mi%_"Lp'ZiL_!Kol,ZZ#T#QXF&klFFLgiI-99.]2*f-=5O2=m9"K>0d]#[c;<(t
%;]1oEG!<1V@tu/H!!c$&N.6afN=#-Ydc91In]bT1LKF+U#(>f$5Dr:_*U>'.5J*S;ic-^Ym6:38Tr>]2-2)U%GA]5ZgZaNh3@r4%
%JW;X(1l`5Echr6QSbK:9KsnG$cC2DL`=QMKn*cD2M/IU?or3/:AWX8uJlE3]`0'GLeSh1)Ljb'@0ct<gc99I#)gunN(fX.QH:W7N
%V"-TE>4(^TqG%Q[)TVJdck[DW"6q"qND5AT:nJbOn^H?4hD#Cr%m=p4?_<5,h3n-0L24gqTR=hrp\Nt=;Di`<aRjl?[+a]j@GNtl
%\j-'XFb@k2JSd4b4!FC3B+3S-""(9]?/9]F6cG<M5!7?".gIXje[^_k_-o>"N\>2hj(k.nW&/,M=6;K`i3GS1pN8[<OD2H#otdSS
%Q2:U3[)EYnTX'jr(Y6%Yi(!)OersqW3kddSpgEZt_u&hA@XS+I[g,7g=!#f/[`04u5*,"C6upt1FaqWgWD.Iuh?`[mGO+suBj=a0
%h.;de%L;M%%r+0Y;NB;I&g/&U%jtDorqs3C#H(/]4/\0a5dRs>,1ORDP0Sj_iro)UPIM=:559$?gP+H3>:cN[e:"ob,)[[?3Sk8[
%j<>+^E^kI*5P^"]^'RW@Y^%.Op0cqSP8h-Y68jk5#u5"*_.C"Q-O1k\)%:!2./U<jJoS$?hh*`qoGn"T=EBP&cV%+30fs)CM[O$I
%3":c1ht+jV@7[iuP<DS#gn/E4j3GUaE_VA-/QVdsI_)Ec+dChLbi=>.3tMM7*lY&L1Es(3T8Ul.;b2)\JILMllL`mmS`BXXYYM\!
%rlXSg`pY'V%lq>\LboP^G8u8ZW6*&N``3LG4EsR?FJqNG(#,>++)n^S\,9'k%0V/E-@^EU$,[2BA8KNCI=6NJH/LmP(YT:l?_7hR
%WR71g6\='D*'K"O$hSE(T'Zcg,<YZ(#@BXPK*PYY5'MQss2B!O_:or@@pf"-CL_n1q<b0dm]4aa4bFeg0bE&'f(14oj?D/><qU+>
%h[Hh`ai?+3l/bR^U@HQB=0Ji8heXXg0<_Q3Y.fhOmXNUP^,ilSo/_iG!dsV:/*h/'M-9Q4O+-Q4>JBq(if3p-n#ikN]`.9ggT-B"
%qW,cAWu#E\j,9,eZ^q-if=OiNU](-CIik5O^]*m2qEI4Ap?MM)IK5.PHMQUS`RX:,JN(ZljicIET3T-[bhui7S6VXjn+;NTm*F"-
%[,7D+$MU=a@?2?#m/#l;g$,V"WQeY>GbDmhY9*;7YHL_sm3$S%Gk#_'anc7Xrq4s``>c@9Y-*i2rc7_K8Y=de^O(9HG5:]@S#?;]
%ei#MW0pDM"k>s=>0$\BAD$(hG[XUMV95tDG?iK$4Vg87'k53ud='$48/bK><X$+%!hg1o%bX]+]pO0i+q9'fVfu_4Pq01F<YJ3:d
%]l3gqI_U<p4aeE+7Anl4qn@=L=51dPmIABp%NGB6q;k98o$s6$gU$k(?+kQDB6s=&pF!-Fe+3:,jaQ"]NR?rW)Z6)^I#pDh8,B=d
%45?755@<>8qs?US?N"uFT6@uUebi'"M?!8#]ANVejOMrODlh2bkHA3!S8F7_h&lFPcmAVQ'-Me35<e;Bp25A/6AOO_rU\A5oFLZ!
%Il#_Q]/8ohf_s".::li7gFmDGIH..u`C]j^If.U][l.1aTk2nX*%^Bm]CY.+`L3:&0B:4lO.Z1$Nd'm+TDtIQHeTeFjf/4Il$bPF
%2ugHVqV2:gF"m&8fphmEE?\-V9;gPRom[C[%JD^PI:%e%%l\e?-K"`E!5KP&4?mD(:9K'V^n8C:r:a8Gcee9Z^YO>/QWFuif&/K1
%.Bh')]X^0]7eScUr8d_NjF?GKs$^9TBQs=Oq8LPCZcd$IGJF+#[VG[sJ)(#3mEi%$q7eP#^A7<[qW;_`EdhS,0G38=gE03DhJA2I
%`Q``J?J<YaFtoJU]0H9J^K$V%QY2B4V2MD'+3n1VC7@]A^\L;LnAVqIT$h*aBfKT8s6m@a7kF;:q0s\gr9$!b4hN5)gPYTd(Dg_F
%\f$Phl2TWQiNFU9^\dQkA:_2(%"r8aVl'>r^%qno^].),oQN5AaBS.1]8)HfeGgE\7\PFKXSMe_Fd6mZrTP,Khu='\nsbR/e,Oj;
%GXO+/]ANVXm,[/WAcM\,1]R7e6F@PfrLkP9j`+u393G/p8$18OT@EUJkML^f-u-:MrC&9AkBoZKg'8Ghe+q2AmiSsOB_dQgSl))W
%='#p7lc%DV8K".mI=(:"d#VAi]:FC*!ei&a=''=C:X>7Tn]R"BN7%SJk4.a'p>i',>5nbi=oZs7q*/5@^#W$MGL62g%m9Y=V;5a1
%Oh56BOn`S@].^A6DU*-D#9$pnF'`>L:Hi!,-eGg\Y"l-,mS9#tP'8SQPAIXmqYmqfYA/EtC"1VAQ^[eRg$XVg;nK6ih!Vmt?cm'J
%[#$NP34o!8pW&JegU$5;J+nV^I3QYJK:cASPM7m_nX6cK[jVNWhd2p[hRl%W6U(J%k&C<?GB<cPO5@<,bM,hg%rZ>mgQF`SkmrgR
%h=]HUHQV&-_oCrdFpK+kIluJ6IJ0#^h5;pPDbj]0?_$$Q]UsKYq^tcpIWG8?S!3<dG$eRh5!5Dkr476'o%Hq.k5<c!Mj&e4V>&8X
%:rg%*6YU$<?_=uY#A[Y:h#-[8l>Bp8h7h_5jPkR6h`f?]jm2N5JB\,#R9]26g69j+:Ysl5D$RN>P#dmS/S&\BZ]iQS:N!m-5a,b@
%r<#h<3Ao^00L#HYmJ[S[d.WM+$$R:0U@knjG.Z[U?S9VWcZZd@TT<o8F*i?._oA,T>IT79-^V=*457W9dI<?!O4)Et5d#Q\o%EQ&
%Mi4hXs(%$1'CGMi*o&iIaQnD2=$N9^^W*j4hdd4DS6h`#2O$L/reoU>mmp]1(M+,(>jM<:o:p0&h2)pq(FPQIH[9G]IX6/8o'GI$
%#e9d!n#pWtrdGjbk;MOf^u3P1^UqX2GBpT'eF*64F2#5JYNVN/aZDkuB<:H&XR)!l<qaYMHu\lNr6;8EEq-?J^-hZQ_F)8Un*,Ka
%G-q895P_`M]sB;i*`+J-rccsA0@(dBGibLm^.l2]oM2U9_(rZgoFe!GVq54[o]_]L4gYgi2Z?(:nlL$3q/Eaum\/`kG^FjtL\CK1
%Q?iABHI'7Y,<"pVBR7^q2qINR]eK:e,BXf8)WG]FZ"\t&Df.4g?M[bjjg/s'miRnYdI'89H(aQjQ`j*$\[[%b/7-*hi2CNKgpc)4
%por`Cf@NOUUui_((d3=QbM0)6mcmu:8q+;Comq_(birg>5^QQ[*h(2"NISP9p=l(C#A:,]hnS"8SSe>7Wu&4H2s9((*cgNCSsDFh
%(SOMb32TkcI=$E_p6^R^2_WHp?_+k/5[//KI?0We:@lqml_Dq09-_3\L]\/^Q_k^mIR3Q!6]J9V*aN&mV,'93")I_7dBW/DY5`oX
%b^5e8/)2$0T(D$\2Tq#Bf14^_[c*8XbjY4KYC8Gdc,,.lLTcm[qL(CacNi1X;;Ii$mSEg1f6aco[W\JjhM7DKpJ1Fih2q6ODm)@S
%meX^Ds.Qk64^X^ah`Q/\BkdHdp<rBXLM=_uepD`5LrP52iXsH(:lG&(p9.5oJ%0c>k)X2hTD9]M+3scrc0rmS5&u-sTl4ho9X&oe
%Nt:(-D_H$i?=(:Yrq>XJ_&NFNjp5,6#g(<r:upc[a<uT#V6rHsf^CZqbNkqhG:8YCK);!cpF%4t%>0BU8G)ZDf"Rj$o+-e*rUTgI
%X_XQs4"mu\,4s-4o^gV\&E9m2^H]>Z@%ITt:LF(u&=nN%3R)gT8ZYe1"HVQaLK*DEDLBJ[qh[mB7\a;X?MqH_IViiQom9(VH6.ks
%&+K&"jR.HOqs5pqG]u5`,tl406lFR$G?Xb35btUp17%7p*l39+dGR-$H>g-Ze!#]rD6sg3I#+,7X4J/c5<jgKC34cIoAGp<UYGBu
%]i"",SE#>8X:I0$"oBDQ]&"k&IIhW^G5$+HD05C3`O<3q5;g&4qsj%4Tc8,a65DW$_aO%cm(3qt'-EsR-3@M&T[?2['VB45^)me,
%`8=L]jm;+QU@m53ecEVPpW6Z00(0\ZhFCL=I!_5C?bJXO8/tKbRtl/P/RH/:S/V6)`t-s>Vr2JG:ELhlC3=QBH1e<tq42+>,fiI4
%&+K4T595/p[/9$m(T,?Ig`$.h+.mrRc[Y`\J,FWe@t(%J$A1<;)t)0CX:aaZq;js[g%GZOQ&Jc@g\eOMm1Yu5PL4c514>5:WUB/F
%?_7;Zm,H3plYk*Ehr_k(9>j1EXJR=?YbXFm4/oio0KS(>kT+0\rFV,TIEfKT=+](n4>cH;2O8tm5%K2R%mTapho.r^Lh8S1SA-sn
%m.,o:d8C(8>$sJ^]+8VEf1,Y?DpFa06ScgC*/B7E_u+YaI*>!_]U[cKh2@HrE:ne_o0\3/cplncir08mk^Ap#C4,jTp`&s0fWVu1
%)Aa'&d?doNkBgN^YE6qr(dWk\SmVG<l-W5ofWfIGch-\lXZC2m?<h?;VgYN4Zb;n/O6;i_+("NOh>X$*-O3D/LDTi3f-`f_LY$j]
%o/fTnB[1^Js-+Vhpr1eFe`lh[=0KpC?U!,?q8(V0q1/juO8A;C#B[-V3BI1+7]g1drT*hKVlT,*56$.>qqd?/5H$i^\*G,#V!u+-
%kLU5:H]NAo]LPqI]VG"GCA*4Zrs5D=Nl<@mfY0>UoeLT<]nA1r$_+d,hJM[&T#HI*>n>>q=KJM_JsLV:h.-0Fg"#1Wg%.CSBmY('
%mJ4b?mPc.KF;aOgQFqG(6+S`Q]JK'[n&3u5neb1!-i\4KK"1]]E\4q`0aHUO+)M*E4*g4"l1;6:C_1(]^:ldVrVAg>COG^=lgn1b
%@#fOI95ke\(\eTE2f\*p-hc*XalQ//)]g`m@lkfsV((1ZcK+<[D;06pjPG?8[L5aLmO$(-mXG$3luI;kng!==Ek,\$J$"1[(d[cL
%aUQ"DSB0m6>Em(RmS>b[f`&PRIWl"qq<H5m[E0"B6^KSn/5="erU/bEEd)usrH8G/qDUM5n2A(YWQ2X*.gA$tgRZM^HEt.BnU<\9
%!+H1JB^BDXoB,[l-N)QYF87B\KDCkoH\UU"Ct;\FmO*+*Z[6ch"%dE$mjC%T&f^Z=qY^#AYFJ?V2Ta:k0-@K2h2s7[I_aN^BAc"'
%a<#_Q)LFC;Sghuh?s$;K4mpc03i27$s8)"(V0Oorj4SX3fC,E1PU??FDtebF52"m4+pqKPj(/$aI3S(IkMLd1a*H"\IfHY3rhucU
%pX9H;q"6oQe"MWc^&>Zko)^r6lLOY09QGOF4jKP+alks=aB#i!ol:MjkNdPT>cnT/nqaahp-"56q,$[t?LGQYINNZXG](+BDb]YP
%lG^HoH#Re3K'A4uZ/!AR6_iPmmB7&fRJ.R'&,D`drLG>j;bud^/pTV7q"i`7M76u\^:HG;-S"J`P98,b0G\eK$\.`5CAkX9BXS.[
%^2ISM;V^9&C).F=4_Zlm`Kl";G&u?]GrGia$;A(X?[Ve!-Yg=f^YXBf.4s:$FC04,T0@U>>.;!?``g!c5#L,2:KuH^'E*Ze@\l$`
%q599<qJU:A_Xq=oU]9qbe7nXfp@H&d,*)Pu*>.+8mmsHR8ueK7UFFa#.n`*q<nj$D++I7fUJu:hfQ+@EA_tsZZnBpA9h08rm,rE=
%>,'_o5&,A6GGj#k*gN-gCH5S@@ZB*hdVBSjpU0AQE\o@(JGH,s[KLoY7sQ]%Wkmi3C\DWBV#gG?1,!Lrm$k]ZXlX6<Bq\VO2I]u%
%[N>*a??^6MR[4"2b$MQ'[%o,W:o[AEHM+%4=r2"t[[2s[WR5`CY<;ng;P2K+e"YH?<3&`0SgJ5iC[M%*B*74iSF!"6*@3Qk2Mk"r
%])Bbi)9eC-0=u+K1*siNW?.n%d]Und[Fgej;`h;6m-7Q2EnA,*-nf`X#"Z-@Z;,QQWuY)V8#8'CX)6/9e>j\A?GU<mQ,spr[Y'ET
%D1H/D!nsPoeEu&T[?RFkCnKjSD-(Qu<6*;nS`V0o<8K5"BU\4$J9o]\D>VbAdUFRbVe10MbKb'=X`IF1hC7$hg@@l-(Au0uXj^/3
%)&W6Xb0I64:mtgoFg882/4r(Y_Qts6gJBqrUQSbJ:.HV4bKb'=m=mCsFB0oU8H9/(B5O<89X.6!+N(^sXZJUGhnWKXf!Gcl-Y-kT
%].IdJ=kQqnWcR;EG%_(^FhhQD%%`GPfEP)/gg$!CRX-8Am@62r@QW5/eXG/]AsQ:&&_OC"#MEiWC@0,))FcX&@t8F)m7_\"2S;Ct
%anA.b.I5SBGd>Rn7m!`YY#Wr<l=AogGA3tTWS8S>K/B`XeH1*d`B2eR/+_)ACg@Q"9Ok!eP`+A#`'-u'DcLXK=#snHHn">?g%J?2
%hBl9:[b(lZ6/1[-)ep28BSCZ"O/PIK%9uu3`W!&qj\.fjNUJa:mqWQ308jb.9tJ?1Aq#"2TK_oI^eVD)I('o9C+9IJN$Qs=01!fN
%',&agG-Yb]NnGi<A9T3%Y>[]P@RS+7C7DI.0iYPMl=f'HA[9]qgVme"S*WLs6.Tkt7oO'[p7VZsSS(#p^Y[(%mBt\'cZX-\Y)a_j
%[)I30DY>*^)6pF[14\2G3r(5WB<'3L^i!+aB4l+W:U;1oW3/FD[@b-BbLn7(cdo1Amq?rYc0RO6NdI?6VtNTiCrY7WK.J</DDOfq
%E:rnQEENamBB'H'Eptkd*o&I30NY/%r^GS(\_7A@_g*-8QHVm&QYJE"@Yc&^ZYa$,m7a(A,1E`]h?6uZC56:dqpdPnZa@#_8&NL[
%3l5^=mC/tLk\$^5:-jEAEY?B,8t*fsC4c:#[kYb+*3@.^bFI`>8DtaMRn7i#!c1KU*9/t@cV:NBUVmA9)I5^+[a)G:eEj2[58[-2
%b])CLfq'(.TUSZb)bi/<HUL%8J7=I6h-dQL-NU-afMQ+-Zr-P-Ad>i@N?.Df.;>@#Z/hMMP@sZ)iVX*.IP6M]b#VcETM7+dUEKgu
%!b=5bc.3@nB<1/TBb"k!^3Q6VqQX2F@5ESfOA(TD^fi*t^k(P`-p-ZfFs^/V0pXD2Qg>e`g\eR].$OV)0/,AL+1_alULR"<&&TTc
%,btgA[R!M<>uNFP:^!0pa1UF@RO;N;T/a\kr2Lc&$s*fQ[=T,N%`>_(_r_hFL)/4BY?eYTGGFraZsEnj<k"%$Z2aVgaW7fd+iBg6
%=!tJObqWtmOIW59l=+C2"e20q/:)l:fH%?b@hZ7Kb1#GGeF'AUNLa]f7#VoYN8802&rfV)pi]rs%+[6HH"eHk4\q*oa@sbY\M3AV
%m<bLFA"En'[/i"fPe"ImEc?k)egg=CJ7?dF6mSOjM]dc2[U^&-F9>uc\sZ7!:92;!+*M$=n(>>jLGWUnE$J6=n9`t,4&t`/6(CWa
%R:\&peA`a`K-2:o*3207(+*[M583<<,stNCBCZau2SnU>B0'jQ%eNgm_a!/e!R.th'4?ce07k`5hdk0X1i&irqQ3Fo+PfK(<nmPO
%M/Cb!F'72@eJX2Q\p?:sou&9r03Cn)gXun&"O&0[-bmUQ";7J,5'Vg^>"?IK]?j(\[d)Q,1c9'3f@W6Md<;l/B7p@E8$abOFe0Ti
%qT9&Dmg&e&OpjYC;X4%YhrO^ajBFicJ7UKNRSC)m1NIXCk0g&i]&u<CAuH2*(W/h(eY!DJ/hHFEEU4MUm)K[.B*>l>h3D-Pbr2,N
%aM.;7=kQ66VQpP,>BT'PR\>b]V&/Zt)9HJRm"h`YgVD`?bKbW3m]U+ff*,%^ck`OI/fh3RTr-+929r)aMsF?bfGQ,!!;!cQg)6+'
%OpH\gd"XkHcd5[EbY,%b,WnY.!d54r9E[O/,%3ABX<2tWN*3N"nX1^1)64%/h'DijQrVNjh9DICj/X:Qa/sg!?gG(T6M>!]M:N#B
%0]J;Dd9'(:fu`\dS5e\`>7E'!U:,!Y<1Mk_e3601p:[.AjZj^dY1\C"jY#=DS4V^-D/PeoUa%UkA_LbMToTC6WAj8^BV.(qb_g&.
%G*"jDaPqEjm_56^cJB&H'FJVfg`_64BV$WB-K'V0%-q$uBhUB=DI&c^:%jX,DGmc9U%.t]7MAqS`XZX%$-73KB2S^k)HJb1GjZ_H
%f[2L>0cF];H1lm:#RK,uql9<Td?+37T/Um)Ljc$F?a+t7]9squQIHCV=_8H^)142U2b6BZlG<:%,m.fhU^=O<d>CnUeO:E&HXia=
%\0dP".RKOag1E35CMRepa@<%#'QP@NbAM!.<']bT+=r!-%Cd\*2l7t<)M$<TEn-ur)B]3m0gK$-Ih..Rq=W*enf6@!X\9Ne^^S9M
%C1>W++5`"i"+'V+,fM1[.V(p\Y8V(s&ic@1DA:Fk`Fqp/Caf.*"g@<^c/:#^gHAc5DMF]?A)#VK,BtZVf2uB'@l)jDR9Hq1Vi:)s
%L,K/P3nb?FbpR79ZrQ+T>nYo4SK.d]Ydh2q'u9UHEC1$;*JF$Zn',"+hf'eg*P*_"7jNf,F;plQ(NnjSe/mp@:>Tn<7M&73FG5e7
%Qdql6].gDT!NEEK56->UFI8=Pb=I;6dE&:SB$aB(E"8VN$lqr.c1WPqI*bk^g0&&LcIc?+]eFHYEFqM4:4adF#hsL>S]1DVmUBLq
%6RCfjE<V]J[7<es8/jft&fI5\a6`PTUtKrBob8KQOa__r1<OZE%;cn1-?(fg#$XO\Y&QuGVBaZL2%F-Y:1qcc/pfp9Qos_bMN-M;
%j?os]i&'si43^?MS's<q,FadVZ"8`!XfLoi$s(L7Rbb#e=/P'Q*D"&g"fkuXa.iqbDuEAI\'s4[@\1^u$BiB.m)Gj#$^1Bp0\&%,
%]2qMdn^?FJ^2!9m`khUYiqp:^8XL\BdkjX5%S#<dp''O)L)S%r0XMR;Y"+s8afp1N"C39?IQ$?:>TlOGc8$jbQZ>g%9&go0Q6gK\
%6O+a?!0CG>`^[9,-:+M?Co?p:/l>(>3ThO($-6Y9g1R!c'..840WC(GRoLXKjCZ.hW13=F*@E_hn,pTh-taOW.V<D14R!i?6>-oD
%Wj6eM$=T&cF#sS-#RslY&ipl2UU(Qpa_7-gcN&l>*G^^GLYT4a7ebMtoL,GDM=-IYh52<qXYP#Aj1,FpYY9mE(O!mRQNSHahQ_5i
%MC_$nk/i<>dtCRT<WP!c:,,L+M'<mo.MK!Bd\`\a@kPZf(`eU']>^\:S>Zt$DS$3henBZ_6`gn>lJ#"a'e-g!qZ0U5Ef@PtR**`X
%8o\281!&Q*'.!9,i?Jom'/m&.:-Od7&Z.:NKqb=fi]PDS@8!mNj_Em;XNV(ubrhbS42#:p,sasUgpk>s@A&o,ZP_k5%nm@&JsbQL
%]qZb3.RT\bY[U$[8]IR$/uts'ZQok3ZcoG(EUc1rX";9a%n$/eAu<0k1<4.1JXFNLgh<1InM5ECm:#r^i*la7">#/WeT+3I"Z2q;
%\4?qQ,]K3ga+PO:AO0Kf2JilV5RVp\p]6c#`-Gk#?:868`b"hLK:<k]0?<kD_kmX>9'JY95c4fq$?gEa3II/B)%g$U&UREr.Lje$
%c_X@Ml('qc+>U4K,.iDTg.ni+]O_moWb^&7R[`Lq3@At`-DG5._&AG:a.-F;a(Je=_Bri-,%C`"E*QrI^3ZuertNUAAVWi./;T.s
%>3j\2ecfl,5&cp!04d>dg1jT`bcCt6&IZ5K,:F60l#,J:6]5^PBqf"<nrPEJ!"0]fM.R3lB9@)'B88<&M&+1ul6$``XAO2Y%A^(1
%g)6)h>MZK8!2j]B$=aaR1o=gqffDiX2c=;'Oai78@PleMF$S8TCAEu#pZrTQ:Y99i5AJ/P=5Za(PAjY2$g;9ZbA`odNE@;]fQG$*
%c-O7g!rnip[tt0/$C&O?A,jId<mgJr>Z+7Bl#$e[-N;,eA44u[_l\UrZ\q#VE1u[kMZgf&#\'O1h'!2KeZQEUSh2G[3g+f?A1]cR
%m*[](na.esRMiFXG:aXN?k,A!$'B&9HpH$kl!Bkc_B<ZgaM8#FG&Ff_Ke1Wsh1"+@F(T9BjE4D_m+ULsUZ,9bXbau4i&/q;.T#BK
%Ppdc`,7KX>8KG>ZbT5(J:9T[(&?IHYbW-Z<D<rR[.'&[P:(VNj1lmY17kP/bDF%6ArM()dpG(,sMa14A/^@[7LS>elI&?ZP-\ne#
%P\OthY#((EU$6<a(N(-qA<O:5A%/c/4"blfYbh\sJcfI21Q=c&BTr99W\(L("meSm_(nkur!gNt+a]_uQ1JQ!C<R:s0\IXm\ZZcr
%a#$m#CK;tneSi?)Rbn<`l.i:lh2`L2-*GP;p!:nc\QL70EJYWH([`?m*WVBd]<8%RM*Y$`.u,`=Up"2+l/=MMfbi,(-"Rq/YRl,2
%I:\7\)Pp3!3:7G2qW]H]'/*!r<KNV8G`\o=FVC;q"\OUS@arZtCDCtr0GK<o@b:]Z3*Y\SXg\+7PJCg176MeL*#tOir5c)ZV[NbI
%pK+LpX?CZiBOO"I@;l@2nQC\bnrG!@T\DHE7YT7o4"\;X>\\gTjs=9FM%a;GP<72J-h"Q9W%RYLTffsiaEV&7a#Q8OF@1#_2oYMb
%3m84B,QVR#n.R&<R'\tkpSqSH(SA2tAI4r6:^+8%i=&%29+*+F\i[:K&Q]D)a&-rhp!CV)]&,!%H#9*H(ql;S=<S'J+nng"AhH=(
%9H'(n8%.gm:?6@.dLejYckhK->$R=,P6E0(J7>b,c+/7:NnKTlM*+&ElJ]"39bhADd]6W$KMb90NcU9o`KcsN>u@1^">Rje.\"(:
%r,PQ2U2GNnZU38Jg`.QR0*L/I"$pO#25Kt?DPdIpo5V.$3>\$k)_71g$"oJJ?'>uL>'dc$&D=R`%'590&s@ek<tu-"(G$FsfTXk5
%[M`#P1uik)T5p,&hnhr6QRa.7212CH4?f\D";LR;\jP"OHRfb!f2+l^KriDGk<QF4$sQ3EA3cI&)s90B#8;o*F^,:YQ3DL->eMA>
%S6[;eOq!e+k8X8o+D^P9<hpKR2(`Yf[k'cE<s2m[!3)uWhslVD.A0`B_uOnIip&3N\Z9[]6Nq/"]>o=5-":Q@aji%)Eas63'X>9]
%0T`P=P:%Bt(@3+[FOhGhS,>7Nqj9LUWgRI/>.=f;5R(D%U1,;961>jS.MK0ef3.+?A1a6!0Ejdu5D:FNL-Z<M?+u7rYp^r1G'ce-
%MIsgmV5P-Yk6CXjE'[!n$.uh0QK[%Ze`h\0lf<%7qD+-Y`>PNu4"#Zk,ncJU:(F8]MLnT6`I`r%mNO^'`[kAFLQ5DoIPR`HVlY=L
%@,d)+#MH;[$Ae;YWtdrt`W_=gf>r-;=?Yb/N0D;<DKoeZSFOQu&N_KceHJZ9k29Rc/=>I5C`dI>b9*[":Tj1uH!QV(+][%hN0,>[
%!j6;$f#&2YLk%Jkh'^+3bNqR!4=M*o\s#LKpl`HE@LEeOFe)eG^g,TOK_$+JfhdaOKVp_5eqK:VCu6`;-;`dn=UB\HUP,g:rE>T8
%LkW[8a[i;UA&ZI3L/>+/gCCj(ggJOWLX3ri<9+5CFA6rM<?nW?\8GI<Z'j&>WiYbkp+2_96N2WO4A4-8C?;/@WF'Y%*fL&Mr=sF>
%H\uEmal)Y<,Qu1LebJ&P4X3V1Pl@*,Sr=%B'FNocZ]p;i([o-^h*gW.EjC;!&gpiO.Q8pmQ3eVE6!Ju^A'VFZ,X/+U]ZLL4WZ42&
%%3Up_eXe-iO44]Ga'CK9LCkbbbE:8ZK?YIZ`E2O0aPd[c9O"4V75ik"*Tb;WipV=\2@/srgdkACislrrb'Sem_G/[>J]LRp+^Boe
%!4oa:#JFr@Nu26J(UJrl9U^TW#,B;!]*UAVa*#_%9<b.)Rb^GrjF<CUUjB,/:o6o=dfni=<fSjem^kQ2fObffkTh,$Ki'4Q4Ha>9
%Jca01`9%a@Lc.h5<1jDI:Z7OgP8&UC33k*2d<qU,>SDPiV"H]#q0t>[$P$!hOi5<DS&,L>GF)I\!"*"AqaB*qFtG?Y"<CDTEFG^t
%b)N-@M-l0XbW(a]1*i%.Y]?4Ps!>1j<$35tnC(Cu=lS,mf,469Zf:JV&jM?2kfAkZIHmbeE7fGZ^Nf6`Ke>.Y6L9tqL6.Z\LV'+%
%/'/2:8ZNeN(p,f]/7D)U3HV.DOQmUT$LH:U==Q$3?N`?\efg,?HNt;GF/@o))H`eq$O3#!#<"(>!Ke0_,*F_\29@CY5DB7QD'VtR
%iIB'f6[+[@BeO'^q)OObh9Y8;:AsNUclPXB>4iGZL'@XSl_Sj@f&b$WD;t[bd7'$sIIpI&RiJ"TA7rC?b?$h!OL;DbLuB^5D>$4O
%H,/nP/&5)\mC#EPf[.1JPtR4,0Vp/@Opj"l$j>6:M_<TUhJcMh,LIK^>b59uBh8&>;TpS#$FtMn?<I/f;WYt33Q)S:8e*Ka#\qeH
%p*Wf@=mp>PM](NW-qeW:ZD'#6g<gq/RRa3R@mkn]j<2LJ*,*:Ri8(SG'SQEUka\m4`n_rZBp+B:qq[W,gK3l0Om?M#o*YR'968^A
%]2<CTp/)5/c0)JOGuCSrb__!(Tr',]$NeimimaI76sTSM:dpldjt^3pK"d%g!O@PHXgnU?j)^EgT+H]*'jAmkJut.X`,:2I@`8mF
%DX3Dm)odDJ;+HZQL\5"9e(bY_ZkO[c5`RD!12\:s!0B="1V+u$UjJK"\g@*GEmcSoZf5*g)R`XG6%Z/X;1Z(nq8G5R*#b<E6F)>E
%)<QZ*6P,S&d*RE_e;-sj!)W;-6S0uEY$;p;Z&/T4!G&0L'G39^9G$.pZce0[B5Qlu#(cp)VRD?b+sT(h,]jGp$<iRK4&jF,W\,XK
%Gq@9U09VMu^MTn>M"<n2m1M>H\-Aff7Ro/<3@&EA3bKe)d'L7qaS]0b:`.g7Diq7QZ)Gn7_j1t!<ZXknO'_7U'^?k?H?-d-">O@m
%n;'jr66?9;ild.;(E6&ao$q`#(QaGA;s_QaP(=f[g`MQ!''>_T(/d$5VlnEXhXq&/#N6=u"#(OFOb>qlrOU$%Js!*CQD>+8;$#:u
%%A;#I.4rN!&tYJ\1`V0%N)1W_fIYU8V+(W80qaG1\-6X;E!;X^\4c[`_Al1)i1h2MUSnBVQGOrYm4!$K82]+FKG3cp1J)TP86cOh
%I`6sL`5LnC&2sd^7=pRg5ISI#Y4a,GT#,@()IPEjXLU%6Mhfd^8V<3"0U376k)jd30Jjt,fAZl*9Ys+CbS\7q']u0NmBLiRdCCB6
%3jWL8_@SAg['((`[n`OAToK9<:K>2a_!;k<ITCEYqj(i.mDPXV5u)=8"XrsO99^36!*MW\=I9J4S/AQ6,E<J@)=DAGALsOOK-nGk
%S$)\VTN:8#9,Ii+G-4,=<,!d":%7!CkM,?*e(.?EQ6)b'!H8T"+Ke%)YqC/5$SW2RL$Z/X,t[SW@0,p'j/RVmEmb>#E@)%q.fjL_
%0@5hh#4/[TQ7u%Wl]Bu>5>Zi9LJ1AA?GnA=pq;NQ!9eFOCnr_HQnm"oZqI`$2$L%29jn99?66qs.^[lK%>ipqa_cX"i&V%EU%2YI
%&8"MRa0AF'"qW^qYo%;e5iuK]!E3%X&a:4<Y[qst#q/11V>sj3!&ffrMY/+C'/%L"]k9i!ccs8<N`#mgd,9%iL.0U**W&nl0ID4'
%,@#l-!7?a$8\(;2d@f1P,(%:r%;R(9<M%f'.6:m7jJo_N3d+R5'B(^&[hW)&TuKi,_6t*;$5YLLZJp6'6O4>[YZk[R:>Z)o\3OoA
%DG[ZN3\;UX[l661e.d3R;8,)LC-5;q5`riaj=;3G?Yo:FW*dPT8eOJVDY^Be<KO#D.;MA9$'IihnE_3B?qKP3B1Eg^&t>8dKRP&@
%'sX'9_bgI)Yo,'6GE-8X_2)2?(o([sPDN_W\-*8Dij("IRjV/,e8/0I3=\8A9$Mp/!rtuSIatVI^s$mM8MZ)<N0J_XCP7Quo1%=]
%[T<uD-BQSNZ'Oam>b"p4fE!6-98#jlZA1';C)5&R;JHK,Q=O@M6D6#b<m.bIIT+U;r(k0H+L&!oV]Atf[>5"[Bf!g2['Smo=!(j8
%ITnqKVJ`q9,hJkXR?HA$`mJFq!g_oW6]ASJd>Fh&0jdf@NhTG:\=#a^,Nr.7:f/r_<%pI7N"H_f]S/8=NiO?.&csU-;q1uOB;HEc
%5R(cD"J+/pmFChr"!btpGoVuIB1N*i,ANOjOdEBKcbi^[jUkR!J+[lM3Ig,q/?@`/SJSaT.t+2&+fOCso*gQ1>qA6[4"uU;o)N<@
%\%9*08RG]X2ObCo];up"_N)]XNBHt@-fUfPPSmb&*>dL_8V`s('8DZ0aa#3Afg++>4<pA.hI`3R"hBo(!Ra[$.qkc,.[I.ICiHYP
%4N,5fO'kO#XiC@_Hi^?9C?D2O//f=(:T)h#IKf,hAZ<i!@KqW,VTK33#`&j?CLA%3J-F(OaXng+W_16tgl'%S6YTrlqt$:^T:Lk/
%%KXZ$66&*[6'XO5\jdq3?qf&B5IW7HCcF3+5a&CCeWJf\^SO][AT5ZsOX5!=,t]?hbU#2FM'VJBJ?QIM,dk2(RU'Z[h@t6YVMHPP
%kbj`p?+bq.Mpf+]et"it9Cq6Z'M9d`![OU;LQeZ_HD[b&1K5"809[IB\fr&mB7_`Kdt_I9AT>[QVW`1":eb@dFG\n"'9LS[WgdYN
%Yn*t=H,ru3J6NdRm#`.:iCRpA`:[2Y)pHM`Dk_/^mW[@n2>gs<T6Ag];3-C2ih"[L1dJ#U(&;+C_[*W)1D9se*;@TR6]OIKc-:Z(
%#VCk)R#2dr(c`^+V_Je+_%u%]+pX*tD<dH.ARu-I39*'45ENId8=RhTED2K+LjXVKa&QQp!8JoXR;FP'YB`)9-9<kP"N-J.!^R9[
%3JRi9)B-^gX_]*'7'UB=XOY9:hr-V$fF"XDgF/19(o$6VHGRY09([f=j+<GM&"jItM0j"`+s8Xb&t/6@.C@D$VU+8`_muET[kJ4&
%\!"Us^<+F*rfjO$'3Je%256j""*RWE>r_>>&n2d4Y2CP1!S]c@_e)U?Km_UTXAhkY2VoT10ChRF_BH1.FDG[QAZTcC,Q:mJA^O;q
%\G31,=[\?]TgRno.?=q\`]]KE_IHl%M(fO//OR<ESB"(KL:k5U&KT@VV"<l'CmL?f\koMV)#9f2.3W8T#B^mR2GnsAiH1sM,cmG%
%Z]I-SYu6lb=:j&>"N7$=A5nHpJsdA8EZQ\(TQQ5F"Pp/64&7bJ"=@\2,r^oIJJh@im(%NORF`JO=m<JN<m>bm+L77#DgP%s0r9?"
%LWa)uQ21ZP#Tq=Nq8bE&].=Pf+kE-ckj_i^"`mu]-M^T5!KcLpUFcfa@UPhV+JD`"qk3e.PH8#hRu=O\<t%R.LG@m=%68+q9IdTO
%(Uk%iFE4^+%hXdHGO6G.1/a1k!#=CJN3cUjpKRcX0%('_%f$7s%7S&igdTYIkLE,#mS<1\pN:J(otXrXZ(XO(FLt89-.ob<%-&>)
%7@<"t><o(%4H820X9qeU'^hsqC1eI@q5N@P=PsmBI3_'Hg<#))QV=+R!M?Z<c)OMN!X--e+BlUarQ8cLa/ot$;g*qebemH>5YB_/
%S*`au[sNWZKVKpV0[)l<%H)9@:)@FkFcJ%j/mX%=1B.B;1kl6FEX&ZT.5$;kAt5LqFZ46/(q=6;lU(@if"c?RW!a3sh,(uL<Pb42
%7+n:/@cUq!C"VKZ8kjucMuQ(ULspVV<-C0Yi&\Aj8SeG?q;[Cc$RK'j^*YRdAo^0U2%klQU?WH>0NmaobrZe1KOpbd+:'UU,mKRP
%]'-)7YNVpH&ub39BN<GDh1I!l0mHsIQB`$!XAZ->*n22pEJP2u!+`aQ\?7@[k`J^^r>_#ean`8t-eM$_/9#ij-utt4O_GPWK*ILX
%rgF3Mc2tqp7=&RTB&t=DXmn]$P%2>Mg=,'/0HR6Hpr5J6<0/CAKWZT+7Igom1C:gLK?3.M`/mV[.L2\YMEuhQqR9MgBR:YSBT3X2
%8+huqZ_91$!Cb$_o8qcu8*-fQBeHD[DO8L`nJLlin,]Ai1aff=/S%9f$>FO:3uF6[JSk1mQ-ur(:TP5$5n$fbSVa*AZDKY<6(0Pt
%-mok(a?2G4`5Njk6I)76;+gKM,T/!7mUuF%Hd!-fE^[kF%tEC^>8MRlA7Mhqc3/3%l&]F"ohdAV@gZ*S(t5>^Q9%%K82t/X6kUVh
%i*jXSiW5Gjqp%gu=?IRTD-%a@U8,rgO'^4`P)9K?Mpl*@M1e>n6<6Ho/n?"HU]<UfnT4"M+2lDI(`oEah$>4n'#fB'MTiEL&;^8?
%rMJmm6h(o97gs?olr114WbD;6c**1gP!KGfE.o)p<%u0%<j+'Wm<0(4.-W<1.]osd_Y/n_RYol3JN.)b#&36ei$[l/am1X[alH3]
%j[qQF!f$jLMJC([C5NI2E(KupDY'n+A!-gka<eCPit:\dQ,H3gBPU\R.o(r*i/Y*37)18d(.kI_O!YQ>BoPYM$%AVqr=[6uD@#H5
%O_"Y1*bVDE)2=TUd4?@5>/YOGH(;T=6C-WFa/VNAU+@a,P8:'=nf>'V&P9@WG_L=,k1;$lB^rr"ea*#*Y"!Bk`jGH;0bi(\[5ADU
%L)WWFBJ,e1;"8BkI'@2P:$#jeO^SpKg/ADk,%\?\0ctcTpM(Rc\:'L(Zf!Vm1<_=]lNfRah/,S9aN`a)fc-EWMcDOD'G^KO*$:Ka
%,0L_tCJLJr`b?i#G#&T?oB>YYE@Ja$dtVTdXIT>%-GsOKND,j&D>?SoJV_@b>cVlPa!a#,M&I[s8*3?D^u8Wja5jN95[!1;[j.a^
%j/qeSnAb7Bi_eTSOT";_EF??!9O6JMG6"&eQ(k@AW&FmaNlZ:4&0:^'<2W(=`5.?_>k?Oko)sjWct\f1:PK/6G0Os"#CW?K%7*3I
%KK$/`6:pTD?9IS(Wk/%(^'fa&i4/X&'BhS@!+ai]=dO-##Tn]5f'r,25P.U'Aag3(/#k$P4("2nSO!03%nWI>"TcL6'g9d/8t]2:
%IRPh,<gLXeJ=`nNmO'_,UG8objc[j@'`tUX>pK82>VMX!)oV#0MouAYr#fC/bm)uM?3+a]f+iMM6'-F=IACJ/nWVU]pcL"JI86@B
%*V-dn*!*'c'ui(+JsgVYabnk:,%XtNaQnb]=lfu-d^j'D@#S!^5/[LOFkGW-E=F1f(UCXA<S=3tiJVSN9h1\NTR*Ic0I=?8,p&XR
%&r(=&ErQo:AY.%@n&.>eAYc^W3D[d,$"rc,kX_r&@<L9`477T2@,oHs7^<u_7O3tdeNA*Ti,b]o&CVd_GmT;-22Y7%T'<TU9r(>?
%WsXVgp9qi4]OGS0%GEU9>s^g#&WHce)6KCQIm6q4U_YsG;GqWM`<11k-#IhtE9:B\,U@M*\P,W"$8`DV-0GEe@%,kNTWfTFV_H<F
%OhXJJbnT\XHO<K+FEK7!idm!"hQojnc?XE/:N[[ESmRp-%"6IIE2hI.FV0=od&*^\L7rmS`D_Io.Dd%GR9JFA2Tn]e:6/lBik?r>
%S;]"efHCW[:bOePjShH4=((KI"NMj0FPf[l?Wdn/_KtNN>:]F&AOnUL#[\ci?62HSi"GkU5ZH]n<$UG2RhXpD*>n,*afR*g,\IG.
%&+]'Y3D136K8.NZ6c.V0qu&?shuOCm/48Ac_VgYl[nLX05r'(8b+qDX/4?9h'tGADb"eAH)F@8DL7p#.C"e4B.t;4AQ(,<7?C!L4
%Tn@#?C(\scA2[3ZQ=;.Ggn)1Hjet?g3PDC0ioh<'6Rfa8FcqT8Qp>3C-,S[$$H`Uh?7@8!N`(VuY_)99g;>[aBgI)+BuurukH7d\
%r[AOX-6<"=SFKL4h1+r[AgIOW5@K%_$)A+T];A&]ejJgJ_*YMIM3u8AoTHjQD)ka2k3@5Ne*uf=T./`9OXG%/j[TLm+N=;'ahqu2
%TM]e>)SPe(86"Bme0EXg=Zpq4+s.jNG28Cg1aGFaod9N&%[W/mYAsFcFtPiMVFimhkN2:+1tT_8][GPk5G+k73gs+sUXmj?qh>SJ
%%([n0DU-F_(7eF3`2to=1NK8c@E_]hG!E]Odb/^&j9UkVMd`/Zof?r53TY00D3bX3??gI#aEI;,B+O6fJB+n<\IN-DV!4$Qn$#]!
%8^>lVj7NG9#FX8t.^:t-.`C(6F;fL58&[kWMLU?Wc-otMlkKnY."R*$84))EBkpCbjS1EtC7t]NUG&R1[Nf9S<S%esC>[[%W$1;Y
%iA)3P<*DRsVkOKEhSO".;c6JY.En$(aobM<kW`=1ZYF&grab9U^f2'T:SobQVc^k#k:O;bEm$6Z&['Nk!/?9:#:WW;;,2\dBZrKR
%[%Yto';q3b<?#Mb.1&MgR_j\K.6#D"pJ"Mq2;C<IJ8k7N<E:u5KUGt,fI>C')6*(c5[Gh7k",4[)A()KI#:<<c7IjARb`Q1ekm`1
%OgLd?4ImLA*psA%'k]/Z^<4,A/UX]]DA!bA&u.>V&-+JH\a\q<:FZNnlE4e(B.:<AFQlDl2sSelaq7<tU`7;9@.gHAf9:8[4l9UI
%4oeJbPVYqNR7bjp3V0c'2*r?TE#'*4hMMH^=sM@G,8J\/\7Ze\ns2CACQqS+I(Q^S@gH:MlB<\.n=p]%3JsW3;ZqV*obDtrrbI<!
%X+"(p)+bcF2:\fhlDjCWjI_!&nV>&<S@'l*8)buB,2@P\dB>rd=4mdnM_Hl+j01!NQZpJ4!(eX3;^N<s>*q[MP-p!V9#WY1(0(Mm
%ZWEl$_RV]?FA73o#*7:_.m-^LX=UkM('n\Q"eGF[crl31P$V@;eA+0+Ma``).YJWGC[g*p_4rJ;5s^m<N4/09P#[L/0.P&(94KA-
%O,6K@;Q_^-)(L1e9%_fa]'IE%\-?EO-sNh7Z)VDoa(`bt>Cqsa<*`Z`D,D.PG)Z*#DkeF5f-.SCdSeD+0-5)JNQ>N]mNW/AWLk*G
%VX8VV<<V'PJKg.@Be_2K-&@aYWf0VV*#l5#3B"4E:mL7b29H-Lc*QI2p(dgd=,sR=>Ir*00nCZKP@j@l7mBee`0R2,^I3s2Ef>oG
%8fkdLI+TmMA#A6Ub4Qn2Pm-t(.&o=*O`*@;F`@Ma\qTkFolHe4e=g'@C860j7c!/;-8f8ZZR(RLWa+eP$Ic3d##WL_#)SjQWp/)2
%GLe0&9m22oK#_NCiDg=!^Ha*rEV@gJWeRU(_9V9mj*G!`SWcu\J?iqt8S-5QN&4&l2E7(%VG0Bj&=Q%%#h^fkNFLr-)O+Xn^+kVi
%57.Re<Zh[rVGP>?7[M@+M"FWB.R^s?J=]&-UTR$Q6Vu2?A^b$q$sorS?rgn^l54Lq?A+0plr,mt<9TP*LJ3.t\QoQ&j>EeQ/6QO:
%4#>,&4.uF?=c6%Xlmg1+,&Gmbc`NrB1b>f4iN`R;$?q#K=14Xg0a_IooNH8=eX8LLGgW8&[WKNhH7<1i=rOpIXV'[^oWW(:MT]Z-
%Pa>No=35WZ4&.ZXPVgg6NA=1#esUg;$XuZT&j=0=-)eEpNAuj;c66fDB$mPbd,q^UmY5@SF`WBFM:eh_+b/M.43lSSYqpV>eDeL9
%Q6L?8aZpG]el!3G<E32E+uM)iS\5;\E?jR\JS_+H7`3m>V<cJOD20%<(/M<9SpJd<2Ur_"FkqrW9[P*7Oe[4q,EkpBNV9!F&^!nD
%dHk2D7a.dKE<IVX]/@d,2JcW3k,h0#p;Q61HY[nj>FShp&0JNEacmlG<hA.,Y'K^**[!M)>)>L,-bXe"%$M^e5cYQYHC\kPP]ncu
%'P$,DSkS2m72,FM6I]QL%C-FLNt/K)n]=N'[X5P7`D<p)!a'Cp7fYE^T_E,DG,*fR"'"b1j]5T^$Hat1`5Y1Kn6)BTI>P8*.Ljh8
%C6h.U[jF0YCb#.cGR\o.?CN`=YM+\lZ6q%7kR)5b'L_Z3r<egoNdSLA:a/p6>$H::D9tYh"7/G_#jDst"rIio,/>\;T%<G-6!Y^K
%G?4Mjq"5PF_p3Kq"N%dDSGTNNi.YD^Sg*08D+O?H7D_k3)rp'1<)$'"`cDc,no/@I<pAmcPl_==j5DlT:(!g\;gq:?7D"HV@P;IW
%BtJ)SUSRTHdZAR;4JDfi;;FZ`V"Cf4a]3jjTG<uA;i-_!j\aQH>ZIY[DksoHi?c!M]tsr>#4SD<JMP3>X!JRE_R_*rpkW!K_]$K!
%(d!,_c#kJ-K`XG+CjiWf329J.EV=,PW]:X7fAl+#bG!rQd^^_.;qV-0BVAT_+fl:6h.%5k-mB9<7gDXS*QU!k]cocKQo###%Gs@_
%m=6?hP?NY#@>S4*,EEW"Z%Yi`^+iD\hG#b^P4hk`-IgVC7I$]d-ecHbPn:*S0EOWp@FUXXKU>9rgYs]e]-)pU;n7DJ80mFGT'fG?
%IFpPZEN$:L@3@rjdp@#pq;t:8WN;jjY4tU/NU0lHPqXf>5">Xb.=34<6&:,Wl5\>*!%Q]Y04qS(L6>h1`J8&alb/(o6R<s%>c&$A
%k$$cQp;l'53s=EP@?6Zg0o'Kt^*n%.Q2crLRqgaj0[Vj]Cr35&'GZrne1h)I'iS;D`o6X1W^5_m,^b;Y\t(&sLFUe.Gq$(6`ODWJ
%B\YeGe-H%l&Yu.GGg<7LQ"9_`?Ck-R$X9!R;"X9I%WRuUKKtJ?d7$K:^A)`58>>rX7-2d8afF#FP;=Ud&K)j)Um#Gh754uhNTf#p
%QOLHLCf.dV[S\;jN$cM<cG??&]$@18@6.A4PWC--,`C8k7gi=r;[epb&+*Ar^XOW8dU$.DN(HGn%l9NL%8/6&"[`DiAN/&mQBHu#
%YPKb<)bF!>Sif]BGRmc%?.q>:.4RhGCh(nR3A;c+<`b?I+la<qQikI!8cD&.jN$hE"S)SeqXC:HM_]Fc#K4fE+nUgd$h@_+.:X\q
%WVOPUq(/Lk$jC6-UN2s)DI?X9ppaBBPd0iN=:6""0JtdBVbuS)q@^rO(LnD-.j3eL`3k4(QSQm5,DgO1n6q?^#R&%$,Ch>HA7a*P
%etUHQWj<-r6KI+b,;R\(n$R!+^\2crYt^h)&0Jh97!1DE[emZohXBA0auQLXHso`d+Y"P'hr4\878&\i;$:&^OuBF+X`D-$0-.5(
%5ffuUhj)m>!Ql/X*JO-*H2U)(k!a@$?';A6GhZVU$!"i&GX]rMV[bCrWkrIHNKE@]*J*4tMpT.^BL$[@ZH\OZMCntK*SjO<8s3s<
%>]VYgKYi[j5u(O!,s`8B8-6/VC_Nit/+JB5H&eXI>)o,,,3l^04-tu)b(7Lg_)o<4*.+oChM\Ot,R^hXgiLAn5Y!'PY-GT/J_JjW
%(qWW)jgXR`eG&LhbojlWO`ab/=C@+bghg@CWJP-Q+l1&[kiY]IC3E+D:mjo]NrmtTL>L7@Ae`mMCO9o%##B4O9>&iPD,t2c&sZDJ
%5uT+BnRLZWZPq@m+'`$ZLHSX*'g[6M\$Qf6Pa]j7WSiBB\Airk3k2UFr#/t*D.sSM.6*Di=VoS+n`O^f9N(G8hWVfoTs\A"-EC#j
%f46aqHQhWV*+^f.\PuUZ43lon/lc$,lZ2[KGee0RK&9!I6S4e=j!4pBa9`KD<EiAO3W1Xn/X;/tZpuO/C%c1-ptu4QBdnk)*,T*s
%+JFHT8fLP.16X.2G?'t`C]DK3]in#e)oA[<^Jqnlob]n]H*pfc7:pd:qcMh>,HK*->X=b5h:FX)-IGC2*p;ob,LdJ4CWHa:j>q)g
%.L/Sa:j#:LU@ZehDX&%$0deK<(D)j;fTR3t3)su26#BpdX%2Qg;/u+a5ob^'ciK9S+`n*@hnh_^;DpT=[IX)UI,aLlFKk%sFVO[\
%'$?^*^+)>W[k5-L>a0h/%V/M,MR`*ne9`5+Qss[o_hQC8K;"dlU>@H3E.\EL;&ff&TVQnC7Rf73m4kb<&eBj@+r](-W,;g0h"R?Q
%(UMZP7'O(1<#F-FL65Y45d*RWdPQ\t/jC]\0MTJ"#[</#,=`u4HXjS+OUG4/81n6H7WBg`O^(AHG!.mnC_QK/!c0N*F]5;%EU2uU
%d@2"UOJ!D#iqju\5mc`E4s;.rO=Q*en4kMf@n4Z>T1>+TM@BFt^$>&nXb'N=6"W(-L:Q"aEJi<qO.o,J+-1eC4p=s"0)c44pn#ns
%Mnc=$86C)&\)R7h\#MoOMI(JhGB[S8U?T#:F?FHY:jSY.$@/?cBHQTF`N(s*j]lB;B-U@qPIdMcA\8fr(eTf-'LK$&FEDMUPeHE0
%mkbeq(llaniguP^dUr7\<;KK1*oocUp*e3$D\mf="!hk7#:gO=<u&uQ`^&Sj/kSCk?Ed_RYEp6cdBT`%-*G#`#mNc].UdA#P"?AC
%8bPY&CQ!*rnQ-FT8A\*KF+W0T16>F&Ef0@@G3G18_]3:W.&r?u:qM\`67&\gEBh/b@k'0.H0l3sI'?[fpp,0q-1]sYLjWUB'LO0L
%6rK]`LUs?8b?-<7;t9fhK5G7G'131=%k6q>e6_f=:KaEbR;0Kg#$b8q*qSZuOoeh*m,eC?563U@k`;Q=$.56HOB$'c!*M!YU<:SI
%5J9?bEkE)2P*Ccq;KNgs/9%726E`o@HPm`p^+,MMa9&;rn46[m\=M:W"b/1(\2dC,()9"d?;uSFQ%9Z@j[hc&d@<o<+ra.\,'Ho[
%Pc>G"me-;@,Su<s8u!_pI2Q`'>`,<oH_Qm4?s!!8lF$?Fb,K64^O38N;qRoG.<ODrhL_\XU!RF9KhS/>Y+\fe^n3_n^r+0<Pi5J"
%fI![?1i"Rf*>T^>ND[."ZIT+'S\1,RHr>hjRG'hiOru;l=%/gjc$>FDm/g.Q(7gE,KhqRc<.H$\KK59sn-gU1T;Op']j6McM'_HK
%D:9]F@o:n_/1-:Te5kb10)DXHC_4:RP(4<N0Dn/W6uqmDNFR+596CruEK/=`4`X)joGY)\;tJ*+n0!oQM?L)%:8,^#[cK2*ZX$#6
%Q/PTQb^XK)DE)(F;>tBM:md]@(X\b,Y94JW;3Yir&0jiBa2="H7f$li<!]rAjM5sS.)X`@C0,_],/jn)P_0+;=I(G_R;*LMYJ<JP
%J]EMBGkL4KitCE\dju2^66Tiqe5MU1X"k"2EYiS31]#!>Zb&"CDFT>:N?lXu7YEq\!gTbKV\3=S%meU")Y&]u,;G#<N-/.@[$?fU
%*l+g=,_$Ms3d7Tr\4"1!W]-K+Ehh\+;n"2j.-[#2[+b]Z'"OJ+>Wdin?K@$jGnO;Q,:#^T$YIb\^^Drb>-:AZnoCtM/_@%JXGi<)
%Pfnt5!^uJio#3d$D;07,#X,/5,DJV^^:N^FcJaCPc/91JVoX(b)0Zt_kmh5M4;Wh#>#-1#E$F4*<o2Kqo>L/g;C#72P(JS&lXP7E
%.'e]1Sp2P[EXh&mU4o'$5Y(c/YXjn<S?anH:Ha$$XLao-X&Ztl1<tIo*^E4l4nftQic)eAk&4FC2\hjUa1c=R\A*A]h(&FG!957F
%$l*qN^0$TI^F%UW19Q>_F[U0q>Y7jV6ER2`%)=C4;JmpUOti=go<ZB).pQ.91%\Y78//<`8r<jOa0eu*W^-&K;$Rim>nl!EJEJC8
%ZTFMk5Sl(W2,B[q9Qk`M$=je.;+gGcluUTYPb;X9Za`s)@aQHl2\FKt7?[bR+^?.@i]5R7<*=f`o84-=UT.(,QYKjp>?1?NIElVK
%GE3@*5b.1ZC+6i]_;k3lW,*5IYa;q5)a$;3k-ZJt7#D/JH=Ug^nF>_Oh/T>]Xi(<F0H11Q[<PABGHf&G5ZYn$"].do[4UE"%s$&e
%q,Ih__p]2UEE27(2&.!]U;4;6!o1pK7#jnXr15%UX>4+"AQ.9$/gVfZ@"m>#D5T^]nKR$D5YtbEPo\)@,RZu,l;ue%pgNm=UE3KB
%U4+bNWZi[DC]9,77FO0P;=j,kY5"6uTqt7[)+mA,\+[2;-da([`jph`].W,<846AkE)O&_$05FX(?skUqiF<?FW"D\;*F0p-0d(E
%h[XYp6Ukl5i1QeQ/hkOB4]gm&4Loj5WZKZFX)SGO`tORNE>kNF0E@/!A7-"I^41)m8d-u.J@^A2=]1K%:e76#5Ntr2A]l%8!Kn_7
%;UDWQ4B6kk:H@&?`Nl8D#]'dlrb1MMOPgHi#fA/N5_]?Y-PdbDH5-/!4fY/2:6_kVT#)Z6,Lt@FkIh"XOVOg@%<o[GgdRY/KgAj.
%AJ<E@""9s4JR-:mIOua(0gb(5!g9Y`cEHaPZc]]MLh-lu'3HPX%EPOf[!JF0e=SU5R]>k(?T)+rafF$K=2cu^:TLe!Tl.qVlOl'k
%j=PA0hD@YECDCW*UR2i+DG`6k:%;N_?s&PqVKojlZt-YLbouJKrjF:AFnRtFP]g.MBBSi:HYj*s\K4F<@E7pfW4lYq#HG;C3g8cc
%N*GfR=4Z-CaUN;ph\&7bf]>6=IhYRR*10JB.kAU=AMp=4PFd+<67gnm*0)N<fOAAu_gnCZBe7hONU1\ijrldj7'G-)H,4M36n"bn
%XKo:;H8B@E/'=h]Cq-U7mb1J=IAQ:)o"9;8LMhp$dj`/@dO)6%@?\s]XHes-q\Xi)"_=Daa3!LP[ZYFX]LHRp,i*\MK+EisUO8%n
%rCuDN,C`pH:TUpt6[FcF$$quXlu-m^MplQQSii-@p(p0=WT"$En'+S6Wuo4p0,G@(`JKKa1qSrOb^8b!qVeWA0$EBb#,hMJ0b-FL
%l62IV:?L[DUML]GX6K%"k%k_ZXVWUe=H$4*OXa2+TqA9d!`X2HgGhJ6\qA!N1g*[8-sY+9Prkb9=!hdba31'#9T%GEU3`iCB^sl(
%W(2N72:l?D?C%.:O]rQ9jP"HLO;2Ln,eP:II&3QX$8:of:X\J:"dPpGjVhh==V.D6qlaasjr+72S,F.;&dp%lQnpkc[^q/g<7r=[
%6AtSX+QAQT.:&aIn)2&4_N0qJ`%i,&#cmku$aF$X0Q#A$PpBo6<#t!Wb47jC`App$H#JdCK[_,YDLH#G&Em0L@6^\XAE<=bL`V47
%@?uO!H0?o7:Xq6Hk,>^JUp(C.H;td_0IJ7=d@s1iZ;Q7+2VsYFS*iWpS>/gqA`?ZH9AXq^Ntr7%<8#14HFKY)s.H'i+N,QOI>)*G
%(ka:i>>nSI^S-3(ccabs,>(8M4.rWmNSLYC;/hId88TiteoCDH7Z8uD:612rCYek0I&cg5"+g&_@,cS7'_e?25VS_U/`-Fc#h;dA
%VeV][:`[+3ob^5DDD--)V.^),8NC!BaQ,]>>?1Bm!"<+5(5#p(YJp16=J8+e1)8l+Y#1c\j]1G>PoLr_Ear`1B3n-2:9"HZ8f&Zu
%n)VTFM[h!iR7_ocgdR*lJ6US:j&<j>ag;h^R,TeH^V3U%KetgTV!qEVXFssl7XZDZn`=aB?D^>ofcd$#EiTG'Mi6:ePt!87^]E7O
%[CU7<6!cC'7p()mS],4q.Y9-';\Lb[no[*QXQa"+eIC_@W:T@15!rHr<R!tsjcL%3m81dk.++E)$.^dHbY&'u&-Sf<7-8ocBt;UR
%.'BF64hWj5ff!06m,XY-#=4T>3r.ei.YY6'nQHQO]d+%4D[E.ZgWIX[(+ZAM]RH][b0.t>S]e6W<kh"J!+M=E;/,Yn'ODWtX;hF)
%*oZf*Nt<4,i.F't1=>AY":R](!>.5`Encsj>g[>^ACs2-+YL6WFB'*G4mPEl6G2S[DipFg,4"cg[RCBP&r?WI.J.E>F`[.r>>ZUp
%qWm\.0QJX#5Pr)ucN7C#VSs"IDTN!A.&`6F\:Vn![Rt:)8i_Kg85CX2@pcc0"Ce?t=WaUiEE@tfXhq1pFk-2TS[qFX0Deh9FIagV
%9]\%]3J_C#E)96.L'>C8GT_$M*6!@:e$-r9:Z_d(1uBsJ(u/:QMWcC>;1qb+:0B6a(Y>QR]0U2FfMY5h<,mN34t)e)&4sei6Kfak
%ft[FoP%>l7DC1m3EtBahMFQoo&@[WG'gqRo6R!ceH7!DB5c#/lG'$bNX+>`BSXUX`8"^*3_700kc''GQV)s4ODYqpOj&YZ;mOtTM
%Ko'!:.3;CXA3lrm</@/?P8]=EWbQ'o:e0TWlEU.EGs*Z+".d3lP25@>X?r2@W$<Y,,>/eDoibiu5@BO?[c_@7L0cGrkE4#T]S)]f
%V5/XI*+g'p!8_rop=s5:aN[Z9qu"h^o#[]^OVZq6r1e6(\.qo(8Fr&0Fi-GDrlC&28IBb_WG^qeWX^ere'b2PTbd_8jccqt`>^0;
%>DEC(h^%^>coa@Tar9_(aFohLl=nMlSm4fF-;qB&n87gH@mthQ]j)Nloesusr#9%jVhe_W^JuG<ZTh1BV*`)de0;tj8N8150t1h+
%<fcrSe="'>e\1`sE$mg6Z/<<&ip^s&ajqg=Cl6YhnSEs(,#i::%0ZEUoE\jHHHXH*<iY/[2\<F%e_/E0.IjDhHU1V7EN1)R-aT,k
%TrQkVc"ej*T),^mS&?'Q'&Q'pZ)ZECh9=-eW*>%'<'iWI\i=9],>Pgrl97YrV/V+P68'ACjT70%V7K<lHG9g1"=!k<;X/_d.)nbc
%8o'*QbPTGZWg5=k%I";$8jD]+>6Il!;5;sJbYTou"br?i9W_ii6PG%;Fo1HB-39?Y>1^ieB7/6S!L!+ZK/+X`)g.2'k4OZ\7J(DX
%lG^C!VKs2Gb27#2CS_!1MEe*B\s!\2)oua9\tFC)9q-kb_h:E.4f=T/WBkl"4^g96nO7/6j8"7nWe;aMip28PaYKl:`M*OK2(A>6
%TBrf*XW^_kc")iN<=*`.;FNpJj=T2[H]`YRh6:0aJ)\?r2c,c]d1^B9m3,Z>3%K7eUDi)0=l`_HXa7(4lS@*?<9ARfd^?(_)6`OT
%5*qk79/=IrONLE[=ODoH[$*aLg.527on9a8&(QNm-r3:XnkoB[fbhBqTSN'YZ)Y^5cs;t2P*pT=l\lnF<%Z>^6`JS-T"S9R+''D3
%J!$Yk8!9:TCo(b\201F3W%CbKFI*db<"3Sr>D:YOEQKco2RqF5@*`%<NTqTF_B_'ekd'O-OfFA,fj0G+HU$k;eK%q'ZBRbc@<,$o
%ma4uDioJ]JC.>N9Wct<V*jG>f/Q$*(6"o<``S"Z%'!@:S2PLAPW/Id8OU%!$]n0?cjK-Q$n/V6\.:0R4]2Gqo'S"/Xo%)7UgsS%R
%nO-F1]=KcQU!n&.H]D2$LN$54(djV(]11(m)ECo^BpeQo-jc@%;V]).mkW'_-DcdeTa2$AHM(#qD"64fAH!igJqW`'$<&R='R[j1
%\ke+Q6GRmP:51_:ms=Z3q.3Hi:E**QKjh-1E5.b2jU+i-<%<c3/]4rJKH`AG?@i6U,"'-["X&U8-V@#<eah]WkYrJ1N&8Ai"0]/u
%^l=d*Wc:V\+;f-_SBLj`AQ((J?H^7-0SERO;*fGI2?uY3^/a/OW_#*3iE*^c0*+sFn,'Mkl&CqAT=YG[[r%!$b_b1l9$qB;O>ta#
%op=NM4TD:+7c^[G.*s$9AFbgp3#YkgP!=d9#O&X9LdjGg;1uE'raZKb1POdui*$a,E1$]bFL?OSQ`$*E7M:<Q^i(R<*p#DeSQ?tY
%'fk)W0-uRS*7'K'\4j6X4?Z`"a\#F?HA+a,Yr%NO/ZV+_17h`I?=e'Sd#+V?cREZ/oT(OcbZ&RlZr*@aYWDZ62VC_[Yi_ZM3S&HJ
%Ra%#]"'X3K#dicNAr.--:D.^6"dLt%\-<gO]q2R?WC!O!3R.V)"KI`44?0\Ddh@_p(Obt3GfK&3D7i*s0CO"%[/4'Vq[XHl?@k0h
%;<nUWmW]ABcMF,aG9ug!LDm"SOfjn>KT1(<4o!gm>pcWm#?)]`;kcH*O=;5-!''`6,Zl@iJV\XJlT+%*EoHXe;g)%[*t4hgH'+:[
%"\B"HKRE)LlV5^n%m:=G>LVWl#X&<q6(LU^k2O&gV-3SqQ[mUKZT?0]0FFJS-qtE`P'</]gf.UlXa4_KBHFY"`CT&]nTMU`hQ#FB
%5tVgE<_]rG8AqJ4JLf+YTL-S.7^%-m,(')F2KTg:oXIS^BKYes::Fbp>ZB!rQXEBQ2*M`mep2"d#i-pX[pG9hVg)$s4gA=3hII-u
%Pghr=6QY\5YCHY<AR#bJ:ddRo"HWnA.kG"`icl8;>P>%f805*%"<us(NAkeOSc\SS1d=fk=IV/8Y)H#""shgihrq26l80F=jKFiA
%=tFeh/CjXDXNnB5id=5=,pF(onlHK]#E@FU:"drk*`G>be)l\3Ohr&%MAp6AA^>5oaUtGuaHG/M4-L>)Cg)/2LBmtJ;Eu]i(;?[b
%VWsI1<Q?1L!aT2MITEeeP+&]I3FT@-mH_9n]$AqS1&!JF.?Sr/W9\28$d;p70bE*3r?2Mf&ppU\[K+G5N^@QFC,r=-C,UlBp'%@!
%ZnX#0?DJ>h$Qsbi2Gqk5D4Bid6#aJg'6;%PAglN+;5&:V+VFhf3J<$@MDbR$AUq>gCID,=FL!\+C$1V2L]QXqqr=#&TlkQ<da4`J
%+bWU"Ol$%>")5!B&.ce0574i:HD%\Bo0=f&XE2C;cDlXXadK7TCP8@2V8t?bC:kEZp^SN?1=4fL&.>GD*_!+!&AXk;@me.K,16]:
%i=V]\-Ku-QQN4o>EL@f@![n[9q]ISJ-uh!k@kOTtM#KXMOnRKIN^o6g*WlHqgN]#En_e03neKUhX2XS(1F#D^R+T@3]SM\(?^YdF
%2R&"e!%:&u.Np+6W3MKkQ\R1C]ge6oKMsn@]up&E&g_gsOEsb\&IaZ"R5S%#8ht8nOh5oD&4$'-`9b%&P1J&)#sk:9U&#l3@j+Ic
%I^Oj5,lB1_5);fU8-7c*+p^N`TX=5%dXl?\(kU!kkot;sLh:-T&KeiUi.?We(u_L>*XQieL_m#>D]gK?:Cs]I?BN(+VRRCp4_";%
%=?lINidfC<\2^bWIBtDGoO+KWC0+<h$D/]BVkBAM9:>Sb[he4g3dF-6``$"Gc=u.)f,@eMf[W5)<3V+N"Ep"`WId0jGbin1e[CY`
%FW2!&WfWE>XKe?n"%Q3u]AAU&>EZ?+KmYti>kDQkCs+_J_a,p_aBMgt'1j/%&@JO$qc&+A'6M1?JWY=V1(r1TQHf.<6'X.k\Id8g
%a>_i:?_?V.!j$]1=J,4f:V8"9Z:p%3cg`WU2RMdYUWK,JPB"2JqMsAILpC15EV@`_]rm(Zj8]gaKK`#>_CL?o[I[9]%jiO1Io#UU
%O-gh\eP9DR-Fm^V0^LgVH&u]mgZ\^D\EgAoBd0bEdDDh"h765s?sI`\gXOUX[=`85/G/;!),[`Pe[b8c3^F&N*jM7lV+5&.,>a)X
%ltBC$6X<0)H3d>6]>$^:]p2n),7bi:quJ)?<^jb':+lP77j?9AE70b+]!Uu1UL2l<!'EmS<c&.Y<Lc\K(X)t$d*k@u\Po5NmV[$.
%fs-lg[)1^<#&+Z&Q;E>n4*=fGQUTsDE_KO<jQa0S!ZD'?'W+,;)`8NqO*%Sq,e"<eLqD,6`8T-A?3pu5A9WcPih^4.:(`E,[,e+c
%,+jRdmZ2]rpK>EAPq\/j69YdG`QQ9W2ZedsUsePZ.s6f1OQDGc"7]I!V.i7%n.j2*/ESQdZLdMVbn6>eM7%S;7F@$A'WORkT&U\-
%:>/uO3Dp)A<-NL`L^B=>Z*>QFY:nW;,ujr0^s1h_(ni#:R^JoJVIBlml2u4nB@<::&ZOOl,Ob.XZQr?iEf8iBfHLGX7kVCrZL#am
%"//TgrfY0o=/'24*qkO159FrCD@JK74e2[9.!m#V-rS%^4hOW,L"(*qfp#%^kXZ[SS['p,"`<kP4s$`a-9'`&`EVRj2,`CDP,7;R
%$bI,s%C1JLLqa)Pci0.7ob=3V"fLN[RHJfA&s&a7]FH'BYA=a.M8oAYNa*M);[sq4Rfrca=@2"%US&c8>5"WK:[>MS^o:7eEFGtD
%A`T$+]1Q"t#?/W_eq:iX0#DJoKr?]K!(9&^o+"rXq<\Y[VP^sGH%Ra*D=nZPE_YLf[iFu'^)9>+R+r-;3EYO9LE0A_$5;D'o_5``
%_,*[I-=u)*-tS%NO73"9_f:hR5H4dfr]PNZ2ZH7KF^Cu<6GLs`UQ,`^XpVaB7Pc`*A_OiiNa=^q?96&-9o`glkIUPopA]jW/Q!qN
%j2uX_!MUpnW[);.E^Zac4+j^]ceAQDfsDHYnsAFZQFMF.;S!T"cAV?j&]t_0ZLmGM?WV)Te0PE#Ms$#]=`:5N[H@.BVfe#TMVj"k
%I/MBMO$?7KkB:ibaV)Yr[R&&C!Lpce"[JJJ\oJmY-/P*m&FVej$C,TF,(Mf@?Hhg`%Q`42\:%L6EB!U%qeIj2&Unk6+0m4&=YDp5
%aiU!!<pjQf`aXSO'Y^<Q0fdeQJ;;9_%Ju<f=p?H="L'PYD+fQ7MNZ$G?aA3-Oo)H*P`c_c"@l;AD,b\4L()),/H0+`h@N"GEOi9.
%0cNDJnaD9K,>C`2O3BO7i]!O(U,::tM;CTnR[RP?:3mO.KIL%>;&r*?p/5"P8/MK@.Urg*<3&*2Oo,%_Ek1*;fV;W_F@(qAaG['a
%lj@/T*)nc>Ss,,\V'p22*6*V1doPb(\LSXOWB);V/I4UZ7oGJ_fm0o[3&;Xj!1ap%oZTCjO]_?<#rhbN=;S8'B;MgA4TOk-rN>=#
%A1u)C<oi'/TNN,>>Ug?ok=eBr)/N-iR?SMAr!$>=maSb`#QccmI_3Vk$L5-G754Njn^DWok>9u_UW=$"8Ou+)kCfE&rUO@!*&Rfj
%lC9Itcgeoajb`6b_9)G"92onVkI-u=F+aF7HUt[U"-]bP^2e^/o#H>LHc#$J$?I2OQ\ceb>M@/MHKp(Y7>No`k0$V[b__AC+U2_<
%%\"67IS#PA1f"uZjejD,/b/1ED;gD=)H"'Nkam**]*r!P<t`Y2DT#ZpL")e?K2\"[VG3'p!/fPJ76o@-dO==7hLK,ua_[AN?=p(P
%:%.1.V%Ye35q>c=>3lM%H$`%Wn(Hg-q+/Tjc9iOt'b9q/p<"*F>H#AK,GW88^&k8o*]KEk-[&iS.A.d5bB=TGs$85BUEFA8B:Z[>
%GjHV2(\Q@3[W#-f7]eqb'W"E[S#c+)%=!k)cdI**nENVZA-/,'e:]e]]tn$PI^`[VU-RJEHLf.nMH>j?F'E^u:kY;XkE6m;hL!_X
%6Tc:QSK3-%h_os*gRlCB]/\8ajY6kn+)$_rFOeF"V$h4'm\*VD_J:4sl`*$EA>!j^Ubmqp0Cdtj;Y..$aj.V#cC!Eq$5;[:Gj@3f
%-eHE;&TqY]EO0uI'Fg>^P:ijl,op62V`%,JH::>!'*pW*8L&#?lB8a&4W[YOod98pkuEJ:LSDinbrnL/PH^t,PMhL:5QokF;EQYt
%SLm"<B:B#!*@F#D!e'F#_t5hVo0krHn/[Q0:l&P<P-S59';OhsNbAjWi^bA[D(Ve&TrO@-@!:>EH.d6:Pkg0Mm>6891BM-1i2?o@
%Pn>+U`4k-oA[<-#UQC]]`>R%t4jUKjRK1MZ3H'agdc;+Zj0_?WpOUCpU8Udk"<o97n5]rac[<kHiVE7J8"/9.W;+(Qid2Db[$C8i
%SKD^/3"MNOmK"&@;1u0C->%`3p=)I;<;R']lFDR.![_)5_F#qcc#.6Xa!N^a_fL\4d3Ge$4c>*6;\USN#JpuQ]SLdOk_ljC.p69Q
%;Uc&t&PHe17*Qs7kAg!L7h-XQqUaH*9.42aZOV;o%\?1!Pt:kK)L<uAO^0CT%.3SfDrKjC4noq/9PJ"R/4P'pBIq>El2.FPWZoR@
%,JfWjV&.u'#t4=MOg]fY7tU6C7.ktr`Vhs\)QE%_fQnbo66,M%JQ9W1H]eRG%"*qET$g1>*07&^mYj-u5ZKfO#h2rNRAYBF9L.[L
%b+4^X&*M1Mm^B3:'ltLVh=DR?0IYWm=]/&(&E&Fq2Cl9rC:2=*hsXDj]jcua4J%Uo'V'Ajo^n_\*h0q@R8=j,(es_[?i?g3J0GA$
%^X\NfICrk5UT=PUO=B0&ahHp>:`@DrCZ_QlbbKE_`IQH9oHn$/#f!2GqW)QIqX]7$(OA6AW4Z/fF/,NB2-rnNG[TQ5W@4?uiWTd^
%A5NN%&l63cj-;_qN:l^,0<XNB_%`T"S=GgAnL#tZjc<BMpCGYkfT21XTbDsCMW&R>FnKX0HPC"I&AtHG+B\@O;gBNKZn67?[HJ<i
%AcbJuS#PHVc^"<Q)LS/J<Q-r?AlI<+=>>u888;"e60^hTN'KKgl_<)s0`F-(p3:bZm\@EpW%*#CAe\5Tod`$b&k]i7a[CNK-/K;#
%8Q*Z%$neZ/FM0<+QXd$:i3.A1c@%e_!3AVSW&uR7\gq]$AYU11UkUC,pbSY^R2/J^H;e.g6r#alTMA@Fau*B$8]C'+-Kp+I7]-Wo
%'HXq$39+k5h7S(R:3B5/gRg\/kjt\oJ+TchT@IjD]mTYOaj4VO^\NiiIeDgEG@t8iT:B8Y?%;e"G;gm6T']9*0<]7hDU2YDYBJf/
%TAA:/?(^M%^;'LN#bAC6^\ZKYIlRH&U]2,L;d';~>
%AI9_PrivateDataEnd
