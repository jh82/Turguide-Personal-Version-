%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: california-silhouette.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: M
%%CreationDate: 9/24/2015
%%BoundingBox: 0 0 516 723
%%HiResBoundingBox: 0 0 515.7779 723
%%CropBox: 0 0 515.7779 723
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 92 128 8%%BeginData: 3919 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD05FFF827275252A8FD55FF7DFD08F827275252A8FD4EFF27FD0D
%F827F82727527DA8FD47FF52FD16F82727527DFD42FFFD1BF827F852277D
%7DFD3BFF27FD21F827F827277DFD35FFFD26F827FD34FFA8FD26F827FD34
%FF7DFD26F827FD34FFFD27F852FD33FF7D27FD26F87DFD33FF52FD27F8FD
%34FF7DFD26F827FD34FF52FD27F8FD34FF27FD26F827FD33FFFD28F827FD
%32FF27FD28F852FD31FF52FD29F852FD31FF27FD29F8A8FD31FFFD2AF8A8
%FD31FF27FD29F8FD32FFFD29F827FD32FF52FD28F827FD33FF27FD27F827
%FD34FF27FD26F852FD34FF27FD26F87DFD35FFFD26F87DFD35FF52FD25F8
%FD37FFFD24F827FD37FFFD25F8FD36FFA8FD24F827FD36FF52FD24F827FD
%36FFFD25F852FD36FF27FD24F852FD36FFFD25F8A8FD36FF27FD24F8FD37
%FF27FD24F8FD37FF27FD23F827FD36FFA8FD24F827FD37FFFD24F827FD37
%FFA827FD22F852FD38FF52FD22F87DFD39FF27FD21F8A8FD39FF7DFD21F8
%7DFD3AFF27FD21F87DFD39FFA827FD21F8A8FD3AFF27FD21F8FD3AFF27FD
%22F8FD39FF7DFD22F827FD39FF27FD22F827FD37FF27FD05F827FD1EF852
%FD36FF5227F8F8F827A827FD1EF852FD37FF27F8F82727FD1FF827A8FD36
%FF7D27F852FD22F8A8FD36FFA8275227FD21F827FD37FFF8F827FD22F827
%FD36FF27F8FF27FD22F827FD34FF7DF8F8A8FFFD23F852FD33FF7DF8F827
%A852FD23F87DFD33FF27F8F8F87D27FD23F8A8FD32FF27F8F8F827FD25F8
%FD32FFFD2BF8FD31FF27FD2BF8FD30FF52FD2BF827FD30FFFD2CF852FD2F
%FFA8FD2CF852FD30FFA8A8FD29F827A8FD31FF27FD2AF8A8FD30FF27FD2A
%F827FD2FFFA8FD2CF827FD2DFFFD2FF827FD2CFF27FD2FF852FD2BFF27FD
%30F87DFD2AFF27FD31F8A8FD29FF52FD32F8A8FD29FF27FD32F8FD2AFF27
%FD31F827FD29FFA8FD32F827FD29FF27FD32F852FD28FFA8FD33F852FD28
%FFFD34F8A8FD27FF7DFD34F8A8FD27FF27FD33F827A8FD26FF7DFD34F827
%FD28FFFD34F852FD27FFFD35F852FD26FFA82727FD33F87DFD27FFFD35F8
%A8FD25FF52FD36F8FD25FF7DFD37F8FD25FF7D27FD35F827FD25FFA8FD36
%F827FD24FF27FD37F852FD23FF27FD38F852FD22FF27FD38F827A8FD21FF
%27FD3AF8A8FD20FFFD3BF827FD1FFFA8FD3CF827FD1FFF7D27FD3BF8A8FD
%1FFFFD0427FD38F852FD24FFA82727FD34F852FD27FFA87DFD33F87DFD29
%FFFD33F8FD2AFFFD32F8A8FD29FF52FD31F852FD29FFA827FD31F8FD2BFF
%A82727FD2FF87DFD2BFFA8A85227FD2DF8A8FD2EFF27FD2BF852A8FD2EFF
%FD2BF827A8FD2FFF27FD28F827FD32FF7DF87D27FD25F87DFD36FF27FD23
%F827FD37FFA827FD23F8FD39FF27FD21F827FD39FFA87DFD20F827FD3BFF
%52FD1FF87DFD3CFF27FD1DF827FD3DFFA827FD1BF827FD3FFFFD1CF87DFD
%3FFF7DFD1BF852FD3FFFA8FD1BF852FD40FFFD1BF87DFD3FFFA8FD1DF8A8
%FD3DFF7DFD1DF87DFD3EFF52FD1CF852FD3EFFA8FD1BF827FD3FFFA8F827
%F8FD10275227522752277DF87DFD05FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2015-09-24T07:12:20-04:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:ModifyDate>2015-09-24T07:12:21-04:00</xmp:ModifyDate>
         <xmp:MetadataDate>2015-09-24T07:12:21-04:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>184</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAC4AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q/PH86PNXmOb85PM+&#xA;pFp9Jv4r5rdFhkaJ0jtFWCFuSHq0cStUGhrUYqgtJ/PH83dKcNaebNSamwW5ma6QAeCXHqr+GKsz&#xA;0j/nL7847D/eqew1X/mLtVT/AKhTbYqzLSf+c4dYjQDV/Ktvcyd5LS6e3H/ASR3H/EsVZppf/Oaf&#xA;5b3ARdR0rVLGRvtFEgnjX/ZCVH/4TFWZaV/zkx+SeolETzIltK37F1BcQAV8XeMR/wDDYqzTSfPn&#xA;kjWHEek+YNNv5CK+nbXcEr/SqOSMVTzFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq+Bv+cq&#xA;ZLV/zv10QABkjs1uCOhk+qRH/iJAxV5JirsVdirsVdirsVTbSPNvmrRv+OPrN9pv/MJczQf8m2XF&#xA;WZaT/wA5GfnTpahLfzRczL4XaQ3Z/wCCuEkb8cVeg+TP+cufzWu9a0zSLm00zUWvrqG19R4ZIpSZ&#xA;pAmxjlSMH4v5MVfZeKuxV2KuxV2KuxV2KuxV2KuxV2KuxVBa5q1to2i6hq90rNbabbTXc6xgFzHB&#xA;GZGCgkCtF23xV+Z/m7zFdeZPNGq6/dVE2qXU10yk14iVyyoPZFoo9hiqUYq7FXYq7FXYq7FXYq7F&#xA;Wd/kTpb6n+cHlK3XrHqMN0flaH6wfwixV+jOKuxV2KuxV2KuxV2KuxV2KuxV2KuxV5z+fPnvy/5X&#xA;/LrWYNRv47bUdXsbuz0q3ILySzSwMo4ooY8RXdz8INKnfFX544q7FXYq7FXYq7FXYq7FXYq9n/5x&#xA;H0pr3857K5HTTLO7um+TRfVv+xjFX3birsVdirsVdirsVdirsVdirsVdirsVfmt+aHn3U/PXnbUf&#xA;MF+zhZpDHY2zn+4tUJEMIHQcV3anViT3xVimKuxV2KuxV2KuxV2KuxV2KvpL/nCLSmk83+Y9V/Zt&#xA;dPjtSfe5nEn/AGLYq+wsVdirsVdirsVdirsVdirsVdirsVdir81vzP8AIGs+RPON9oOp1kMbmS0u&#xA;6UW4gc1jlHuR9odmqMVYpirsVdirsVdirsVdirsVdir6+/5wg0oxeWfM2rU2u72C1B/5hYjJ1/6O&#xA;cVfS2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV4r/wA5VflrL5u8gfpeyLtqnlgTXcMCk8ZLdwv1lePd&#xA;gsQdfkR3xV8K4q7FXYq7FXYq7FXYq7FXYq+6f+cQdKNl+TkNyR/x07+6ux8lK23/AGL4q9rxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KoTWNTsdK0m91PUHEdhYwS3N3IRULFEhdzT/VBxV+W564q1irsVdi&#xA;rsVdirsVdirsVfop/wA4/wCknS/ya8qWpFDJZC6/6THa58B/v7FXoGKuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV5x/zkXa3tz+SvmqOzdkmFtHKxWoJiinjkmXbs0SsDir88sVdirsVdirsVdirsVdirYxV+&#xA;n3lLSjpHlXRtJIodPsba1p0/uYVj/wCNcVTXFXYq7FXYq7FXYq7FXYq7FXYq7FXYq89/P/WLvSfy&#xA;f8zz21i1+Z7N7OWNTT047seg85oGJEQk5/R2G+KvztxV2KuxV2KuxV2KuxV2Kpr5T0o6v5p0fSRu&#xA;dQvra1p1/vpVj/42xV+n+KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KrLi3guYJLe4jWa3mVo5oZFDI&#xA;6MKMrKaggg0IOKvgD/nIn8rIvy+8+vb6epGhaqhvdMFDSJWciS25GvL0j03rxK13xV5birsVdirs&#xA;VdirsVdirOPyPhspfzd8pC8mS3gTUoJfUkIVecTepGtT3aRVUe5xV+jmKuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxVhX5r/lT5e/Mjy5+idVJt7qBjLpupRqGlt5SKEgGnJG2DpUcvYgEKvzx8xaPJon&#xA;mDU9GklWeTTbqe0edAQrmCRoy6hqGjcaiuKpdirsVdirsVdirsVdir7Q/wCcZPz8/wAUWcXk7zNc&#xA;18x2kdNPvJW+K9hQfZYn7U8a9e7L8XUMcVfQmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV+d357&#xA;m5u/zH1fWW8t3flu01G4cwwXcTxNM8dFln+JVXlI3xsFqAW6nrirHNE8gec9d0O/13R9IuL7StMd&#xA;I724hUNxeQgBVSvOQjkC3AHiDVqDFUhdHjdkdSjoSrKwoQRsQQcVW4q7FXYq7FXYqr2V7d2N5De2&#xA;cz213bOstvcRMUkSRDyVlZaEEEVBGKvvL/nH788LT8xtCNnqLpD5t05B+kLcAKJ4wQouol6UJIDg&#xA;fZbwBXFXreKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KvP/AM4vyb0H8zdFgtL+eWz1HT/VfS76L4hG&#xA;8oUMJIzs6MUWo2O2xGKvi7UJoLX8uJ9F0TWNUuZ9J1KaTXYbZCujyR3Q+rJcI4ZZiCIUT99Go+Og&#xA;A35KvPMVdirsVdirsVdirsVTTyx5l1nyxr1nrui3BttSsZBJBKNx4MrA7MrKSrA9Rir9B/yh/NfR&#xA;PzI8rx6pZFYNSt+MWraaWq9vMR27mN6Eo3fp1BAVZzirsVdirsVdirsVdirsVdirsVdirsVQuqrq&#xA;TaXeLpbRpqZgkFi89TEJyh9IyUqeIeladsVfDP5KeePLnk3W/M/k38wLJW0LzAPqGtTUaRoJrVpF&#xA;FfSJJTlI3xJ8Qbiy9MVYF+ZHlCfyn5y1LSDDLHp4mkl0eeWjC4095G+q3COvwuskYHxL3qOoIxVj&#xA;GKuxV2KuxV2KuxV2Ksr/AC0/MfXvy/8ANNvr2ktyC/Be2TMVjuYCfjielfmpp8JocVfoV5G876D5&#xA;18s2nmHRJvVs7paPG20kMq/bhlXs6Hr2PUVBBxVP8VdirsVdirsVdirsVdirsVdirsVdir8wvN2m&#xA;61pvmjVbHW0MerwXUy3yt3l5ksw8QxNQe43xVAXeo394tut3cy3K2kQt7USuziKFSWWKPkTxQMxI&#xA;UbVJxVD4q7FXYq7FXYq7FXYq7FXpP5H/AJy6n+WvmX1yHufL18VTV7BTuVB2miqQPVjrtXZh8Jp1&#xA;Cr7/ANG1nS9b0q11bSrlLvTr2MS21xGaqyN+ojoQdwdjiqMxV2KuxV2KuxV2KuxV2KuxV2KuxV4p&#xA;+dP/ADjPpf5ia6nmGx1P9Dau0aQ3pMImiuBGOKO1GjZXVaLWpqABQdcVfJH5r/llqn5c+bG8v6hd&#xA;Q3haFLq2uYKgPDIzKpZDujVQ1U/qIxVhuKuxV2KuxV2KuxV2KuxV2Kvb/wDnHD8+ZvI2qr5f16Yv&#xA;5Rv5N3apNjO3+7lpU+m3+7F/2Q3qGVfccUscsaSxOJIpAGR1IKspFQQR1BxVdirsVdirsVdirsVd&#xA;irsVdirsVSLz35kufLHk/VvMNtZrqEmlW7XRs3m+rCRI/ikHq8JaEJUqOJqdu+Kvz5/Nf8yL38xP&#xA;OVx5kurVbFZI44LazVzKIoohsvMheRJJJPEdemKsOxV2KuxV2KuxV2KuxV2KuxV2Kvp7/nFr8/Gs&#xA;5bbyB5pua2crCLQL+U/3TnYWkjE/YY/3X8p+HoRxVfW2KuxV2KuxV2KuxV2KuxV2KuxVjv5jaHea&#xA;95C8w6NYqHvb/T7mC1RiFDSvEwjUs1AAzUFT0xV+a+paZqOl38+n6lbS2d9bMUuLWdGjkRh2ZWAI&#xA;xVC4q7FXYq7FXYq7FXYq7FXYq7FXYq+zv+cYvz7/AMTWcXkzzNc18xWkdNNvJWHK9hQfYYn7U0aj&#xA;5uu/UMSq+hsVdirsVdirsVdirsVdirsVdir5c/5zO/LiWaDT/PmnwR8bZfqWtyBuMhVmUWsnHo1C&#xA;zIx+19nqB8Kr5OxV2KuxV2KuxV2KuxV2KuxV2KuxVWs7y7sruC8s5nt7u2kWW3uImKPHIh5K6sKE&#xA;FSKgjFX3n/zj7+d9p+Yug/UtQdIfNmmxj9IW4+ETxiii6iXwJIDgfZbwBXFXreKuxV2KuxV2KuxV&#xA;2KuxV2KpP5w8q6V5s8saj5d1VC1jqUJhlK05IahkkStRyjdVda9xir83fN/lLXPKfmC70PWrWS1v&#xA;LV2UCRSBIgJCyRnoyPSoYbYqkuKuxV2KuxV2KuxV2KuxV2KuxV2Kpp5Y8y6z5Y16z13Rbg22pWMg&#xA;kglG48GVgdmVlJVgeoxV+g/5Q/mvon5keV49UsisGpW/GLVtNLVe3mI7dzG9CUbv06ggKs5xV2Ku&#xA;xV2KuxV2KuxV2KuxV4//AM5D/kdqH5m2OlzaRfw2eraS0qxpd8xbyRT8OfJo1kdWUxilFPfFXwfP&#xA;C8E8kL05xMUam4qpoaYqp4q7FXYq7FXYq7FXYq7FXYq7FXYqyv8ALT8x9e/L/wA02+vaS3IL8F7Z&#xA;MxWO5gJ+OJ6V+amnwtQ4q/QvyN520Hzr5Zs/MOiTerZ3S/FG1BJDKv24ZV/ZdD18eoqCDiqfYq7F&#xA;XYq7FXYq7FXYq7FUB5h0ptX0DUtJW4ezbULWe1W7i/vIjPG0fqJQj4k5VG+Kvz4/Nz8ntd/LLVLO&#xA;y1W8tb1dQSSW1mtS9eEb8f3iOqlWIIPcdgTTFWA4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXpX5HfnL&#xA;qf5a+ZPWYPc+Xr4qmr2CmpKg7TQgkASx9q7MKg9iFX3/AKPq+mazpdrqul3KXen3sazW1zGaq6MK&#xA;g+I9wdx0OKovFXYq7FXYq7FXYq7FXYq+IP8AnMhn/wCVtRK1zJMo0y3KQuvFIQXkqkZ/aBPxk+LE&#xA;dsVeFYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq9x/5xu/PiXyPqi+XdemLeUdQkr6jbmxnfb1l7+k&#xA;3+7F7faG9Qyr7hiljljSWJxJFIAyOpBVlIqCCOoOKrsVdirsVdirsVdirsVfHn/OWf5U+aE80/41&#xA;iuW1Wz1eaKyg0+KKRprYxwDiihealG9N22puehqTir5+1Ty9r+kMq6rpt1YM4qouYZIa18OYXFUv&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV9d/84bfmTrOq2uo+S9UuPrMOkwJc6QXNZEt+fpyRV6lE&#xA;Zk4fy1p0oAq+mcVdirsVdirsVdirsVdiqy4t4LmCS3uI1mt5laOaGRQyOjCjKymoIINCDiryzzD/&#xA;AM4v/k1rNWGjHTJSWJl0+V4d2FPsEvHt1Hw4q+T/AM7vyQ1r8tNZBVpL/wAt3Z/3H6qUIAY1P1ec&#xA;j4RKoUnbZh8QpuqqvMcVdirsVdirsVdirsVdirsVdirsVZj+VH5k6j+XfnCDzDZW8d2ODW11bS1A&#xA;eCRlLhWXdX+EcW3+R6Yq/SGKWOWNJYnEkUgDI6kFWUioII6g4quxV2KuxV2KuxV2KuxV2KuxVh35&#xA;sflppn5jeT5vLt9ObR/US5sr1V9QwXEdQr8OScxwdlIqNj2O+KvkTzr/AM4n/mnoF2/6Ktk8xady&#xA;AiurMqktDX+8t5G5Kdt+JYe+KvLfMXlPzN5avFs/MGl3Wl3LgtHHdRNFzUGnJCwAZa912xVKcVdi&#xA;rsVdirsVdirsVdirsVdir7G/5xv/AOcidM1e00X8v9btjZ6va20dlpd7GeUFyltHxRHB+KOX00Hi&#xA;rGv2TRSq+jsVdirsVdirsVdirsVdirsVdirsVfNv/Oa2g61feXfL2p2dg1xp+ly3R1G9Sh+rif0U&#xA;iDCvLjIwO9KVAr1GKvlXzL5R8zeV7uGz8wabNptzcQpcwRzrxLxP9lh+o+B2O+KpPirsVdirsVdi&#xA;rsVdirsVTnyf5W1TzX5n03y9picrzUp0hRqFlRSfjlfjU8I0q7ewxV9wflD/AM44eU/y7vH1U3D6&#xA;1rbxrGt5cxRqkJBJZreP4zGW2BJYmg67nFXreKuxV2KuxV2KuxV2KuxV2KuxV2KuxVgX5t/k55Y/&#xA;MrR0tdT5Wup2iv8AozVIt3hZ6EhkqFkRioqp+gg74q+EfP8A+WfnLyHqS2PmSwa2Exk+p3SkPBcL&#xA;G3EtFIPoPE0YAioFcVYtirsVdirsVdirsVdir2j/AJxHtZZvzmspUUsltZ3ckjA0CgxGME77/E4G&#xA;KvuzFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxD81fy50v8wPJl7oF6FSdgZdNuyKmC6QH05OhP&#xA;Hfi4HVSRir849S06803UbrTr6Iw3tlM9vcwtSqSxMUdTTwYUxVDYq7FXYq7FXYq7FX3P/wA4zfkq&#xA;vkfQW1/VQknmTWYl3Q8lt7NqOkSnuzkB3PyHapVe24q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq/Pj/nJW0tbT87/ADRFagLG0tvM1Kf3k1pDLKdv+LHbFXmWKuxV2KuxV2KuxV+hn5H/AJieRvMn&#xA;lLTtE8uai91c6Bp1lbXkE8TwzKEhWIMQw4t8SEHgxAPzFVXpGKuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KvjP/nLb8vtL07znaanoWn6hLqOtrJd6rIA89ryDBV9M0Zlc0JZeXEDjQDFXhSeWPMsg&#xA;Jj0m9cDqVt5T+pcVRMPkTzvOnODy9qcqVpySzuGFfCoTFVYflz+YBFf8Nap9NnOP+NMVRC/lT+aL&#xA;qGTyfrbIwqrLp12QQehBEeKtj8pfzUJAHk3XKnbfTbsD7zHiqIh/Jj82ppUiTyfq4ZyFBezmjWpN&#xA;N2dVUD3JxV9A/wDOHH5b6xpd1rvmvUxLZSqZNEGlzxNHKJEaKaWSQOAV4kKgHjyr0xV9QYq//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Corel PDF Engine Version 16.1.0.843</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">pattern</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:3B397709AD62E5119FE2AEAA7FB7F5E1</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:3B397709AD62E5119FE2AEAA7FB7F5E1</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:024c163e-0147-4f70-9a62-07014dc329cf</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3ab09a31-eb43-4598-951e-a7f821dc6376</stRef:instanceID>
            <stRef:documentID>uuid:024c163e-0147-4f70-9a62-07014dc329cf</stRef:documentID>
            <stRef:originalDocumentID>uuid:024c163e-0147-4f70-9a62-07014dc329cf</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3B397709AD62E5119FE2AEAA7FB7F5E1</stEvt:instanceID>
                  <stEvt:when>2015-09-24T07:12:21-04:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -723 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 723 li
515.778 723 li
515.778 0 li
cp
clp
[1 0 0 1 0 0 ]ct
305.323 651.383 mo
307.938 654.321 312.495 660.437 315.852 666.133 cv
319.209 671.829 321.369 677.105 322.507 682.741 cv
323.647 688.377 323.766 694.373 323.167 698.21 cv
322.567 702.048 321.249 703.727 321.369 704.686 cv
321.488 705.646 323.046 705.885 324.786 706.364 cv
326.525 706.845 328.443 707.564 329.583 708.763 cv
330.721 709.962 331.082 711.641 330.482 712.84 cv
329.882 714.039 328.323 714.759 327.543 715.958 cv
326.764 717.157 326.764 718.836 327.423 719.675 cv
328.083 720.514 329.403 720.514 353.505 720.095 cv
377.609 719.675 424.496 718.836 447.939 718.416 cv
471.382 717.996 471.382 717.996 471.413 717.622 cv
471.443 717.247 471.502 716.498 471.518 715.823 cv
471.533 715.148 471.502 714.549 472.102 714.894 cv
472.702 715.239 473.931 716.527 474.68 717.397 cv
475.43 718.267 475.7 718.716 476.134 718.686 cv
476.569 718.656 477.168 718.146 477.798 718.521 cv
478.428 718.896 479.087 720.155 479.537 720.859 cv
479.987 721.564 480.227 721.714 480.452 721.174 cv
480.676 720.635 480.886 719.405 481.066 718.102 cv
481.246 716.797 481.396 715.419 481.666 714.549 cv
481.936 713.68 482.325 713.32 483.224 712.436 cv
484.124 711.551 485.533 710.143 486.357 708.942 cv
487.182 707.744 487.421 706.755 487.091 705.945 cv
486.762 705.136 485.863 704.506 485.743 703.816 cv
485.623 703.127 486.283 702.378 486.387 701.658 cv
486.493 700.938 486.042 700.249 485.623 699.409 cv
485.204 698.57 484.813 697.581 484.289 696.861 cv
483.764 696.142 483.105 695.692 482.175 695.572 cv
481.246 695.452 480.047 695.662 479.252 695.887 cv
478.458 696.112 478.068 696.352 477.723 695.992 cv
477.378 695.632 477.079 694.673 476.554 694.554 cv
476.03 694.434 475.28 695.152 474.95 695.183 cv
474.621 695.213 474.71 694.553 474.786 693.924 cv
474.86 693.294 474.92 692.694 474.515 692.26 cv
474.111 691.825 473.242 691.555 473.391 690.416 cv
473.542 689.276 474.71 687.268 475.325 685.844 cv
475.939 684.42 476 683.58 475.819 682.831 cv
475.639 682.081 475.219 681.422 475.309 680.612 cv
475.4 679.803 475.999 678.844 475.37 678.185 cv
474.74 677.524 472.881 677.165 472.611 676.625 cv
472.341 676.086 473.661 675.366 474.2 674.377 cv
474.74 673.388 474.5 672.128 474.38 671.109 cv
474.26 670.09 474.26 669.311 475.099 669.19 cv
475.939 669.07 477.618 669.61 478.487 669.221 cv
479.357 668.831 479.417 667.512 479.806 666.463 cv
480.196 665.413 480.916 664.634 482.504 662.895 cv
484.093 661.156 486.551 658.458 487.391 656.27 cv
488.231 654.081 487.451 652.402 487.51 651.323 cv
487.571 650.244 488.47 649.765 488.8 648.984 cv
489.129 648.205 488.89 647.126 488.77 645.447 cv
488.65 643.769 488.65 641.49 488.83 639.781 cv
489.01 638.072 489.37 636.934 489.129 635.765 cv
488.89 634.595 488.05 633.396 488.44 632.197 cv
488.83 630.998 490.449 629.799 491.409 628.72 cv
492.368 627.64 492.667 626.681 492.847 625.512 cv
493.027 624.342 493.087 622.963 494.466 621.764 cv
495.845 620.564 498.543 619.546 500.552 618.736 cv
502.56 617.927 503.879 617.327 504.779 617.387 cv
505.678 617.447 506.158 618.166 506.818 617.687 cv
507.477 617.207 508.316 615.528 508.917 613.97 cv
509.515 612.41 509.875 610.972 510.175 610.432 cv
510.475 609.893 510.715 610.252 511.554 610.462 cv
512.393 610.672 513.833 610.731 514.186 610.132 cv
514.541 609.533 513.809 608.273 513.059 606.954 cv
512.31 605.636 511.542 604.256 510.409 603.566 cv
509.276 602.877 507.777 602.877 506.937 602.308 cv
506.098 601.738 505.918 600.599 505.289 600.148 cv
504.659 599.699 503.58 599.939 502.65 599.43 cv
501.721 598.92 500.941 597.661 500.222 596.941 cv
499.502 596.222 498.843 596.042 498.543 595.143 cv
498.244 594.243 498.303 592.625 498.393 591.545 cv
498.483 590.466 498.603 589.927 498.124 589.117 cv
497.644 588.308 496.565 587.229 495.995 584.89 cv
495.425 582.552 495.366 578.954 494.676 577.035 cv
493.987 575.117 492.668 574.877 491.349 574.638 cv
490.03 574.397 488.71 574.157 488.291 572.479 cv
487.872 570.801 488.351 567.683 488.051 566.123 cv
487.751 564.564 486.672 564.564 486.132 562.706 cv
485.593 560.847 485.593 557.13 485.233 555.15 cv
484.874 553.172 484.154 552.933 477.978 545.978 cv
471.802 539.022 460.17 525.353 416.342 474.148 cv
372.513 422.944 296.487 334.207 258.219 289.673 cv
219.951 245.14 219.441 244.81 219.261 244.495 cv
219.082 244.18 219.231 243.88 219.457 242.472 cv
219.681 241.063 219.981 238.544 224.403 203.364 cv
228.825 168.184 237.369 100.342 241.731 66.6309 cv
246.093 32.9194 246.273 33.3394 245.869 33.459 cv
245.464 33.5786 244.475 33.3989 238.044 32.4399 cv
231.614 31.4805 219.742 29.7417 184.007 24.4077 cv
148.272 19.0742 88.6748 10.146 59.0186 5.70313 cv
29.3618 1.25977 29.647 1.30273 29.8115 1.62988 cv
29.9766 1.95703 30.0215 2.56885 29.9087 3.86426 cv
29.7964 5.15967 29.5264 7.13818 28.9419 8.80176 cv
28.3569 10.4658 27.4575 11.8145 26.7085 12.6992 cv
25.959 13.583 25.3594 14.0034 25.5093 14.8726 cv
25.6592 15.7422 26.5586 17.0605 27.458 18.5151 cv
28.3569 19.9688 29.2563 21.5581 29.9458 24.1807 cv
30.6353 26.8042 31.1147 30.4614 30.7852 34.7183 cv
30.4556 38.9751 29.3159 43.8315 28.2368 47.3696 cv
27.1572 50.9063 26.1387 53.125 25.7485 54.8037 cv
25.3589 56.4824 25.5986 57.6221 24.9692 58.4912 cv
24.3394 59.3608 22.8408 59.9604 22.1211 60.9199 cv
21.4014 61.8789 21.4614 63.1982 21.7314 65.0566 cv
22.0015 66.9155 22.481 69.314 22.3311 71.4121 cv
22.1812 73.5107 21.4014 75.3096 20.9521 76.7188 cv
20.5024 78.1274 20.3823 79.147 20.6821 80.1362 cv
20.9819 81.1255 21.7017 82.085 21.7017 83.0439 cv
21.7017 84.0034 20.9819 84.9629 20.1426 85.2026 cv
19.3027 85.4424 18.3442 84.9629 17.5645 85.2324 cv
16.7852 85.502 16.1855 86.522 14.8364 87.8408 cv
13.4873 89.1597 11.3887 90.7788 9.83008 92.3379 cv
8.271 93.8965 7.25146 95.3955 5.94189 97.6436 cv
4.63232 99.8926 3.03223 102.89 2.23242 104.779 cv
1.43262 106.667 1.43262 107.447 1.63281 108.796 cv
1.8335 110.145 2.23438 112.063 2.23438 113.893 cv
2.23438 115.721 1.8335 117.46 1.63281 118.629 cv
1.43262 119.798 1.43262 120.398 1.81299 121.567 cv
2.19287 122.736 2.95361 124.475 4.11377 125.883 cv
5.27295 127.292 6.83203 128.372 7.52148 129.541 cv
8.21143 130.71 8.03125 131.969 8.84033 132.779 cv
9.65039 133.588 11.4487 133.948 12.5283 134.607 cv
13.6074 135.267 13.9673 136.226 13.6675 137.186 cv
13.3677 138.145 12.4082 139.104 12.4082 139.943 cv
12.4082 140.783 13.3677 141.502 14.5366 142.582 cv
15.7061 143.661 17.085 145.1 17.5347 146.209 cv
17.9844 147.318 17.5049 148.098 17.8647 148.637 cv
18.2241 149.177 19.4233 149.477 19.8135 150.287 cv
20.2031 151.096 19.7832 152.415 20.2627 153.374 cv
20.7427 154.333 22.1216 154.933 22.9907 157.092 cv
23.8604 159.25 24.2197 162.968 24.3398 165.876 cv
24.46 168.784 24.3398 170.882 23.6504 173.311 cv
22.9609 175.738 21.7021 178.497 20.5923 180.835 cv
19.4834 183.173 18.5244 185.092 18.3447 187.011 cv
18.1646 188.929 18.7637 190.848 19.4834 195.015 cv
20.2031 199.182 21.0425 205.598 21.2822 209.255 cv
21.522 212.913 21.1621 213.812 20.353 214.501 cv
19.5435 215.191 18.2842 215.67 17.6846 216.3 cv
17.085 216.93 17.145 217.709 17.3252 218.758 cv
17.5049 219.808 17.8047 221.126 18.4644 222.026 cv
19.1235 222.925 20.1431 223.405 20.5928 223.885 cv
21.0425 224.364 20.9224 224.844 21.4624 225.773 cv
22.002 226.703 23.2007 228.082 24.04 228.741 cv
24.8794 229.401 25.3594 229.341 26.019 230.42 cv
26.6782 231.499 27.5176 233.718 28.3569 235.007 cv
29.1963 236.296 30.0361 236.656 30.7554 237.525 cv
31.4751 238.395 32.0742 239.773 32.584 241.272 cv
33.0933 242.771 33.5132 244.39 34.0225 245.739 cv
34.5322 247.088 35.1318 248.167 36.0913 249.516 cv
37.0508 250.865 38.3691 252.484 39.8687 254.013 cv
41.3677 255.542 43.0464 256.981 44.3652 258 cv
45.6846 259.02 46.6436 259.619 47.3032 259.919 cv
47.9629 260.219 48.3223 260.219 48.6372 260.684 cv
48.9521 261.148 49.2217 262.078 49.2817 263.142 cv
49.3418 264.206 49.1919 265.405 49.0571 266.5 cv
48.9224 267.594 48.8022 268.583 48.937 269.602 cv
49.0718 270.621 49.4614 271.67 50.1665 272.885 cv
50.8706 274.099 51.8901 275.478 52.5498 276.303 cv
53.209 277.127 53.5088 277.396 53.6738 278.026 cv
53.8384 278.655 53.8687 279.645 53.7637 280.5 cv
53.6587 281.354 53.4189 282.073 52.8042 282.673 cv
52.1895 283.272 51.2002 283.752 50.2261 284.337 cv
49.2515 284.921 48.2925 285.611 47.7827 286.451 cv
47.2729 287.291 47.2129 288.28 47.4531 288.954 cv
47.6929 289.629 48.2324 289.988 49.1318 290.019 cv
50.0313 290.048 51.29 289.749 52.8643 289.779 cv
54.438 289.809 56.3267 290.168 57.4063 290.798 cv
58.4854 291.427 58.7549 292.327 58.7251 293.226 cv
58.6948 294.125 58.3652 295.025 58.1855 295.879 cv
58.0054 296.734 57.9756 297.543 58.9199 298.397 cv
59.8643 299.252 61.7827 300.151 63.0273 300.796 cv
64.2715 301.441 64.8408 301.831 65.7402 302.745 cv
66.6392 303.659 67.8687 305.098 68.9028 305.878 cv
69.937 306.657 70.7769 306.777 71.5259 306.357 cv
72.2754 305.938 72.9355 304.979 73.2651 304.004 cv
73.5947 303.03 73.5947 302.041 73.9844 301.081 cv
74.374 300.122 75.1538 299.192 75.1387 298.113 cv
75.1235 297.034 74.314 295.805 74.2544 294.636 cv
74.1943 293.466 74.8838 292.357 75.498 291.353 cv
76.1128 290.349 76.6528 289.449 77.0571 288.82 cv
77.4619 288.19 77.7319 287.831 78.6162 287.456 cv
79.5005 287.081 80.9995 286.691 82.1387 286.511 cv
83.2778 286.332 84.0571 286.362 84.481 286.628 cv
84.9038 286.894 84.9717 287.396 85.2188 288.104 cv
85.4663 288.813 85.8936 289.727 86.4521 290.248 cv
87.0103 290.768 87.6997 290.896 88.6255 290.491 cv
89.5508 290.086 90.7124 289.149 91.4546 288.827 cv
92.1963 288.505 92.5186 288.797 93.0918 289.378 cv
93.6655 289.959 94.4893 290.828 94.2871 291.825 cv
94.0845 292.822 92.8555 293.946 91.5688 294.438 cv
90.2827 294.928 88.939 294.786 88.2417 295.07 cv
87.5444 295.355 87.4946 296.067 87.1548 296.513 cv
86.8145 296.959 86.1855 297.139 85.4653 296.989 cv
84.7461 296.839 83.937 296.359 83.3521 296.359 cv
82.7676 296.359 82.4082 296.839 81.8984 297.409 cv
81.3887 297.978 80.729 298.638 80.0093 299.087 cv
79.29 299.537 78.5107 299.777 78.2256 300.077 cv
77.9409 300.376 78.1509 300.736 78.9756 301.321 cv
79.7998 301.905 81.2388 302.715 82.3179 303.135 cv
83.3975 303.555 84.1167 303.584 84.5215 303.974 cv
84.9263 304.364 85.0161 305.113 84.7012 305.916 cv
84.3867 306.717 83.6675 307.571 83.0532 308.133 cv
82.4385 308.696 81.9287 308.965 81.8838 309.19 cv
81.8389 309.415 82.2583 309.595 82.4834 309.94 cv
82.7085 310.285 82.7383 310.794 83.0977 311.409 cv
83.458 312.023 84.147 312.743 84.7319 313.013 cv
85.3164 313.283 85.7964 313.103 85.9761 313.388 cv
86.1558 313.672 86.0361 314.421 86.186 315.201 cv
86.3354 315.98 86.7554 316.79 87.1753 317.225 cv
87.5947 317.659 88.0146 317.72 88.2246 318.004 cv
88.4346 318.289 88.4346 318.799 88.6743 319.383 cv
88.9141 319.968 89.3936 320.627 90.0229 321.002 cv
90.6523 321.377 91.4321 321.467 91.9565 321.752 cv
92.4814 322.036 92.751 322.516 92.9761 322.936 cv
93.2007 323.355 93.3809 323.715 93.7031 324.315 cv
94.0254 324.915 94.4902 325.754 94.6104 326.796 cv
94.73 327.838 94.5054 329.082 94.4453 329.907 cv
94.3853 330.731 94.4902 331.136 94.8647 331.788 cv
95.2397 332.439 95.8843 333.339 96.7539 334.014 cv
97.623 334.688 98.7173 335.138 99.2944 335.498 cv
99.8716 335.857 99.9312 336.127 100.111 336.771 cv
100.292 337.417 100.591 338.436 100.554 339.627 cv
100.517 340.819 100.142 342.183 99.8643 342.91 cv
99.5874 343.637 99.4077 343.727 98.3135 343.487 cv
97.2192 343.247 95.2104 342.678 93.8467 342.063 cv
92.4824 341.449 91.7627 340.789 91.1631 339.68 cv
90.564 338.571 90.084 337.012 89.4844 336.098 cv
88.8848 335.183 88.1655 334.913 87.0264 334.449 cv
85.8867 333.984 84.3281 333.325 83.4438 332.53 cv
82.5591 331.735 82.3496 330.806 81.7051 329.667 cv
81.0601 328.528 79.981 327.179 79.0366 326.25 cv
78.0923 325.32 77.2827 324.811 76.998 324.241 cv
76.7134 323.671 76.9531 323.042 77.1182 322.127 cv
77.2827 321.212 77.3726 320.014 77.418 318.935 cv
77.4624 317.855 77.4624 316.896 77.8521 316.222 cv
78.2422 315.547 79.0215 315.157 79.3364 314.37 cv
79.6514 313.583 79.5015 312.399 79.1572 311.47 cv
78.8125 310.541 78.2725 309.866 77.3359 309.484 cv
76.3994 309.102 75.0654 309.012 73.8887 309.222 cv
72.7119 309.432 71.6929 309.941 70.9731 310.878 cv
70.2539 311.815 69.834 313.179 69.6768 314.806 cv
69.519 316.432 69.624 318.32 69.6538 319.325 cv
69.6841 320.329 69.6392 320.449 69.564 320.861 cv
69.4888 321.273 69.3843 321.978 68.9043 322.877 cv
68.4243 323.776 67.5703 324.871 67.2031 325.973 cv
66.8359 327.075 66.9556 328.184 67.3301 328.918 cv
67.7051 329.653 68.3345 330.012 68.9043 330.372 cv
69.4736 330.731 69.9834 331.092 70.4331 331.856 cv
70.8828 332.621 71.2725 333.79 71.3628 335.469 cv
71.4521 337.147 71.2427 339.335 70.8379 341.674 cv
70.4331 344.013 69.8335 346.501 69.519 348.36 cv
69.2041 350.218 69.1738 351.447 70.0283 353.231 cv
70.8833 355.015 72.6221 357.353 73.7456 359.227 cv
74.8701 361.101 75.3799 362.51 76.0693 364.038 cv
76.7588 365.567 77.6284 367.217 78.8276 368.535 cv
80.0264 369.854 81.5557 370.844 82.9795 371.443 cv
84.4033 372.043 85.7227 372.253 87.1167 372.192 cv
88.5107 372.133 89.9795 371.803 91.1787 371.863 cv
92.3779 371.923 93.3071 372.373 94.1016 372.643 cv
94.896 372.912 95.5557 373.002 96.0356 373.347 cv
96.5146 373.691 96.8149 374.291 97.2944 374.846 cv
97.7739 375.4 98.4336 375.91 99.0034 376.3 cv
99.5728 376.689 100.052 376.959 100.218 377.56 cv
100.382 378.158 100.232 379.088 100.067 380.048 cv
99.9028 381.007 99.7231 381.996 99.7832 382.851 cv
99.8433 383.705 100.143 384.425 99.9634 385.159 cv
99.7832 385.894 99.1235 386.643 98.9141 387.543 cv
98.7041 388.441 98.9438 389.491 98.9438 390.36 cv
98.9438 391.23 98.7041 391.919 98.1343 392.834 cv
97.5649 393.748 96.665 394.888 95.811 395.637 cv
94.9565 396.387 94.1475 396.746 92.918 396.851 cv
91.689 396.956 90.04 396.806 88.8706 396.716 cv
87.7017 396.626 87.0122 396.596 86.6523 396.761 cv
86.293 396.926 86.2627 397.286 86.5176 397.705 cv
86.7725 398.125 87.312 398.604 87.9419 399.114 cv
88.5713 399.624 89.2905 400.163 89.6206 400.703 cv
89.9502 401.243 89.8901 401.782 89.5903 402.308 cv
89.2905 402.832 88.751 403.342 88.4658 403.761 cv
88.1816 404.181 88.1514 404.511 88.2114 406.609 cv
88.2715 408.707 88.4214 412.575 88.4658 415.318 cv
88.5112 418.061 88.4512 419.68 88.9009 420.489 cv
89.3501 421.299 90.3096 421.299 90.8496 421.928 cv
91.3887 422.558 91.5088 423.816 92.4385 424.566 cv
93.3677 425.315 95.1064 425.556 97.0249 427.444 cv
98.9434 429.333 101.042 432.87 102.031 435.748 cv
103.021 438.627 102.901 440.845 103.111 441.864 cv
103.32 442.884 103.86 442.703 104.819 443.153 cv
105.779 443.603 107.158 444.682 107.757 446.57 cv
108.357 448.46 108.177 451.157 108.507 452.717 cv
108.836 454.275 109.676 454.695 110.231 455.1 cv
110.785 455.505 111.055 455.895 111.28 456.733 cv
111.505 457.573 111.685 458.862 112.299 459.521 cv
112.914 460.182 113.963 460.211 114.473 460.751 cv
114.982 461.291 114.952 462.34 115.118 463.688 cv
115.282 465.038 115.642 466.687 116.256 467.841 cv
116.871 468.995 117.74 469.655 119.12 470.464 cv
120.499 471.273 122.387 472.232 123.497 472.832 cv
124.606 473.432 124.936 473.672 125.16 474.57 cv
125.385 475.471 125.505 477.029 125.431 478.093 cv
125.355 479.157 125.086 479.728 125.041 480.222 cv
124.996 480.717 125.176 481.136 125.82 482.051 cv
126.464 482.965 127.574 484.374 128.833 485.363 cv
130.092 486.353 131.501 486.922 132.865 487.162 cv
134.229 487.401 135.548 487.312 136.328 487.401 cv
137.107 487.491 137.347 487.762 137.572 488.766 cv
137.797 489.77 138.006 491.509 138.126 493.067 cv
138.247 494.627 138.276 496.006 137.602 497.175 cv
136.927 498.344 135.548 499.303 134.874 500.157 cv
134.199 501.012 134.229 501.761 134.394 502.87 cv
134.559 503.979 134.859 505.448 135.159 506.377 cv
135.458 507.307 135.758 507.697 136.328 507.832 cv
136.897 507.967 137.737 507.847 138.426 508.281 cv
139.116 508.716 139.656 509.705 140.285 509.795 cv
140.915 509.885 141.634 509.076 142.368 508.611 cv
143.103 508.146 143.853 508.026 144.272 508.312 cv
144.692 508.596 144.782 509.285 145.082 509.87 cv
145.381 510.455 145.891 510.935 146.371 511.399 cv
146.851 511.864 147.3 512.313 147.525 513.107 cv
147.75 513.902 147.75 515.041 147.54 516.66 cv
147.33 518.279 146.91 520.378 146.116 522.116 cv
145.322 523.855 144.152 525.234 143.718 526.313 cv
143.283 527.393 143.583 528.172 144.167 528.892 cv
144.751 529.61 145.621 530.271 145.996 531.124 cv
146.37 531.979 146.25 533.028 146.025 533.912 cv
145.8 534.797 145.471 535.517 145.066 536.026 cv
144.661 536.536 144.182 536.836 144.122 537.675 cv
144.062 538.515 144.421 539.894 144.781 540.928 cv
145.141 541.962 145.501 542.651 145.186 543.386 cv
144.871 544.12 143.882 544.9 143.118 546.219 cv
142.353 547.538 141.813 549.396 141.634 550.61 cv
141.454 551.825 141.634 552.395 142.323 552.68 cv
143.013 552.964 144.212 552.964 144.992 552.964 cv
145.771 552.964 146.13 552.964 146.445 553.264 cv
146.76 553.563 147.03 554.163 147.405 554.568 cv
147.779 554.973 148.259 555.183 148.739 555.317 cv
149.218 555.452 149.698 555.512 149.938 555.813 cv
150.177 556.112 150.177 556.651 150.133 557.551 cv
150.087 558.45 149.998 559.71 150.058 560.624 cv
150.118 561.538 150.327 562.107 150.717 562.317 cv
151.107 562.527 151.676 562.377 153.416 562.107 cv
155.154 561.838 158.062 561.448 160.071 561.238 cv
162.079 561.028 163.188 560.998 164.283 561.193 cv
165.377 561.389 166.456 561.808 167.76 562.033 cv
169.064 562.258 170.593 562.287 171.897 562.572 cv
173.201 562.857 174.281 563.396 175.24 563.441 cv
176.199 563.486 177.039 563.037 177.624 563.112 cv
178.208 563.187 178.538 563.786 179.212 564.596 cv
179.887 565.405 180.906 566.425 182.54 567.114 cv
184.174 567.804 186.422 568.163 187.921 567.999 cv
189.42 567.834 190.169 567.145 190.694 567.174 cv
191.219 567.204 191.519 567.953 192.058 568.643 cv
192.598 569.332 193.377 569.962 194.606 570.217 cv
195.835 570.472 197.514 570.353 198.668 570.277 cv
199.823 570.202 200.452 570.172 201.562 570.592 cv
202.67 571.012 204.259 571.881 205.608 572.705 cv
206.958 573.529 208.067 574.31 209.446 575.523 cv
210.825 576.737 212.474 578.387 213.358 579.676 cv
214.243 580.964 214.362 581.894 214.707 582.253 cv
215.052 582.613 215.622 582.403 216.611 582.778 cv
217.6 583.153 219.009 584.111 219.489 584.966 cv
219.968 585.82 219.519 586.57 219.219 587.365 cv
218.919 588.159 218.77 588.998 219.369 590.407 cv
219.968 591.816 221.318 593.795 222.292 595.174 cv
223.266 596.553 223.865 597.333 224.705 597.572 cv
225.544 597.813 226.624 597.513 227.358 597.407 cv
228.093 597.303 228.482 597.393 229.772 598.157 cv
231.061 598.922 233.25 600.36 234.778 601.185 cv
236.307 602.01 237.176 602.22 238.121 602.249 cv
239.065 602.279 240.084 602.13 240.639 602.265 cv
241.194 602.399 241.284 602.819 241.479 603.254 cv
241.673 603.688 241.973 604.138 242.377 604.272 cv
242.782 604.408 243.292 604.228 244.926 604.152 cv
246.56 604.078 249.318 604.108 251.671 604.453 cv
254.025 604.798 255.973 605.457 257.322 606.026 cv
258.671 606.597 259.421 607.076 260.185 608.021 cv
260.95 608.965 261.73 610.373 262.165 612.396 cv
262.599 614.42 262.689 617.059 262.45 618.933 cv
262.209 620.806 261.64 621.915 261.416 622.89 cv
261.19 623.863 261.31 624.703 261.371 625.362 cv
261.43 626.022 261.43 626.502 261.85 626.562 cv
262.27 626.622 263.109 626.262 263.949 626.472 cv
264.788 626.682 265.627 627.461 266.212 628.436 cv
266.796 629.41 267.126 630.579 267.741 631.089 cv
268.355 631.599 269.255 631.448 269.81 630.908 cv
270.364 630.369 270.574 629.439 270.918 628.601 cv
271.263 627.761 271.743 627.012 272.852 626.592 cv
273.961 626.172 275.701 626.082 277.154 626.412 cv
278.609 626.741 279.778 627.491 280.647 628.391 cv
281.516 629.29 282.085 630.339 282.43 631.418 cv
282.775 632.497 282.895 633.607 283.36 634.491 cv
283.825 635.376 284.633 636.035 285.803 636.814 cv
286.972 637.594 288.501 638.493 290.105 639.692 cv
291.709 640.892 293.388 642.391 294.587 643.694 cv
295.787 644.999 296.506 646.107 297.076 647.007 cv
297.645 647.906 298.065 648.596 298.754 648.881 cv
299.444 649.165 300.403 649.046 301.219 648.865 cv
302.036 648.686 302.708 648.445 305.323 651.383 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.75021 .679683 .670222 .90164 cmyk
ef
2.9999 lw
1 lc
1 lj
22.9256 ml
[] 0 dsh
true sadj
305.323 651.383 mo
307.938 654.321 312.495 660.437 315.852 666.133 cv
319.209 671.829 321.369 677.105 322.507 682.741 cv
323.647 688.377 323.766 694.373 323.167 698.21 cv
322.567 702.048 321.249 703.727 321.369 704.686 cv
321.488 705.646 323.046 705.885 324.786 706.364 cv
326.525 706.845 328.443 707.564 329.583 708.763 cv
330.721 709.962 331.082 711.641 330.482 712.84 cv
329.882 714.039 328.323 714.759 327.543 715.958 cv
326.764 717.157 326.764 718.836 327.423 719.675 cv
328.083 720.514 329.403 720.514 353.505 720.095 cv
377.609 719.675 424.496 718.836 447.939 718.416 cv
471.382 717.996 471.382 717.996 471.413 717.622 cv
471.443 717.247 471.502 716.498 471.518 715.823 cv
471.533 715.148 471.502 714.549 472.102 714.894 cv
472.702 715.239 473.931 716.527 474.68 717.397 cv
475.43 718.267 475.7 718.716 476.134 718.686 cv
476.569 718.656 477.168 718.146 477.798 718.521 cv
478.428 718.896 479.087 720.155 479.537 720.859 cv
479.987 721.564 480.227 721.714 480.452 721.174 cv
480.676 720.635 480.886 719.405 481.066 718.102 cv
481.246 716.797 481.396 715.419 481.666 714.549 cv
481.936 713.68 482.325 713.32 483.224 712.436 cv
484.124 711.551 485.533 710.143 486.357 708.942 cv
487.182 707.744 487.421 706.755 487.091 705.945 cv
486.762 705.136 485.863 704.506 485.743 703.816 cv
485.623 703.127 486.283 702.378 486.387 701.658 cv
486.493 700.938 486.042 700.249 485.623 699.409 cv
485.204 698.57 484.813 697.581 484.289 696.861 cv
483.764 696.142 483.105 695.692 482.175 695.572 cv
481.246 695.452 480.047 695.662 479.252 695.887 cv
478.458 696.112 478.068 696.352 477.723 695.992 cv
477.378 695.632 477.079 694.673 476.554 694.554 cv
476.03 694.434 475.28 695.152 474.95 695.183 cv
474.621 695.213 474.71 694.553 474.786 693.924 cv
474.86 693.294 474.92 692.694 474.515 692.26 cv
474.111 691.825 473.242 691.555 473.391 690.416 cv
473.542 689.276 474.71 687.268 475.325 685.844 cv
475.939 684.42 476 683.58 475.819 682.831 cv
475.639 682.081 475.219 681.422 475.309 680.612 cv
475.4 679.803 475.999 678.844 475.37 678.185 cv
474.74 677.524 472.881 677.165 472.611 676.625 cv
472.341 676.086 473.661 675.366 474.2 674.377 cv
474.74 673.388 474.5 672.128 474.38 671.109 cv
474.26 670.09 474.26 669.311 475.099 669.19 cv
475.939 669.07 477.618 669.61 478.487 669.221 cv
479.357 668.831 479.417 667.512 479.806 666.463 cv
480.196 665.413 480.916 664.634 482.504 662.895 cv
484.093 661.156 486.551 658.458 487.391 656.27 cv
488.231 654.081 487.451 652.402 487.51 651.323 cv
487.571 650.244 488.47 649.765 488.8 648.984 cv
489.129 648.205 488.89 647.126 488.77 645.447 cv
488.65 643.769 488.65 641.49 488.83 639.781 cv
489.01 638.072 489.37 636.934 489.129 635.765 cv
488.89 634.595 488.05 633.396 488.44 632.197 cv
488.83 630.998 490.449 629.799 491.409 628.72 cv
492.368 627.64 492.667 626.681 492.847 625.512 cv
493.027 624.342 493.087 622.963 494.466 621.764 cv
495.845 620.564 498.543 619.546 500.552 618.736 cv
502.56 617.927 503.879 617.327 504.779 617.387 cv
505.678 617.447 506.158 618.166 506.818 617.687 cv
507.477 617.207 508.316 615.528 508.917 613.97 cv
509.515 612.41 509.875 610.972 510.175 610.432 cv
510.475 609.893 510.715 610.252 511.554 610.462 cv
512.393 610.672 513.833 610.731 514.186 610.132 cv
514.541 609.533 513.809 608.273 513.059 606.954 cv
512.31 605.636 511.542 604.256 510.409 603.566 cv
509.276 602.877 507.777 602.877 506.937 602.308 cv
506.098 601.738 505.918 600.599 505.289 600.148 cv
504.659 599.699 503.58 599.939 502.65 599.43 cv
501.721 598.92 500.941 597.661 500.222 596.941 cv
499.502 596.222 498.843 596.042 498.543 595.143 cv
498.244 594.243 498.303 592.625 498.393 591.545 cv
498.483 590.466 498.603 589.927 498.124 589.117 cv
497.644 588.308 496.565 587.229 495.995 584.89 cv
495.425 582.552 495.366 578.954 494.676 577.035 cv
493.987 575.117 492.668 574.877 491.349 574.638 cv
490.03 574.397 488.71 574.157 488.291 572.479 cv
487.872 570.801 488.351 567.683 488.051 566.123 cv
487.751 564.564 486.672 564.564 486.132 562.706 cv
485.593 560.847 485.593 557.13 485.233 555.15 cv
484.874 553.172 484.154 552.933 477.978 545.978 cv
471.802 539.022 460.17 525.353 416.342 474.148 cv
372.513 422.944 296.487 334.207 258.219 289.673 cv
219.951 245.14 219.441 244.81 219.261 244.495 cv
219.082 244.18 219.231 243.88 219.457 242.472 cv
219.681 241.063 219.981 238.544 224.403 203.364 cv
228.825 168.184 237.369 100.342 241.731 66.6309 cv
246.093 32.9194 246.273 33.3394 245.869 33.459 cv
245.464 33.5786 244.475 33.3989 238.044 32.4399 cv
231.614 31.4805 219.742 29.7417 184.007 24.4077 cv
148.272 19.0742 88.6748 10.146 59.0186 5.70313 cv
29.3618 1.25977 29.647 1.30273 29.8115 1.62988 cv
29.9766 1.95703 30.0215 2.56885 29.9087 3.86426 cv
29.7964 5.15967 29.5264 7.13818 28.9419 8.80176 cv
28.3569 10.4658 27.4575 11.8145 26.7085 12.6992 cv
25.959 13.583 25.3594 14.0034 25.5093 14.8726 cv
25.6592 15.7422 26.5586 17.0605 27.458 18.5151 cv
28.3569 19.9688 29.2563 21.5581 29.9458 24.1807 cv
30.6353 26.8042 31.1147 30.4614 30.7852 34.7183 cv
30.4556 38.9751 29.3159 43.8315 28.2368 47.3696 cv
27.1572 50.9063 26.1387 53.125 25.7485 54.8037 cv
25.3589 56.4824 25.5986 57.6221 24.9692 58.4912 cv
24.3394 59.3608 22.8408 59.9604 22.1211 60.9199 cv
21.4014 61.8789 21.4614 63.1982 21.7314 65.0566 cv
22.0015 66.9155 22.481 69.314 22.3311 71.4121 cv
22.1812 73.5107 21.4014 75.3096 20.9521 76.7188 cv
20.5024 78.1274 20.3823 79.147 20.6821 80.1362 cv
20.9819 81.1255 21.7017 82.085 21.7017 83.0439 cv
21.7017 84.0034 20.9819 84.9629 20.1426 85.2026 cv
19.3027 85.4424 18.3442 84.9629 17.5645 85.2324 cv
16.7852 85.502 16.1855 86.522 14.8364 87.8408 cv
13.4873 89.1597 11.3887 90.7788 9.83008 92.3379 cv
8.271 93.8965 7.25146 95.3955 5.94189 97.6436 cv
4.63232 99.8926 3.03223 102.89 2.23242 104.779 cv
1.43262 106.667 1.43262 107.447 1.63281 108.796 cv
1.8335 110.145 2.23438 112.063 2.23438 113.893 cv
2.23438 115.721 1.8335 117.46 1.63281 118.629 cv
1.43262 119.798 1.43262 120.398 1.81299 121.567 cv
2.19287 122.736 2.95361 124.475 4.11377 125.883 cv
5.27295 127.292 6.83203 128.372 7.52148 129.541 cv
8.21143 130.71 8.03125 131.969 8.84033 132.779 cv
9.65039 133.588 11.4487 133.948 12.5283 134.607 cv
13.6074 135.267 13.9673 136.226 13.6675 137.186 cv
13.3677 138.145 12.4082 139.104 12.4082 139.943 cv
12.4082 140.783 13.3677 141.502 14.5366 142.582 cv
15.7061 143.661 17.085 145.1 17.5347 146.209 cv
17.9844 147.318 17.5049 148.098 17.8647 148.637 cv
18.2241 149.177 19.4233 149.477 19.8135 150.287 cv
20.2031 151.096 19.7832 152.415 20.2627 153.374 cv
20.7427 154.333 22.1216 154.933 22.9907 157.092 cv
23.8604 159.25 24.2197 162.968 24.3398 165.876 cv
24.46 168.784 24.3398 170.882 23.6504 173.311 cv
22.9609 175.738 21.7021 178.497 20.5923 180.835 cv
19.4834 183.173 18.5244 185.092 18.3447 187.011 cv
18.1646 188.929 18.7637 190.848 19.4834 195.015 cv
20.2031 199.182 21.0425 205.598 21.2822 209.255 cv
21.522 212.913 21.1621 213.812 20.353 214.501 cv
19.5435 215.191 18.2842 215.67 17.6846 216.3 cv
17.085 216.93 17.145 217.709 17.3252 218.758 cv
17.5049 219.808 17.8047 221.126 18.4644 222.026 cv
19.1235 222.925 20.1431 223.405 20.5928 223.885 cv
21.0425 224.364 20.9224 224.844 21.4624 225.773 cv
22.002 226.703 23.2007 228.082 24.04 228.741 cv
24.8794 229.401 25.3594 229.341 26.019 230.42 cv
26.6782 231.499 27.5176 233.718 28.3569 235.007 cv
29.1963 236.296 30.0361 236.656 30.7554 237.525 cv
31.4751 238.395 32.0742 239.773 32.584 241.272 cv
33.0933 242.771 33.5132 244.39 34.0225 245.739 cv
34.5322 247.088 35.1318 248.167 36.0913 249.516 cv
37.0508 250.865 38.3691 252.484 39.8687 254.013 cv
41.3677 255.542 43.0464 256.981 44.3652 258 cv
45.6846 259.02 46.6436 259.619 47.3032 259.919 cv
47.9629 260.219 48.3223 260.219 48.6372 260.684 cv
48.9521 261.148 49.2217 262.078 49.2817 263.142 cv
49.3418 264.206 49.1919 265.405 49.0571 266.5 cv
48.9224 267.594 48.8022 268.583 48.937 269.602 cv
49.0718 270.621 49.4614 271.67 50.1665 272.885 cv
50.8706 274.099 51.8901 275.478 52.5498 276.303 cv
53.209 277.127 53.5088 277.396 53.6738 278.026 cv
53.8384 278.655 53.8687 279.645 53.7637 280.5 cv
53.6587 281.354 53.4189 282.073 52.8042 282.673 cv
52.1895 283.272 51.2002 283.752 50.2261 284.337 cv
49.2515 284.921 48.2925 285.611 47.7827 286.451 cv
47.2729 287.291 47.2129 288.28 47.4531 288.954 cv
47.6929 289.629 48.2324 289.988 49.1318 290.019 cv
50.0313 290.048 51.29 289.749 52.8643 289.779 cv
54.438 289.809 56.3267 290.168 57.4063 290.798 cv
58.4854 291.427 58.7549 292.327 58.7251 293.226 cv
58.6948 294.125 58.3652 295.025 58.1855 295.879 cv
58.0054 296.734 57.9756 297.543 58.9199 298.397 cv
59.8643 299.252 61.7827 300.151 63.0273 300.796 cv
64.2715 301.441 64.8408 301.831 65.7402 302.745 cv
66.6392 303.659 67.8687 305.098 68.9028 305.878 cv
69.937 306.657 70.7769 306.777 71.5259 306.357 cv
72.2754 305.938 72.9355 304.979 73.2651 304.004 cv
73.5947 303.03 73.5947 302.041 73.9844 301.081 cv
74.374 300.122 75.1538 299.192 75.1387 298.113 cv
75.1235 297.034 74.314 295.805 74.2544 294.636 cv
74.1943 293.466 74.8838 292.357 75.498 291.353 cv
76.1128 290.349 76.6528 289.449 77.0571 288.82 cv
77.4619 288.19 77.7319 287.831 78.6162 287.456 cv
79.5005 287.081 80.9995 286.691 82.1387 286.511 cv
83.2778 286.332 84.0571 286.362 84.481 286.628 cv
84.9038 286.894 84.9717 287.396 85.2188 288.104 cv
85.4663 288.813 85.8936 289.727 86.4521 290.248 cv
87.0103 290.768 87.6997 290.896 88.6255 290.491 cv
89.5508 290.086 90.7124 289.149 91.4546 288.827 cv
92.1963 288.505 92.5186 288.797 93.0918 289.378 cv
93.6655 289.959 94.4893 290.828 94.2871 291.825 cv
94.0845 292.822 92.8555 293.946 91.5688 294.438 cv
90.2827 294.928 88.939 294.786 88.2417 295.07 cv
87.5444 295.355 87.4946 296.067 87.1548 296.513 cv
86.8145 296.959 86.1855 297.139 85.4653 296.989 cv
84.7461 296.839 83.937 296.359 83.3521 296.359 cv
82.7676 296.359 82.4082 296.839 81.8984 297.409 cv
81.3887 297.978 80.729 298.638 80.0093 299.087 cv
79.29 299.537 78.5107 299.777 78.2256 300.077 cv
77.9409 300.376 78.1509 300.736 78.9756 301.321 cv
79.7998 301.905 81.2388 302.715 82.3179 303.135 cv
83.3975 303.555 84.1167 303.584 84.5215 303.974 cv
84.9263 304.364 85.0161 305.113 84.7012 305.916 cv
84.3867 306.717 83.6675 307.571 83.0532 308.133 cv
82.4385 308.696 81.9287 308.965 81.8838 309.19 cv
81.8389 309.415 82.2583 309.595 82.4834 309.94 cv
82.7085 310.285 82.7383 310.794 83.0977 311.409 cv
83.458 312.023 84.147 312.743 84.7319 313.013 cv
85.3164 313.283 85.7964 313.103 85.9761 313.388 cv
86.1558 313.672 86.0361 314.421 86.186 315.201 cv
86.3354 315.98 86.7554 316.79 87.1753 317.225 cv
87.5947 317.659 88.0146 317.72 88.2246 318.004 cv
88.4346 318.289 88.4346 318.799 88.6743 319.383 cv
88.9141 319.968 89.3936 320.627 90.0229 321.002 cv
90.6523 321.377 91.4321 321.467 91.9565 321.752 cv
92.4814 322.036 92.751 322.516 92.9761 322.936 cv
93.2007 323.355 93.3809 323.715 93.7031 324.315 cv
94.0254 324.915 94.4902 325.754 94.6104 326.796 cv
94.73 327.838 94.5054 329.082 94.4453 329.907 cv
94.3853 330.731 94.4902 331.136 94.8647 331.788 cv
95.2397 332.439 95.8843 333.339 96.7539 334.014 cv
97.623 334.688 98.7173 335.138 99.2944 335.498 cv
99.8716 335.857 99.9312 336.127 100.111 336.771 cv
100.292 337.417 100.591 338.436 100.554 339.627 cv
100.517 340.819 100.142 342.183 99.8643 342.91 cv
99.5874 343.637 99.4077 343.727 98.3135 343.487 cv
97.2192 343.247 95.2104 342.678 93.8467 342.063 cv
92.4824 341.449 91.7627 340.789 91.1631 339.68 cv
90.564 338.571 90.084 337.012 89.4844 336.098 cv
88.8848 335.183 88.1655 334.913 87.0264 334.449 cv
85.8867 333.984 84.3281 333.325 83.4438 332.53 cv
82.5591 331.735 82.3496 330.806 81.7051 329.667 cv
81.0601 328.528 79.981 327.179 79.0366 326.25 cv
78.0923 325.32 77.2827 324.811 76.998 324.241 cv
76.7134 323.671 76.9531 323.042 77.1182 322.127 cv
77.2827 321.212 77.3726 320.014 77.418 318.935 cv
77.4624 317.855 77.4624 316.896 77.8521 316.222 cv
78.2422 315.547 79.0215 315.157 79.3364 314.37 cv
79.6514 313.583 79.5015 312.399 79.1572 311.47 cv
78.8125 310.541 78.2725 309.866 77.3359 309.484 cv
76.3994 309.102 75.0654 309.012 73.8887 309.222 cv
72.7119 309.432 71.6929 309.941 70.9731 310.878 cv
70.2539 311.815 69.834 313.179 69.6768 314.806 cv
69.519 316.432 69.624 318.32 69.6538 319.325 cv
69.6841 320.329 69.6392 320.449 69.564 320.861 cv
69.4888 321.273 69.3843 321.978 68.9043 322.877 cv
68.4243 323.776 67.5703 324.871 67.2031 325.973 cv
66.8359 327.075 66.9556 328.184 67.3301 328.918 cv
67.7051 329.653 68.3345 330.012 68.9043 330.372 cv
69.4736 330.731 69.9834 331.092 70.4331 331.856 cv
70.8828 332.621 71.2725 333.79 71.3628 335.469 cv
71.4521 337.147 71.2427 339.335 70.8379 341.674 cv
70.4331 344.013 69.8335 346.501 69.519 348.36 cv
69.2041 350.218 69.1738 351.447 70.0283 353.231 cv
70.8833 355.015 72.6221 357.353 73.7456 359.227 cv
74.8701 361.101 75.3799 362.51 76.0693 364.038 cv
76.7588 365.567 77.6284 367.217 78.8276 368.535 cv
80.0264 369.854 81.5557 370.844 82.9795 371.443 cv
84.4033 372.043 85.7227 372.253 87.1167 372.192 cv
88.5107 372.133 89.9795 371.803 91.1787 371.863 cv
92.3779 371.923 93.3071 372.373 94.1016 372.643 cv
94.896 372.912 95.5557 373.002 96.0356 373.347 cv
96.5146 373.691 96.8149 374.291 97.2944 374.846 cv
97.7739 375.4 98.4336 375.91 99.0034 376.3 cv
99.5728 376.689 100.052 376.959 100.218 377.56 cv
100.382 378.158 100.232 379.088 100.067 380.048 cv
99.9028 381.007 99.7231 381.996 99.7832 382.851 cv
99.8433 383.705 100.143 384.425 99.9634 385.159 cv
99.7832 385.894 99.1235 386.643 98.9141 387.543 cv
98.7041 388.441 98.9438 389.491 98.9438 390.36 cv
98.9438 391.23 98.7041 391.919 98.1343 392.834 cv
97.5649 393.748 96.665 394.888 95.811 395.637 cv
94.9565 396.387 94.1475 396.746 92.918 396.851 cv
91.689 396.956 90.04 396.806 88.8706 396.716 cv
87.7017 396.626 87.0122 396.596 86.6523 396.761 cv
86.293 396.926 86.2627 397.286 86.5176 397.705 cv
86.7725 398.125 87.312 398.604 87.9419 399.114 cv
88.5713 399.624 89.2905 400.163 89.6206 400.703 cv
89.9502 401.243 89.8901 401.782 89.5903 402.308 cv
89.2905 402.832 88.751 403.342 88.4658 403.761 cv
88.1816 404.181 88.1514 404.511 88.2114 406.609 cv
88.2715 408.707 88.4214 412.575 88.4658 415.318 cv
88.5112 418.061 88.4512 419.68 88.9009 420.489 cv
89.3501 421.299 90.3096 421.299 90.8496 421.928 cv
91.3887 422.558 91.5088 423.816 92.4385 424.566 cv
93.3677 425.315 95.1064 425.556 97.0249 427.444 cv
98.9434 429.333 101.042 432.87 102.031 435.748 cv
103.021 438.627 102.901 440.845 103.111 441.864 cv
103.32 442.884 103.86 442.703 104.819 443.153 cv
105.779 443.603 107.158 444.682 107.757 446.57 cv
108.357 448.46 108.177 451.157 108.507 452.717 cv
108.836 454.275 109.676 454.695 110.231 455.1 cv
110.785 455.505 111.055 455.895 111.28 456.733 cv
111.505 457.573 111.685 458.862 112.299 459.521 cv
112.914 460.182 113.963 460.211 114.473 460.751 cv
114.982 461.291 114.952 462.34 115.118 463.688 cv
115.282 465.038 115.642 466.687 116.256 467.841 cv
116.871 468.995 117.74 469.655 119.12 470.464 cv
120.499 471.273 122.387 472.232 123.497 472.832 cv
124.606 473.432 124.936 473.672 125.16 474.57 cv
125.385 475.471 125.505 477.029 125.431 478.093 cv
125.355 479.157 125.086 479.728 125.041 480.222 cv
124.996 480.717 125.176 481.136 125.82 482.051 cv
126.464 482.965 127.574 484.374 128.833 485.363 cv
130.092 486.353 131.501 486.922 132.865 487.162 cv
134.229 487.401 135.548 487.312 136.328 487.401 cv
137.107 487.491 137.347 487.762 137.572 488.766 cv
137.797 489.77 138.006 491.509 138.126 493.067 cv
138.247 494.627 138.276 496.006 137.602 497.175 cv
136.927 498.344 135.548 499.303 134.874 500.157 cv
134.199 501.012 134.229 501.761 134.394 502.87 cv
134.559 503.979 134.859 505.448 135.159 506.377 cv
135.458 507.307 135.758 507.697 136.328 507.832 cv
136.897 507.967 137.737 507.847 138.426 508.281 cv
139.116 508.716 139.656 509.705 140.285 509.795 cv
140.915 509.885 141.634 509.076 142.368 508.611 cv
143.103 508.146 143.853 508.026 144.272 508.312 cv
144.692 508.596 144.782 509.285 145.082 509.87 cv
145.381 510.455 145.891 510.935 146.371 511.399 cv
146.851 511.864 147.3 512.313 147.525 513.107 cv
147.75 513.902 147.75 515.041 147.54 516.66 cv
147.33 518.279 146.91 520.378 146.116 522.116 cv
145.322 523.855 144.152 525.234 143.718 526.313 cv
143.283 527.393 143.583 528.172 144.167 528.892 cv
144.751 529.61 145.621 530.271 145.996 531.124 cv
146.37 531.979 146.25 533.028 146.025 533.912 cv
145.8 534.797 145.471 535.517 145.066 536.026 cv
144.661 536.536 144.182 536.836 144.122 537.675 cv
144.062 538.515 144.421 539.894 144.781 540.928 cv
145.141 541.962 145.501 542.651 145.186 543.386 cv
144.871 544.12 143.882 544.9 143.118 546.219 cv
142.353 547.538 141.813 549.396 141.634 550.61 cv
141.454 551.825 141.634 552.395 142.323 552.68 cv
143.013 552.964 144.212 552.964 144.992 552.964 cv
145.771 552.964 146.13 552.964 146.445 553.264 cv
146.76 553.563 147.03 554.163 147.405 554.568 cv
147.779 554.973 148.259 555.183 148.739 555.317 cv
149.218 555.452 149.698 555.512 149.938 555.813 cv
150.177 556.112 150.177 556.651 150.133 557.551 cv
150.087 558.45 149.998 559.71 150.058 560.624 cv
150.118 561.538 150.327 562.107 150.717 562.317 cv
151.107 562.527 151.676 562.377 153.416 562.107 cv
155.154 561.838 158.062 561.448 160.071 561.238 cv
162.079 561.028 163.188 560.998 164.283 561.193 cv
165.377 561.389 166.456 561.808 167.76 562.033 cv
169.064 562.258 170.593 562.287 171.897 562.572 cv
173.201 562.857 174.281 563.396 175.24 563.441 cv
176.199 563.486 177.039 563.037 177.624 563.112 cv
178.208 563.187 178.538 563.786 179.212 564.596 cv
179.887 565.405 180.906 566.425 182.54 567.114 cv
184.174 567.804 186.422 568.163 187.921 567.999 cv
189.42 567.834 190.169 567.145 190.694 567.174 cv
191.219 567.204 191.519 567.953 192.058 568.643 cv
192.598 569.332 193.377 569.962 194.606 570.217 cv
195.835 570.472 197.514 570.353 198.668 570.277 cv
199.823 570.202 200.452 570.172 201.562 570.592 cv
202.67 571.012 204.259 571.881 205.608 572.705 cv
206.958 573.529 208.067 574.31 209.446 575.523 cv
210.825 576.737 212.474 578.387 213.358 579.676 cv
214.243 580.964 214.362 581.894 214.707 582.253 cv
215.052 582.613 215.622 582.403 216.611 582.778 cv
217.6 583.153 219.009 584.111 219.489 584.966 cv
219.968 585.82 219.519 586.57 219.219 587.365 cv
218.919 588.159 218.77 588.998 219.369 590.407 cv
219.968 591.816 221.318 593.795 222.292 595.174 cv
223.266 596.553 223.865 597.333 224.705 597.572 cv
225.544 597.813 226.624 597.513 227.358 597.407 cv
228.093 597.303 228.482 597.393 229.772 598.157 cv
231.061 598.922 233.25 600.36 234.778 601.185 cv
236.307 602.01 237.176 602.22 238.121 602.249 cv
239.065 602.279 240.084 602.13 240.639 602.265 cv
241.194 602.399 241.284 602.819 241.479 603.254 cv
241.673 603.688 241.973 604.138 242.377 604.272 cv
242.782 604.408 243.292 604.228 244.926 604.152 cv
246.56 604.078 249.318 604.108 251.671 604.453 cv
254.025 604.798 255.973 605.457 257.322 606.026 cv
258.671 606.597 259.421 607.076 260.185 608.021 cv
260.95 608.965 261.73 610.373 262.165 612.396 cv
262.599 614.42 262.689 617.059 262.45 618.933 cv
262.209 620.806 261.64 621.915 261.416 622.89 cv
261.19 623.863 261.31 624.703 261.371 625.362 cv
261.43 626.022 261.43 626.502 261.85 626.562 cv
262.27 626.622 263.109 626.262 263.949 626.472 cv
264.788 626.682 265.627 627.461 266.212 628.436 cv
266.796 629.41 267.126 630.579 267.741 631.089 cv
268.355 631.599 269.255 631.448 269.81 630.908 cv
270.364 630.369 270.574 629.439 270.918 628.601 cv
271.263 627.761 271.743 627.012 272.852 626.592 cv
273.961 626.172 275.701 626.082 277.154 626.412 cv
278.609 626.741 279.778 627.491 280.647 628.391 cv
281.516 629.29 282.085 630.339 282.43 631.418 cv
282.775 632.497 282.895 633.607 283.36 634.491 cv
283.825 635.376 284.633 636.035 285.803 636.814 cv
286.972 637.594 288.501 638.493 290.105 639.692 cv
291.709 640.892 293.388 642.391 294.587 643.694 cv
295.787 644.999 296.506 646.107 297.076 647.007 cv
297.645 647.906 298.065 648.596 298.754 648.881 cv
299.444 649.165 300.403 649.046 301.219 648.865 cv
302.036 648.686 302.708 648.445 305.323 651.383 cv
cp
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 15.1.0
%%For: (M) ()
%%Title: (california-silhouette.eps)
%%CreationDate: 9/24/2015 7:12 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!T<qf<atOllVD#lP8SEM3aic5Li=X5om<5k*4&#>_/IhXEQC"(4Z[24-\R$n0MQrT3cb<VHnCK<]W=O1Vb&U9j0RQ1)q3IdtDK
%ea;pB^3o[&p$4Q-c^jZ5LqZM*J,\+;?i8CNVqL3-PDM"Wg.d1+FH`59P3-Hkd,Ae`H$_\YDI9PJQa=s!FL>5Q2rA_T+/d<Mqrp1f
%1[Y0a[TKV[l(0Q*QTn-8P8E3&q0XnY?`gN0gFc6I!o4f=rkh3OaT2+L_I"iI(UmJPQdUA,p#903DtkZmiPV_LFt9VY=UeDRqYe2.
%oBpA-l2!sY]f#A)9I4;k?[?Lir).hc]79P;T4[QSS*bO5SZe?/q%D_X]SO.n=0nBq^6"an')CE@H.eb5hG.u*>?tu&[ZY",?Zm:G
%Is4-6!4$%:f_+S^$`X0T-^+d#qqkHZru[`drsc`tc?3IVH27">F'*8jqp#FlD/0AtDZW1qEKNNUle1sU@_/-#^g/$D=(;'=23A"$
%lSQ_dAD_fHrPV3ob"YRrD3mt[kLt6XMV3d\m$DY%J!s*8B'Xd<-gU0#q;:7pUTn)S[Xs"??-LlL=O+C-/fgnS!IVYnRP"/RC\RG>
%'^*/f'`P0c?;K2AAm:tie`%A>s/*tfHhYGFolnlGZh:1)=Pit#1L%S"r<jG<<R+&>4bk4GHhl"[8]X'Wc:6(mP0=*X),IT!N+"D2
%)a<4o?4)8_\=UI)0>D5e95f9gSmRIVRfn$5K6s!HSc;=ZY:`g5^>7)#D=,?W3W4CHWUD4l^T)@fIXc]mZ(0)CECK*,k)KlL>j-Q\
%2Vh-iTSk7>0Y_eW5AnS?^&2j[5@_XX;Xj;MZpC8#hp12_F*R#@^-+\nGO6.jR`1)\(ssm(1lLo%]FA$Og6@1I7K0N<.;2`hRc-4'
%7'k?@1cmihf@*[23B]g#o5hQ-5ECr_cd1"sr*2>JU34Sh,+VZiU2,,ES92eYBSLro-^nIND7B?OS&.t._5?^cHZ/,pcI`q^iX)*k
%:CO)@d\3opr8c`)$c(C2AlYAd$IB2c_b[X"56n9\&f7a=<a7,Sn5HsamWAWCHsN;gcc*AgC/+=2RUM9PM4sPaFm&V(*ZTVp1[MB;
%[%^#O@upDA-YuWD!'ff/!Q%Vh_]J>H%o^S=OfL"JS;e;opdRjBk]DZ=HSe[^2;IE`FTYm]/kp!0Z.lNtPP,5uYe`f(fH@flcLj'g
%LnA@X[#R:!?F2M;U('"/h&DV<:/^`K*(oITS/]j4]&Ve8A<\J\PI.Yrm-FK^pH#W)O,Io]e+T]_8$b+g%^,uuHi6kZYDfKGX_4gC
%dNQp37nJ!eIdJB9)u#A?erVc[JPpgSJWUSuIAEa[q;Z0J>`Ye62)TK]qhUEDgpZ9%ZOX'B`<P<Dr*;afWIM#"=6&37a*W4Us40E_
%4TkqJJ*W_koQg@=s5^9-3=iIZqWHp-?]BR$TBFPnH2LnH8GBGH"c\#tT5VKpkOEKhdgpr.SAuN,Vk1(U[jV+nHaNe%L\%i9aE+f3
%VI5$>ald;&+R)SVjF+Q<pAE\mJY1nOjAgPtcM0GkT*K^lB&X(4W0Q>fb]@VCXA'#Wn]F#HnZ3T5,9/3pZQ)H+r:r@-+.l+GBXleb
%SiFGH3P=Ihnt#qE>o?h9@s2t(42BJK:TZ_93Y%eT$/KH8OR%k&Ft_l3hodgANb<Vu_%RU!f0Gp`,5fa>C`P'fZa25<Utp51aSC"N
%pCZ&L3++_LZR<K\FaSTE>Y2$,DXV'%lGpTYesnP:3jTp#p$G?-IuB/.E4^YsjMomHB"tZIG!Fr<[<92g(MN,@b=GN96)b*+\9Bhk
%)4RucFjS]RVoAEVh(d*uR'nWKc"Y40P>-WmRr>Q4`B<Z^.c]cblnfP?<j!,2\[Ff=9(S%^1"XNd@,SF57T.0)o$LGHZZH'CjXMoo
%%X>.S0sZoO".N<RFX'DaD,ah_F[^J$6hioh9'+CFo+(`b;dU(*H!O:nQD\l+kOmV#&/q'X2J&>@h'#SZ3r8R*K[gqUd"^NN)<X#`
%:T(V<H(F^*E:,IsGASiZ\4S/)3u@>Opfpr]\(6PrF63/fMPT4AFf7F+mp1;&hK_XQ6W2XmIBGo2i^()'BMiEO\IDDIgc:(?5#hZ!
%K5d;I$_BH+n@WdcIGtZLHt)h(SG;nN[(5c)GpU[(7f&V[EZUh<2@PibJb;D_ahh%%1%d6Vl1eN8nQagAG6!=/rSCe.B?*(n3GF/K
%3%,7-Y+=\R3EJ55X5'm&`)1&qFGMuK"Vep1T.ASqAj*2II67"Ol<-CEi1:JC3$1"Q;\EK`b'S?oXW&t_dNI@N'4-$[U9pI!H?2NI
%RKk<mLm6%#k,^I$CP/(qZ:)&[eb3C=F!VIj]Wu?:Y4h5ZAeo?;p@`<%O_8feZeFKpC0`Y6nEi2C>JWlE<nOD9<@kTY;B:Se%X.Wd
%\'$:Hg@a(HeMTZ;S&#J^\R$jgn*8ZtJa^OT^V-Ud"TmQYY`]Lf,s;.P5Pmb(jYnh/\+9*6ldbCIMri^DkFXn!\QW:_](<m_4mVb-
%QeaG]b27.-pLH>"q=9CAB=#(Jp%::p6GHfTQn;>t3s-"Tl11kOj)f]jbht,je)b]-n\m3UGOl@9Ah#k^7iu/0%6Id4DJ#5>G%-q&
%;]KJToBM^B?E^8nEY.&f(Oq]Fd_>kE[hjtA/H^j1ojmd^m)_[l\*prlMqRZ91TXLsn";sta"6Z/a6SZ6@_TAo#2Fn@^E8/-7%;cN
%+.'R_p$LmipNj5NN%!3\p!lScl`KmVA0r045;[r(r,`0.SLt]LGO+M<qt]>@j$3$^R-9[H7o@Y[Z2W+/qlbarme?K5joM46cBhV\
%jjiaG3u]o`]"UJ1UO2Z_H35j)T's$+`slrT7dnLXYJ,<\3r^FQMS;H2I/@o7W9i.9]NkE@jAYf4m,lVOmI6Gq]<?^O?I-4?8=N]P
%l^Pk0B[h5jil>r"iD3B;IZbdK-:>/pT2*b,AIe_3&Pp0.hu5+0?TQY[hfjSL9Aa$'/h^d<c>b.';%`f^cTga0QBgGGDG*g2Z`0k-
%o5_F0aXQO6?="Vdm^oG<@c1%3"6T%6G[=_!J'Z0c%!2DrL\.,G\p#k&\#`='6(0L@^/W46U&IQ7b@#OfO3LK;h(ge:0R<84"+Y:Y
%355TBVX'9Xn>G`iqdFV)HfXj<]4\lb0:(&E.q-Tnr8Ml]'1MU62Ek9IVuNa6r!1KPe*cf*HuZQc/SclkIJlK/28$qim755-^4,dj
%QCBfTVX)KFKfNM^$t:FI[J_dbg^]>6@e3..V/UTp=')`]J,Cs\Wo[tU3sJ?9e`G,`X/"%kRf;H5f\j`=8T]$t-A?'Mir=SA3F\bq
%c2T#Finoe2Eu6@HTjg4!=NlfbN+5WZs#VD%rBfJ4&''S3[/Dfe*rESahe.*1$&H@rV^2,`AdWkm3`PnDGY7q\i#<H(Hs5k3n&<G=
%\%d:lo_i,^P&D--bPsb8>jL<Gp[q=gl/L'p+*Ze<LsSUk?f1`.GP1L)?%)W=G*T/"TRPqCD7uRdhn;6H?4K[oM%'Y&-7NO'j9C+%
%?Z"[B[D1GdPLuJJT'*0)Tm^4J[UNls2g`0eijtnnGe_]T@o?-(^09?q05%B#rA8<t;0AML3j*,Ml'3)irrJ$,s6dl(c`7s=3JusB
%>2Pb+jFo>E&:J!(VlSpMZZZ"_4kn2hh2[QJf9JSMn%7iTh<jjjXF%Lh5sAeNMqEXaY!:.Af<\hnh7$JWmIXl%Qu>4G3MhoUV44Ws
%(TZfsWk1[pD/0\gG!i%5JCEcR_fUNOhV'N8i527!Ff)bfE>bjeq=1n:\*]C>Xp<RnhqNB;JF;U^lLO,gmC%A>8Y8@ekF31nU1F?]
%HLYK\'t@A^pTr-Am\f;]4'U&2VNp%KamgB;L\BKqFLerM$8#S5PVp[g]$6&>-W..X]l=WKhJR7B92@,!ajK"JB*4&SM<Wj948:>^
%c1FIrG;I"J>tfHS^Sa>O:=mt>ccm(?[.V]9lKTu.Df/V1]/*1uo-U>5_t2F'I*rG3$BeDm7t*RGd@K'1<s-;\i3'e@40[\4c+a$.
%]A1Q[0;aZlnoFF(l0S,S>g.*h=7?cNQ",/r$NL^AjDL<R`gj(?Zh4b/\#m\,dI_&!n&Uri:L9RK/f'EIs(/Xqi+g,PrP5_uc5b<p
%G2<PNVOJsa0.aDr05'*Q]3bFu41=f_`(Hf54HSc%?55otDgm9Mp$Js;;'6on$r+Fep:"^\\QW@bXra7;mctrqg\pmD\A6c"#q&!T
%*`MMaqY'$O#?r3''aa*id>%GmYH*S<O<5ai*@Z?E(!h9==?OuIoCMnB6>3SXbt&TD"r(nso&eb6qS(^%4VN_-bcm6&O_\e(@.WG'
%>0G`Ur-$FWa:nN$Fb))L#NXb)OjYg_,>3.M-/!%@R1K(?p?1mW=7b24*Kg)_0DBRi`N^N5X1LL9`i%bPe&oEimI>*5jeB1`1%P"P
%W-ij(-Qc%7Ojr+_GO+MD*;Tj#&un1aMJCc#lh):n$Ya/DUADUUCL>\GL(EY1IcDM#'>N72q59@U]anOq(Lu1qGa)q>^Dgh>m0KLN
%`R9+Deq[oY]KP9dqt+ukI5]j!j@[H:.1a)bn@3.<g[/+,#MS$>?&RgT=<>57S#[o,eQD7lEkq3__jd.gA<'l=PD)Qnj'$>%c2%bn
%9Un9$HG/?_B5]-YM>$5r*EpQ2)ZR*hqfXbW\72mnJ%+6dZLM\<RD2s$+0bYaPbJuEa#c7->HZi.(Ji.l(!N/*q=],\o0cf"[(a]j
%%lM+,X@7If7Jq%3IN;TERLXB7!r"ef2-sWa<bnr3oViQrbI8\9hQPL[CD?A21MVWWd2k8C9J!5L9Q)9HO)=[N_"qs*?2m#!LJPR9
%_sG<rb"k+^H(_8ZeTSYI:OZcjK2do?_U9"P])eEl(CRQW/dh?PG3b\sM5T(U/\%1N2[?l8/HnqV/)dD(A]8!A;-k6iGZS,id<n_n
%`(/Qh:Y.gLm]?>Bf&Oo6BY:tJ,F\)'r#p'p^X:f\9O*>8GW`pdDjT5#e`(3>G-sHRnMcpDCbZMIRjUa;1D0-`IpjdCG89hbVSCt]
%f(UF'9nJ.h^,nrC8]*$qFrZa%YVe=<^ZWD"@aK#\Ye>>G]\'B48t4(VaY0hFbltbmrch7aN\+>epTsN9b_u0mR<+0TUf"N+Nmc%]
%;Wb2Ah@#]8'2(r.e5^__Yrc0JK=?<JUdEDh?I8!mrOjlP*n/uPI;s3JT4l3bb`go-npW.XXq$+"p7u/#^H4dZ8>E&-9`Je4c/j%%
%)b,1[i?;L(X_no@G6<Hk)dP'T#>lt1[e%J0KDi#ng7U@lWCE+[:[4VGlK5mn<N>GYc@_*7[hls=gr%QV+Wg4u5@'^_bi)J?(5g;g
%]."pE:WZ]n!LHS==r<(Tl*0T2aT-qf4hecegDgi02_)+V"BKiijq;[E*t<QjVMb1m=?Nd)/e=?pCp?!R!OfML4jIcTe+!a9<XF5e
%]K@S^fP8!&Y3lPjmkoGi+H(d-U!mY(R(Sl0J"0f#.mMjIr;=$:YQ"=WbCBDpqd:Le8tdDOh1g\I&SVCBEkXZSaFYK:%B')SYl+RI
%8Sc$Z_V'pIKeZ[!ErPB@nT)'e41i/+M-Hq=a1Llfrm=ielhgO+CiaffHU46Y,9Henc#tFL@c=r`Ap[DX>VFCj&+F?1@J7C5ebRI!
%G&es@2D"$/aRdr&nDKmq:-:p,5etRLF8]ptl"H^fTA/UJWol[3WqH>HHM[/Joug6KSF1#HlpKdjiQh?`ccO/k_]^2.g\((_+6`Lu
%C:Up'^Kt3l`gQjP^2,jJ+5AG/+'>a3C>PLmmnEYP%Gs5HaJctdoG60UA[VO5]-eSV7lrnadXuhPlVC<%*09f@I8J`@T+H99<umpd
%H<:B'ICX6U+m[T1<'_or&ZKP-DX#R_Yq.N)>Q(GFhlgMCE&C$5mkmN0oI?HXa?7nulLMJgIQ7dHq/Wm1&!l$+3'1CtY8C)]E@&,a
%^RYn<`l#OF+_H*M>5d[-X6>-_G&Q>$iShDuE_J7^5ssf'8GF3/p*5fFJ,+k2p-1*Qn+==AaPu*N/Tt[W0eBVOit5i+6<L/7)_E\0
%n)P+)RW\X$>l>geI,"bhht^SE_]u\RC&MHrU\XJ,f1e9(S3S''J.5l9H@cGF3g1Skg@40Ki.Gf,AJJ!Tc3L7-1s$b\Hh?=En'9Vs
%;>!RV@sgKUSM?G`4;Q7Z]j@o*fBDeG?2*.p'KiS;Et]97rmFSMs!*h1Ab,/XZAc]7Sk+2M(9;)SNNgFp%T+>9;_P5#4M&ENfmSP/
%g0*!uX?(U',$S@n%O/BZZ3-WW_9d.:bLknA_m/(3[a1S'J4aV':"I,Cd3F/87!s<anP;r6R.f2/q%tJD`6u5Sq2jfipA2H.gCBSH
%\*ms8NS&BCqWYc_QhRgt\!_[FAPAF2AF5`Mf-Ds_;E*FiA\D&kG!;-P9f`lB(g)6)[,9`U+'5r-NG-1([-C=R4I;ao^73E7h0c4#
%\fEO*Rnb:O#$B$.]'Th,?-^#Ae+qI11"C^p;4'5S\IfHRmCg'DI#eHG=Iq7V2@cT?fD4K<DIqA!\)W)&S*kIq1N(H4*k091nR&H^
%2c#*g#C.JiJU$2L`8_GgokHQo?AZjL`*j25l;9T27CLk-7kD3md6j&o[U>5M2`Ci"LmKb[2-*KXFZd=LmuHg@oY#=d'VDkEpH8m&
%e9Yua$t&N%b&lK_hKBqOaSW^Kmc*iaT!<EN^?iR<dP[?H5BK-J%kl5H<S#`>UpYq,H@.I>%tfe#KtbC:@U=$QdkC+"oWe.bs8<b5
%:%s![rbKOup!WfeTj/UA[p>sk]Me-KRs=+j+<jR>8[c580MZqdZN/h"UmsI^A`>n,Y,"W2>nDOUP\<]kbeus7Ft)6VRQ0'6/dJJ`
%8>@s1WIunu'3Dj=8hu@I[S'pb-53%R1@fe7SMW7UFa21\FY\NQM2sP@f7buBl.?#-O;9!5Hk>@H)Ae;"A1uBZO7NQ;a[YFSilWO2
%*4m?2#Hl$>9TYMI+IZ[A+K\9F!#QN8cK-Dc^B^/_"KX4NjR:Uo1+=h`Qo'Xg-M;YIS?.pfng$;jYVZY=b6!lDX]T9NA8YNu)MDR@
%k@JmcfTr(k*#3eAM*t`IVW-!J4%\::JV)JRi\cqXD-L?_Qbs2_;17,h?']KD@@&*TjHiHHU%XV4/i&BD'1%H7(4pO?!;IT`M<s@$
%^ccr^-HVK/N8t.JYnma`F85m;.C+abl*EmX@,rH7-NSqXQ0pq'YW/t@;_P8>iYX#4eOIqGDS5G?520?3*:__;g*q?eQ4#&-F:uG$
%K"bW(3$Z?:\o@9S=>jV9$I$Lrc<8eqLN!h(8lhQ_0mGUi%GJi/q@-JA*PQ>Ace7qYHHI9Bq2+d\!78dt0O`p.R!2[O"ek8A0T8@N
%/-)M"(+i/$[?j^Z.i^#3*fZ>Q?096gmh5`Lj2@_jh+-jt-[cR2EC":Q!%1/?5g%Ic&>E_hB;9=WK[mn6P8o3dUJ_^PmgJ:k1'Y=p
%jAJe+@ekUL5u?j;@AD1B,Je&cN<3!EMg>lsja+a`/>2YEM#i.I;M?8&ckN"k'u>cHN#\*,_oWe<V?&2R&/C_97kVjg$2fk17>iQ+
%?47u+11\^3cn,*`64d=@i!9pf_U/[F`!2=._Y,/JUn,:j%e@NZ%%O:BR41CkH:'s[WQ>dYX##V-+[Pl0"9A^H"eC691/*5[$%L$;
%p*R8*@ZPNiTLB3mNKK@7OG*=M+rqAQd-!<L"'l57=<\-Y*CM2?alGd=PD+/kgFh)@)2a.sL^i#N_q'JL5jeeY3!0QRLrd*'[!0.p
%C`sJqU6&-9]c7')r$Vr57bOo+XU%A@"^)<8onWU,a5fSR=`u+;Thi6M!VrgfEm0hdA2=7-B:B>*.RlT<+'iA,"0r_[d>J\_1V*X<
%@)-hu]]n+mR8f#DQs)0LR*?Tg;])E"oAHZ%OE#u9D!P)aaG;82h33b-BSTn\/U^H(&Zs8/']o4cPFR%&/1(nA#QBGM,,dI\!^t(Q
%U-+pp'SnH9N16XsWNIjL1nSnkG=csLBK;f=i]"uZEj+[^VY:');[Rl6?D,eW/kq]>;2C\1,TNK'8S?E_E\=pnO3RgJ\IjN<"kOHf
%qM6_k8OProC5pDF00r/WMU.\E+?bWn!3Dt-.?@+6:5!aT!@Soo<66p%[>JUsphXIUi&a5!9#;t/MN4PN`NdQZg!P,uSLA"J<Y$u)
%6b>aN]H4O8,)UD?@]@&Z,`nunk8>\9!K`QTYpmjdf9a"&Ee/Kk,*\l<fe%heTcXnrJ1-^!PkOI/<(c8R`rLYf-gMGijQm.#JdAW`
%H<ERuc;#e#.hJbd:os@k-scm67SEHO*E0V>C/&74Ji?QON`l\Y-H[r5Tph`5Pg(,opt#,G',hgtrfenZ$IVKWXdTD))9/W.fMjPT
%ft`o,n=m.Pm:S=M_K!C*;@F]mUJ7\M1F^3I&W*ackU>4/A17(#LS3ID(8FD1FOCPGg-QI;[[aJjo+"1P[th'(HsW1*Cg4/OEc1Id
%Xrc_]jaN@*X:^<t'I:Sb5]X$UE*F)G!=U1]D^%Xp$W&"^5SQL9<e['r\5HT9kQ/W`TV7$(`5ED($0q^0OXXB5oPh"0,$NO7((df@
%::Z-tl#A0$FiM7<&W-XcL_r&pcUg:d#8:/3,s7p]RLg;G#.JS<<+8.NBTld3X9)IWLa_=.7kMMYD$M05k`kVu'mS)XDB7HP8u'iU
%L0e_GK7,#Mn:KlQ;Lh$b:'kMPb].S*+\c%RB[:/I!6C?=,qQKl=R$`\W_WV(/11M)/6D]T9kI6fkQ_857"osO-NKPo)%7dg"hlat
%.q+K"?_WK;YUhQ;EDijhaA.H60N(q?BKWqu.[1)R`-<Y+8BeDCL@GD&KkM:q$iS"]YkugB1b]AEN1MUH.b(McD#og(cN#h%U(6R`
%qUeYu<\U,\,'$"3651BDAZUlR&/,'Vm#+Y<g5OnJ,iIq6HGR1#;i"j*$cN]e1F+l0i-Y/,1G20`Zf!o3DSf5$bhiTN$8=/Ji6\\I
%e=j`W1jXU6:.2T2:+@sZe/U31!ld7tM%YhRK*]Z7c_Qq1H>OFjZU%U6cS0iH@u<VAb4%flkQK6;#crP8&6KtXYH.`V%pA)5\JYJ-
%;<",-!(bLfG[[;.emU+_C+KY;_-o00$]"nec)?Uq<,W-E4_,s`fgb9DMTB$)bmkg(OCZup<?;_X9j/dAh?eI@7mWs;8V#?.$ucjn
%GT6nfe/oe;6JfKcK9EF^/!<BQ,mqA2EkP$5,a;crE.U?josF:LBNZF*S^FH>(Y;oYTje4=R&qFCYb$o'bd$G9@=R!;#.bVr&Z%>N
%'L:lC!ocKI7WbgNfqIX:&Oc[,^'cN<Bbl\E3J55M^c,(h"p'HnG=Xqn/kDtY8VC4j/aPg*-U_8U<sHhfC=&3DS1m3E%gCF_ThQ7N
%^4?,Z'g)oj/E\6M<#d3'0/RDX9E5\L<[o<,(U;PJ64s#jI7+01gu0?u&^qkR7X>=T_2T:NJi<Dj69ScX8fM0=EeSJ8i*4uFLhYhh
%:8gN3#S6O%+S=+"Bp/^X&YXraoFo%gU'd,ni3N\T=:c@[!YDXP+DUq4^?igXd>k1=R=SF:Z8V;6F+ME+6lh/32)n%T0`WPjSO&W0
%p;80j:7,%<=<UED(*F5n8B%I'=Ybq';70jeM=MC63$BE.jB79=$]nB3JJ[-MnS62ldBpdaZ7:DbnYHO(:'Uo>RY[1r_lWQa"YXIb
%U@g%4BSBJTP'cTJ)]XA>)koF9_VORdUY)Qo6L7\l0SC`qS7/uV..*,^=YcQpe0D[h&Ha4u=bnUhR"\Ma_Y@8MSO?9(di9!cNdhX6
%N!kGjkpP&h8'!u4A$nEsd_H\"#'MmK7+S*!0LF3!$=ifj.1DqDSrJqf,UcBBJ,:Y[l4[FQH3P4b:\"u*Y4"BV-uo<@*MT't!2thi
%P^QDoKQn3tf&Wks6Z<@s;>b)^r8<T[[7QPU.al^;NZu=lJS?:m+[IA^GE>OnfDp^C/dLAk<eYEX,YoO?1e<B*k^ktY\/EM\M.0o?
%ZF;rOYaaUK(n+-[2r_ae'nJ0(e6U%#'%%pX@6E1>$-EuqAZ<WnHGO:2pHHM?9!o=l6np*Dj^ib.*Ggc>Q4[*3?)%4a`./S$9fEep
%f>pp>eI2bi$G1k2JJ[H*4=KEU[AZLuF@Gt@@\NO*BqpgC=lMZ3)DQ%,*WYs_44m1G*'0>gj<.]r?mNSu/O0fS"'8B>,4h`KQ!O`Y
%ih)bS4K*B55U%Gq!dhg%D<4HZ!(ICZlIF,\[ta7S*SDJPdrXMJ*p=DE#IIZL-fIDn#uT(6Dc=QYK<PtR+5m:q^cG=9nq@E5_Q-B"
%Za0iLjjXl0__ZC8jMAH5\'uYL)K?ldVq_:SIZZ8OmPCYYCj;n_8tt>o<fLa:joP"1"Og(Z2SsGJ;[T`MdAJAq$"IB0Kbsg@M-a'>
%;_T@%3l,"FN%Ga^>B!sUMV!B3OM>J369[faU^.u0(_,E[J=nA_6=pr-D@nuDG=+&:1K'.Z/ek:<;\:fT6VcX55b!Wq-t3bH,d0<P
%@7Gqd+;OSMMF4^r&]&J>$f"ED'bG]2WM$6@pmr=5,)[#mk[CKFDAU)K&<7F++oBN?)ogU4#Z1m:;DRIW,.XJ)([p?9_!,=4^]A&s
%@Mq[%N,b?nJ_/Dl^#_78?`Dc`(rQJ1#Qeb'+]N+.9KblYb9D6Z%N([o&H3Hj/Rgm<pZ`aYkLF6s1;HFInM"ulRY`g7&PTS<KaCUA
%?q33Tc%Hl::QV)Z6#=nm=]Da6?"/bkO]4%L#*d=,Udu?@/<kNZ%herJ[B7FM_/kQPfiUg;A=+U#_/.'c&GHd2&PH'H-aZE\d;.*+
%HdO>Yj+%@<.i\C<dL`-aG_?)1Fe/eh"e6FiX!7bcQl3&:(crXs&>i3T\9^OrVe/)j\M.JAdKa-D!^h5a5YNi3G(QrK84UTG74]T!
%JMpt<aJoS@;3&Ng;\Y-`bfO+:+Tqt1?lk90BbLJmMrTES"]Z_Q@8u`Ir=DB`@H6@<Qj8S\_Qsqs_#)&I`QkFWc5JUlJ'fs)+efcA
%j9r*t,'m^^@!*YNql4o*cjIT(L`Ol2Ls_(V=1j9n<SEA!-+7hnY7)U&JQ,#A-h1H]2R'`+Z5=mTJ1ql#><5WR@)6EL^)SFBK$dCH
%Na'p[^PGf>?cATf">U3/Z4O_-1-ula9Sjdg*/sYo%5l#'#e(*k,9q6&!m$JL!SnXkCuYk:po<=(`o4WmP6t6C2!5Hdkc'1GEn;-3
%;_T]GKu#NmV>sOd!1*-\Lln4,7\Wi=87Z\o'g4juS631$*t/[u;)4)KTd$`u4TW"C?uMf9GY\@s.K[F)#:n"B71(e>J&Jce[1C@m
%Tqr#V*9:gc3`AX7;%6X;5<c&H/'F^F#^8cMT;k4-"=X4M\]Q1SdELKu/jtD$$::pVpn>uJi&8%%NC^9aQ$66CB*K1dFIc6b1N53>
%KR*'e*4-$c-3m^X2d).>BJQTT_=#b\6=C@+Cg[^%p=041?5UL$3`WBj@>JG'Gc(sJY=>+<E,Dpn?(Wr5X=aPoe&6dB3,^X)2+20r
%HIeLAL3!?i-_2D6OE!RZ&6mI7#SGW"Tk.4tj>oR\&A/0Tku_4=7bT^L%F;"/(]$D&JL!Z,GmNPk+:R77I:83]qjN$"&Vs>G2+):,
%M:mNLA.c\d=:.HS]Kgk4N_Viq2J`(F(R:sc/4EBDC&..&KeH+X=d8-YC+`%!EK3T/?6fp=TCA9OEbm%9^pO<)FTB3R/p\[$^`7Ss
%T=-FPD>!s#Fs&*$NEQru3C&Zn87.sZRKbML]G^dCQ9:,NOBX)0mXW^\/SrqcI]uH-!\h\R,$*Q9!#m_FW]fA+R'T2'`k;XF`mp9-
%Yronq71E.RP;-!j+Ng42[]c%(+NHkEU(BVDdD/T_mY=+!hpj]A+<-""jk*"An2\?Ep"?8W#7n'ul=t[A4qOAt_At6lW"?rd+=R[1
%b<"b;e3F(sR84?N7f&G_&;'Zq'6mmb:lYV(&Al7->JZP[CaIje$\/u9TW,"k`/Xiq&5rQ;s*Q8Hp]kJo2%\'"B?0$aLpA1^S"S$U
%9#:VFWq=e+@f:p;HDKLsf7AG&=jB)FAo/!_-c?:nK>L7Od"h+.GWulf#%9+M!<CTm0b9CA%+MVCllDK4c#PcFKEZYJA2O?Lc:O(U
%eeDP3M80V7:c\S#*.m/O@Y0\V?Pt8*eAM>($]j"WhuaP;)mU\D+SlE?pU27XcCP:`!6+-H9UTFrVZe8LSe."e`.c'i&?W+hO]b-#
%:$T:iU)XT,L]miHGJPO$CAZXE)T*F)4cS0scY/%9ECc$QoWTSABQXaalF%<)p6jSN4Xl&$4X0G$Gm.(0i[JU>%/gTeL5s&5+I$fG
%HCGtq/KAtFBLK@>Cp1ZLG/WhNP'7rb',Z?Ik$Z_=6dhi%!6HHBCb%uobZ+:iGC_.e+:M3O,(=iI@OI')c]3&$MAV_b)2LSY+6=$S
%mI[!+OjcaD&eLBR(F>6Dp(R/a6fd7+_fd0$6"8EBas/$[8MbOkV@*taln$DOL(AiFLTEQ\Ssq>NIV2/P9-"SfO%<#R-l`Ri\cd^H
%e7jFO)!A(Y\t2.t+db)d<A5Yr%@Frh@b2AnV"&RoYGl-\Z=2Gf^-s;k+_jmg=qnC6_m<N/J-?KAps^1Y`e#6=+F<bN@N\Rah"V+H
%[:@XT/:bYT;I!1qJ7P$P89$(ni!a8+/!/n6&0h`.#,)fb+<8st.WGO*!!GeaQ"o6Q61t?#nfL3(e_r5;!&^uakfD7kb`_4n;d]Y9
%s3@W:#F(]4V&!(tfV%psP%mZF;ALD%!XQu&!/[3uC>KEu>2TTf[Kt.H>;uXd2W6:3'fb9^R:;(?KjdYY'o+U_XWRU4]5'_b,08u;
%eS]'$6HKPP1j5VR*-FKiL9NkAf;6N@V8ERnT(K.BJc-.Z$'(esnXWcULk#Dk&rQou==L;B4R4f'S8h]t@R.F(mKPSo4?=V,Gf:,m
%,Uhr>>-Bns&KZIA71"M3#,^l"[#JOd#f_fGR94Hdr#tt1\jPYMfOVM@FaD83B!SjrrD6#br<ClA=^G1Q?p"g"GSW%jl6$<;4+cn+
%hef5KfZm$l'8iqaLqRhI[EKa$i3FRD//DZk\Br_1XCjpo!V*#n[T$6D!^BcrGYVLg(#<?<(d^VnHU>BI6j#4a3<B1L/d+)=OeOoe
%ru7Eim"eVjZ#.KiH51r2`F2k1djC=K3EU1H,Adeo,unM`&LNM>QLuoH.?+^%:d"ek`*$q$1f+DM719VjTan-&D<Q/]YaMr<ELA<4
%ZOcF/IA&bn*"eXUeUWBeN$g-oY^fRn/li:;"+tUQ`KSLoQ/IKb.KCZ1Q>ThoWul+D#kT6bO2u]V5DLM=7j>Et?H(Q9D#jr#h([p]
%!>J7-1]3gbUM:aLe7)*:=u@-O$9-N\9ZCTb0T**FaBHO.'uqeg"laU263VpL**E?F8]h4\$NM@Z?\KNC9`QoU^kV1h,PI,f4X`$a
%Xhe*S5bE(5*/8nJOQM*)4USY\$<W^F7\(P^1QQpYQ6J$SNb??:.bh#07J`X2!g80OHk3t1[1\]?aK,@c<*3!9@4NhS)AX\/OK<"0
%2)SkM0r>sT$4!65R7[H(iYMrMUc=Q<Z-3P#5Y,?aZjG2`!eDq\C/jQB1OTm:3?XULZ)]3C5n>)_Gkf[#9g_Ag`^=iZ6;0NJ.N@7j
%2]Zm6oKs`.`5BL_aD[4J&[-_;!cH,r%$DP\jB^#`WQ9k'!dFF<8q<eBLY(E74`Bun6m?Ca&NeFlZk,`qJ.MuOr'kHa!9BhuQiaPZ
%bQk*MgBA-Xjg<=C.T,Y6j*Anm"]fY?\U!?8+@qW0MI,nL50#]-8m33,I8qU&eJFfX'2HR!g1EVH^.jtO1[S%k7q2j1$s'31kkL*d
%GJ3UL<mtFgJ0*Ys!(FC$2PUN8:!k)g@FYd>Kh4m&[3JUVhF*T'=WJSBKGS.NR9C<!B":5*WoUTbVWBoKCBQ?m$-9OTP$eu3cebs4
%gr##X%5TR)"-CLP6o'r!J7M=&+FjHKC_3dB,E8u3Rjpcs4!QrN):Ydb5P/9l7GGGo&i:K=@C<+8c9YhAf^_%<Bi1Pn/6F5C/,,>r
%MQdg/%REH_&qb(sg/J9%9,p,s<TP-/b+<a5;:W*&25%OJU:&SK!`Dq(AW[!]2%<+g7n!jk;[m7U=j)@W/-A[Ba?.""CE&L%JHnfI
%C7CW10Fr.2IAoefM""6sEp-]ZA`,q>kuWOQ)F4U?qA$;')X@m`-cIrY?)Z6c-tF@O$oT[_JQN-1%n[le`AMBL7usTqeSZFN\=WA3
%oJ6Q+TJGUPNQf5]VcZ<K^";3X![En_D*]`aaECV9e.!T7lq(#16BYrYTbcjldr[m-$`\j<^hR/20kL_+P9=u40!HSid;.\\Z`2H.
%[^(T\."]q\Lh$ioOI^.:kaZrRni!Ot2U0/2Ykh>Re'`r6A5ZB_BZs/BYL#9#$j>\S;J'_1BZPnFo@0]A(c'HPf)$"\e#j5I.((mS
%DWp@$mo;e,bodRS;Za76W=GLcq-$WXf*P;X8S(o/G+K8&)K8je6cW0+:*[:^')8O:NM4In\4]Z!`W6MC="[$"#`AcD.=tD3ML$*3
%dL";^1%rN0KqK][i*!q/VhcR7j7\5$M"B[6f"]e'5iM7[H3CFGjs6,UCV9urhH,F>=c8.;*')K+9Y_:RVh@k=#`"+c%W*]5%Ugui
%EoMZ?_Lj.f)%8c^8e>O'Hoo2CSB?q`MB9GD)ktmT-qt0-;9?<tT5_IiWj8:Y_g[0"1rBsV'o7N:Pec:QVDb,#_DjF4.a:4,UQerC
%<2lWGE'-hKTV*/f7V@uO/;&id$jFXDC7TnDC[pMj6Q!gkNFRLoL$LHm:P00O_,R[LFOUe/&*0W/ic-OHK5)1>;BW^)KL-;=ie]eG
%b-*/CU<o>Z_J42U+Gh*lal%%<lmHb^bID@5MlZMdFGc^qKP34dBP=&,1lIgUJB/Ojfb)ZaZm6k"#1oVHJeYRu2Brk@JG%/4[7MO#
%fMpZppPM5cQl'.miUB-kii*BLg*ahX6&g1Y1'#hh>F94r!H;[Z#[,eE/djRP%3fn9O%V>1euDg'2Q2s7?jDP.<rfQhlj&9`/[[/,
%l9X0r^2PEPAXi0-?jA\;.Y8c/Vjr/^YV.Q\L#q[+/>H5O$kD5s7nCgRd4W7`(l';ae#V<BfJ"Ed?9jNNQ@`=\/;e<\'^paL[R1MG
%goe"qc'r[J`4Jf:D["XNN"GQg>]Er,$^J`4Dd%FeH!0"co49cNG_lg%CktM;]NcVU:I.^[5'agYk^5T3?94IQ;']LIEO_=Uo4%MK
%]E_\%/<tEfJ!p`1W>3be-AY$:%FLdg#de,b-V#:!F'&S*:n\ZVUPb<1bn,`2PjO*hN8gS/mRDT?'[Y+).]"_6%3R&5DA;-\566j'
%g*B3']AX65$I'B<NPJbl%AQU:('RT0dEW-4#26-WU.GT.KL9<hRsW1j)ZZ"le^0`0=*f&]l;b*Y.t\N#HWTB'?7Xcu0EoD#cBe;t
%FJK:5:UtYmOO=-?UerBA6l^e0"k(:gYm?.>Af>nXj16])Q0Iofc1q@T4:!(BLO]c>XfRSH+WA4"5"n3P!'HgJi@d6eDPsR^B6<"]
%iM,NL!l17RHF#&0R;N6_8-o9eTbb0N!c,s;p0+U1(77'Lcq?UE1ktOkf.nfc&*MPAB)'"p+[!h^G%;cc!nZ0A73>c"kGfIdIiA,"
%a'\\ZajtgA=J,HLW0clL5,:S5JnF$mV(kSs)Hfqd?Gh^mT/fuVj3_-upr9"Z[hcJPe079FBQ$8aHDcl9LW^@&IV@*X\3mbR2!uY'
%b)W-.&8LdWUdI-#8t)jspe31uU]tS8M\h4=kr[rRTFt'U6p/9@6R3<V?4V+]NbW\`J0(PV6;$NK"2YBV5Y+u]BBa_r3+''$1+?0_
%n-U&J#sm+P$n#9aEtPgT\7=H)1UP5<W+gD+j'E9IpP$GCef$?`&l:K<4/I?W\ZXajS`Y6rPu"@6f1VoK1?@;-jZWi/+=u5T8$/b4
%87+,QNBC0>!$f&TL`(_oR)IDT`'jkE9*iOKm85D5RD9RC!#;Sl-3(Wm-!M>VdA"E`7'\2e&Ig:5Eet@Nq^71h_frR`?7YIgC^mQa
%0PX8#Z13cX#RhSU$:#F.FiN*6>8.r:PbFc"=R4[@$5\9cHA)NH#A?,jg::5W!@S"IRYc/#HET77QoMFn<AWa[g(2T4JFp"!\r[66
%%6Tk1X-o!\$ECXFaIq,2:h(e.;1X=:$1[_V#ubaDg<[)RgM+S/&7f]q[NiJ!@AEttXp:tO6)k^p$?/WNOFR[2'N4g757t\k8.jKR
%eN4nj]!;I'4"$E5J05"!aP]Yl#^qX%E@q",]!CZ:&<.jlU*KHQ,-1)]8s@lt)2hk[OVedtJGUq<KU%COFI)nR#0,pDZT@7bBdL:W
%i`dR;KkA[k=mo1O`'X3)03FuZXu4`0pA!VIDF<oH!APJK3K,jn:dYoi$]me<]G^o08l:['7#la5$NLcWL8FUc<BhbhhDi[?OcKQP
%i*$:Kj^:qYKR8`0=G3k/mMr_T%`%I%(b?F/7#32j1A`5R#[8l:(af\[U836&J6+aM]ubk?Bj2)e$sAK.J-<PF_:5_jcO_nR&R'u0
%#(?b]KkffR6Gg4*9%M^YOVu?$!4OB:UF]U"<:Bh%SqVT'+a'i_&/ajZ>=`CSU]D%`.'U3LKL1j\.!uoB!ZOOf!jKJ=/S[OIcHTD&
%8sQ1&oE&Lf]g<q`8`m@nIL6&d8h]]\Wh#Qc8<SM;#%Vf&!`I3'8taRjZ;n(QGuUN,!kp,eY`&Y^MGZ_GMkC:]8;YV*6I-<(A*B-Y
%6K2KF88$Tm7T18,e=oc)XF[Z1:5oi<Wgs:J2;HjgYkQdG5ro]r%M&R@,=#@I!=30mlmS#K&m,m>@:^$gD*[2p"F3UfAXS"G</N.9
%hIj[l-=0Rg+fK*+g(/q87G-DG:f+,W!p`rSUAYXd[ClI[X$s`DQ`K3qD27$\bHD9rel>PK%:o"s&+VEnB\:QRFd-BLLZ'A,*O<ek
%@o83lU9b,1:m>E77#jZF+9h4hZU!$Yg3RHM9;!./Lia,3WCfCnZdOA$%k_D2c=eFL1IVu#fu)-+2[&t/,,)F8*i&<2Y/Q)!VM0"Y
%#%84(&/T^ASpc295X;bX+3?haL,:R-CMX6Q-6W3h#U,!7=@Buo]FZ4SJ)W([@CcIuE*ugP`%1%?.J_r:<#c?1'R`8fS"SY9!C.qb
%6IdVX@9ltdK[:[?'<2heQ)4]M$uCK061M$6S42#&hF?aK]jO)H_p1[#K3Iq3)XDihT5.ld^mV.Iajj&-#jDVsLhtKVg.ntNDsCbM
%a"(eON/e^LGun<"j4ulf.jBj4OF"TXJ5k<7?7-\]iAM"Lh_'Sm(dMoNi<pdoi+3(d/M#R18I^LP0dsIsBG>[L7&,d$=<P:S$,p\f
%M!lHm_^fe_,Ti/S<!^\3fFa_Z.b[b'O.s,qd0SLY43OKDblX"8"0gY]#EVt7JGbGG%]""GJ6F7pWCtXm\Cse547en&Je`fdi@m,j
%!(.e^8?B<U<*#0t:A+6V'hR't<#u(57M0Stm'!AIVMrD%/jT&lAPlO[ZJLU`*X9^jFGi-+<m7FD?Db3C.V^i(*O!tZR[6N7QF7TH
%7Rea;Q_I!%HU"0ELAH0b]pd8Jj+`seKAmhh%BIdb":BJY*)T@!q,nFVf[Q"_$_h*@gtZdH#5tJ1A,qlAYu!Y,!q?;D$o"R-+EJNd
%r2&8:LM5,9(+>>l<u2KCX,2_cn.)7a6)]?D064q&2A"tVDA,LlpNdV#E.!$M-`]r$m9<+]BA991?=a=k9H"caQMO"Kh4(3!:`0gr
%A/@DhaiZ1d5c'!5.QF#d[Oc@L>D802/@3)\+e`3qA88YV8O3a#J[XMhA+UlV!tb.!!3)UTJN@;'&qC`X%R=.Z_pS!S*U#ecm[T%L
%U?*2;BRH!:V3S%@OR%+jTMTnsK8*'Bnt:4&\J5*iq3*9JL3g!o/L^IA>8R]?X0Q.Wd.8Tg<7</CJZ')n9r3.J\CA\32Ui[Q-<D]0
%2BM>Ndf)+c,RAW3j:\d@!^!V0eVCu;1:SHm'e?rKm.=<rbYd4g&Z10EY1/3pkhmKim.h?h-=X[2#+M5^0UfqYZ7m]6[2QW^]I",b
%J?OPjjB>Sr6Dq]BTZ2_+NOoOJ0VZdO.%$jsJRDHqN6qAc7D^E1#k@aO'XZgPlkjK?2-%,XpNKIG"Rh,"EP/DH*QNM>D5deQ_TdcR
%Lb'.,C$6bk5QEJ:3Y$j:M],g/]Y+f\6r=quTJl@F*-u=i_?QiOW8$B-pL<anKJ@.6#&Xk8J`mN[oS'4'HT6RAA0^T>(V\kL1Uph<
%r<<$Kp5H`$9k11.hZ"^5i.,Q5V5OTL_oK\4Rq7T_R0Ks*d8aIc@MUlen:f,]k.1kmbD\g7<oXY6SUk,uf_#"`!r.C7dsCa,@1YnI
%i?*u??l;1C?c%B#bn)gk8!+7SO%t+SE"-=Xh0<Qh>[u;WJA6$t'`c$Wd3;2u&j/G#+b6r(O)))DOu3kN;l><,F+!ng6gjWeFiaJG
%",r%L>"<^E64IcSGX3X5clu38dPCUmZ@l5cbn(,S*rn&*0$:r#1Rc/#8$ms2>TCo<,D;@jAeN(lLeK$QUEm`18=7K>%kiNRE3CEc
%KU*I^6WB"U(PkuR8mu`_5S`pG!b6#rTLEh#NeL"[6Ge/OpBeOE>n5K[R7[,FRtC!/=uf4+Qi\C6RcKZ][a<M*-3b02rFQ@d9_m0W
%]6l6TV=9AD-\Pj@0MK6^j9Eua>33[f3i6Ec2o;9pB_J:V(Pm=fcTqQpHBq2a9gA`RT*B:9_h`u]=(;hZrQYI7A!s.?D\n@_SsNCs
%c!ud_CGr>t105SO-9G<UpgbN5ee#W9r-D/d9"+F:!JVrk3B8[B6b&`Fo;NhBl1t9>6oh6QD&GMC#9_4?=Drb\'V_ObF(c]sK$/o=
%ZUfm2H@H+W=!*&1"7Q[E%QRE$U(%j"J8bX?ZDZpLg)Rlii+"?Li:pH-8R)?mc6;#iO;Nj69;tE`p`1S1?PAlIOJk3FAKaRQb#Y<=
%Aa#47:0,i1e="T_B&r2aTr@V1C)&O0YBIuu/*_JpP3(n5k#<j,$-@M*ScpZn>pp>`Y[&fs!/uN!&o.LUlE-SWBfpk<65PK"K/pk"
%PTH5,/>Wk\7_u<\,;$_>8#8s4G%T6pMH@7.S1!OKF*+0a-UC/8n67F40sc>[$J>EJR\jE\6,Gm.>!P7bV6HidFZ\ZqF%tC56_Oem
%`8;^[*"1o9'S.ZOXL2HYhs'eAo^aZ)%egQoMnH&uNIarRh@2aZ>k9F[3]VZ2"_[l<Tmk'+,XNC*f>%b:r7iJ=1iCr#BmgVE9LhIs
%^^^Ra1NA85&!]$K<FtQbKto27qWUR`GaJYdb[MddhA9Oqj2L2RIJ:C'3qqCj'gHU5eQ;OK0##7%H9IfPn0Qn7S*>]2a+&eV\t.g;
%H,RJH^=f[?ZYoA`oa;o+1j&NPMf4)-s895'$\p];63~>
%AI9_PrivateDataEnd
